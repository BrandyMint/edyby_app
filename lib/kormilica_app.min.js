(function() {
    (function() {
        var root = this;
        var previousUnderscore = root._;
        var breaker = {};
        var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
        var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
        var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
        var _ = function(obj) {
            if (obj instanceof _) return obj;
            if (!(this instanceof _)) return new _(obj);
            this._wrapped = obj;
        };
        if (typeof exports !== "undefined") {
            if (typeof module !== "undefined" && module.exports) {
                exports = module.exports = _;
            }
            exports._ = _;
        } else {
            root._ = _;
        }
        _.VERSION = "1.6.0";
        var each = _.each = _.forEach = function(obj, iterator, context) {
            if (obj == null) return obj;
            if (nativeForEach && obj.forEach === nativeForEach) {
                obj.forEach(iterator, context);
            } else if (obj.length === +obj.length) {
                for (var i = 0, length = obj.length; i < length; i++) {
                    if (iterator.call(context, obj[i], i, obj) === breaker) return;
                }
            } else {
                var keys = _.keys(obj);
                for (var i = 0, length = keys.length; i < length; i++) {
                    if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
                }
            }
            return obj;
        };
        _.map = _.collect = function(obj, iterator, context) {
            var results = [];
            if (obj == null) return results;
            if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
            each(obj, function(value, index, list) {
                results.push(iterator.call(context, value, index, list));
            });
            return results;
        };
        var reduceError = "Reduce of empty array with no initial value";
        _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
            var initial = arguments.length > 2;
            if (obj == null) obj = [];
            if (nativeReduce && obj.reduce === nativeReduce) {
                if (context) iterator = _.bind(iterator, context);
                return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
            }
            each(obj, function(value, index, list) {
                if (!initial) {
                    memo = value;
                    initial = true;
                } else {
                    memo = iterator.call(context, memo, value, index, list);
                }
            });
            if (!initial) throw new TypeError(reduceError);
            return memo;
        };
        _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
            var initial = arguments.length > 2;
            if (obj == null) obj = [];
            if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
                if (context) iterator = _.bind(iterator, context);
                return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
            }
            var length = obj.length;
            if (length !== +length) {
                var keys = _.keys(obj);
                length = keys.length;
            }
            each(obj, function(value, index, list) {
                index = keys ? keys[--length] : --length;
                if (!initial) {
                    memo = obj[index];
                    initial = true;
                } else {
                    memo = iterator.call(context, memo, obj[index], index, list);
                }
            });
            if (!initial) throw new TypeError(reduceError);
            return memo;
        };
        _.find = _.detect = function(obj, predicate, context) {
            var result;
            any(obj, function(value, index, list) {
                if (predicate.call(context, value, index, list)) {
                    result = value;
                    return true;
                }
            });
            return result;
        };
        _.filter = _.select = function(obj, predicate, context) {
            var results = [];
            if (obj == null) return results;
            if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
            each(obj, function(value, index, list) {
                if (predicate.call(context, value, index, list)) results.push(value);
            });
            return results;
        };
        _.reject = function(obj, predicate, context) {
            return _.filter(obj, function(value, index, list) {
                return !predicate.call(context, value, index, list);
            }, context);
        };
        _.every = _.all = function(obj, predicate, context) {
            predicate || (predicate = _.identity);
            var result = true;
            if (obj == null) return result;
            if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
            each(obj, function(value, index, list) {
                if (!(result = result && predicate.call(context, value, index, list))) return breaker;
            });
            return !!result;
        };
        var any = _.some = _.any = function(obj, predicate, context) {
            predicate || (predicate = _.identity);
            var result = false;
            if (obj == null) return result;
            if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
            each(obj, function(value, index, list) {
                if (result || (result = predicate.call(context, value, index, list))) return breaker;
            });
            return !!result;
        };
        _.contains = _.include = function(obj, target) {
            if (obj == null) return false;
            if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
            return any(obj, function(value) {
                return value === target;
            });
        };
        _.invoke = function(obj, method) {
            var args = slice.call(arguments, 2);
            var isFunc = _.isFunction(method);
            return _.map(obj, function(value) {
                return (isFunc ? method : value[method]).apply(value, args);
            });
        };
        _.pluck = function(obj, key) {
            return _.map(obj, _.property(key));
        };
        _.where = function(obj, attrs) {
            return _.filter(obj, _.matches(attrs));
        };
        _.findWhere = function(obj, attrs) {
            return _.find(obj, _.matches(attrs));
        };
        _.max = function(obj, iterator, context) {
            if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                return Math.max.apply(Math, obj);
            }
            var result = -Infinity, lastComputed = -Infinity;
            each(obj, function(value, index, list) {
                var computed = iterator ? iterator.call(context, value, index, list) : value;
                if (computed > lastComputed) {
                    result = value;
                    lastComputed = computed;
                }
            });
            return result;
        };
        _.min = function(obj, iterator, context) {
            if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                return Math.min.apply(Math, obj);
            }
            var result = Infinity, lastComputed = Infinity;
            each(obj, function(value, index, list) {
                var computed = iterator ? iterator.call(context, value, index, list) : value;
                if (computed < lastComputed) {
                    result = value;
                    lastComputed = computed;
                }
            });
            return result;
        };
        _.shuffle = function(obj) {
            var rand;
            var index = 0;
            var shuffled = [];
            each(obj, function(value) {
                rand = _.random(index++);
                shuffled[index - 1] = shuffled[rand];
                shuffled[rand] = value;
            });
            return shuffled;
        };
        _.sample = function(obj, n, guard) {
            if (n == null || guard) {
                if (obj.length !== +obj.length) obj = _.values(obj);
                return obj[_.random(obj.length - 1)];
            }
            return _.shuffle(obj).slice(0, Math.max(0, n));
        };
        var lookupIterator = function(value) {
            if (value == null) return _.identity;
            if (_.isFunction(value)) return value;
            return _.property(value);
        };
        _.sortBy = function(obj, iterator, context) {
            iterator = lookupIterator(iterator);
            return _.pluck(_.map(obj, function(value, index, list) {
                return {
                    value: value,
                    index: index,
                    criteria: iterator.call(context, value, index, list)
                };
            }).sort(function(left, right) {
                var a = left.criteria;
                var b = right.criteria;
                if (a !== b) {
                    if (a > b || a === void 0) return 1;
                    if (a < b || b === void 0) return -1;
                }
                return left.index - right.index;
            }), "value");
        };
        var group = function(behavior) {
            return function(obj, iterator, context) {
                var result = {};
                iterator = lookupIterator(iterator);
                each(obj, function(value, index) {
                    var key = iterator.call(context, value, index, obj);
                    behavior(result, key, value);
                });
                return result;
            };
        };
        _.groupBy = group(function(result, key, value) {
            _.has(result, key) ? result[key].push(value) : result[key] = [ value ];
        });
        _.indexBy = group(function(result, key, value) {
            result[key] = value;
        });
        _.countBy = group(function(result, key) {
            _.has(result, key) ? result[key]++ : result[key] = 1;
        });
        _.sortedIndex = function(array, obj, iterator, context) {
            iterator = lookupIterator(iterator);
            var value = iterator.call(context, obj);
            var low = 0, high = array.length;
            while (low < high) {
                var mid = low + high >>> 1;
                iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
            }
            return low;
        };
        _.toArray = function(obj) {
            if (!obj) return [];
            if (_.isArray(obj)) return slice.call(obj);
            if (obj.length === +obj.length) return _.map(obj, _.identity);
            return _.values(obj);
        };
        _.size = function(obj) {
            if (obj == null) return 0;
            return obj.length === +obj.length ? obj.length : _.keys(obj).length;
        };
        _.first = _.head = _.take = function(array, n, guard) {
            if (array == null) return void 0;
            if (n == null || guard) return array[0];
            if (n < 0) return [];
            return slice.call(array, 0, n);
        };
        _.initial = function(array, n, guard) {
            return slice.call(array, 0, array.length - (n == null || guard ? 1 : n));
        };
        _.last = function(array, n, guard) {
            if (array == null) return void 0;
            if (n == null || guard) return array[array.length - 1];
            return slice.call(array, Math.max(array.length - n, 0));
        };
        _.rest = _.tail = _.drop = function(array, n, guard) {
            return slice.call(array, n == null || guard ? 1 : n);
        };
        _.compact = function(array) {
            return _.filter(array, _.identity);
        };
        var flatten = function(input, shallow, output) {
            if (shallow && _.every(input, _.isArray)) {
                return concat.apply(output, input);
            }
            each(input, function(value) {
                if (_.isArray(value) || _.isArguments(value)) {
                    shallow ? push.apply(output, value) : flatten(value, shallow, output);
                } else {
                    output.push(value);
                }
            });
            return output;
        };
        _.flatten = function(array, shallow) {
            return flatten(array, shallow, []);
        };
        _.without = function(array) {
            return _.difference(array, slice.call(arguments, 1));
        };
        _.partition = function(array, predicate) {
            var pass = [], fail = [];
            each(array, function(elem) {
                (predicate(elem) ? pass : fail).push(elem);
            });
            return [ pass, fail ];
        };
        _.uniq = _.unique = function(array, isSorted, iterator, context) {
            if (_.isFunction(isSorted)) {
                context = iterator;
                iterator = isSorted;
                isSorted = false;
            }
            var initial = iterator ? _.map(array, iterator, context) : array;
            var results = [];
            var seen = [];
            each(initial, function(value, index) {
                if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
                    seen.push(value);
                    results.push(array[index]);
                }
            });
            return results;
        };
        _.union = function() {
            return _.uniq(_.flatten(arguments, true));
        };
        _.intersection = function(array) {
            var rest = slice.call(arguments, 1);
            return _.filter(_.uniq(array), function(item) {
                return _.every(rest, function(other) {
                    return _.contains(other, item);
                });
            });
        };
        _.difference = function(array) {
            var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
            return _.filter(array, function(value) {
                return !_.contains(rest, value);
            });
        };
        _.zip = function() {
            var length = _.max(_.pluck(arguments, "length").concat(0));
            var results = new Array(length);
            for (var i = 0; i < length; i++) {
                results[i] = _.pluck(arguments, "" + i);
            }
            return results;
        };
        _.object = function(list, values) {
            if (list == null) return {};
            var result = {};
            for (var i = 0, length = list.length; i < length; i++) {
                if (values) {
                    result[list[i]] = values[i];
                } else {
                    result[list[i][0]] = list[i][1];
                }
            }
            return result;
        };
        _.indexOf = function(array, item, isSorted) {
            if (array == null) return -1;
            var i = 0, length = array.length;
            if (isSorted) {
                if (typeof isSorted == "number") {
                    i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
                } else {
                    i = _.sortedIndex(array, item);
                    return array[i] === item ? i : -1;
                }
            }
            if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
            for (;i < length; i++) if (array[i] === item) return i;
            return -1;
        };
        _.lastIndexOf = function(array, item, from) {
            if (array == null) return -1;
            var hasIndex = from != null;
            if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
                return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
            }
            var i = hasIndex ? from : array.length;
            while (i--) if (array[i] === item) return i;
            return -1;
        };
        _.range = function(start, stop, step) {
            if (arguments.length <= 1) {
                stop = start || 0;
                start = 0;
            }
            step = arguments[2] || 1;
            var length = Math.max(Math.ceil((stop - start) / step), 0);
            var idx = 0;
            var range = new Array(length);
            while (idx < length) {
                range[idx++] = start;
                start += step;
            }
            return range;
        };
        var ctor = function() {};
        _.bind = function(func, context) {
            var args, bound;
            if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
            if (!_.isFunction(func)) throw new TypeError();
            args = slice.call(arguments, 2);
            return bound = function() {
                if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
                ctor.prototype = func.prototype;
                var self = new ctor();
                ctor.prototype = null;
                var result = func.apply(self, args.concat(slice.call(arguments)));
                if (Object(result) === result) return result;
                return self;
            };
        };
        _.partial = function(func) {
            var boundArgs = slice.call(arguments, 1);
            return function() {
                var position = 0;
                var args = boundArgs.slice();
                for (var i = 0, length = args.length; i < length; i++) {
                    if (args[i] === _) args[i] = arguments[position++];
                }
                while (position < arguments.length) args.push(arguments[position++]);
                return func.apply(this, args);
            };
        };
        _.bindAll = function(obj) {
            var funcs = slice.call(arguments, 1);
            if (funcs.length === 0) throw new Error("bindAll must be passed function names");
            each(funcs, function(f) {
                obj[f] = _.bind(obj[f], obj);
            });
            return obj;
        };
        _.memoize = function(func, hasher) {
            var memo = {};
            hasher || (hasher = _.identity);
            return function() {
                var key = hasher.apply(this, arguments);
                return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
            };
        };
        _.delay = function(func, wait) {
            var args = slice.call(arguments, 2);
            return setTimeout(function() {
                return func.apply(null, args);
            }, wait);
        };
        _.defer = function(func) {
            return _.delay.apply(_, [ func, 1 ].concat(slice.call(arguments, 1)));
        };
        _.throttle = function(func, wait, options) {
            var context, args, result;
            var timeout = null;
            var previous = 0;
            options || (options = {});
            var later = function() {
                previous = options.leading === false ? 0 : _.now();
                timeout = null;
                result = func.apply(context, args);
                context = args = null;
            };
            return function() {
                var now = _.now();
                if (!previous && options.leading === false) previous = now;
                var remaining = wait - (now - previous);
                context = this;
                args = arguments;
                if (remaining <= 0) {
                    clearTimeout(timeout);
                    timeout = null;
                    previous = now;
                    result = func.apply(context, args);
                    context = args = null;
                } else if (!timeout && options.trailing !== false) {
                    timeout = setTimeout(later, remaining);
                }
                return result;
            };
        };
        _.debounce = function(func, wait, immediate) {
            var timeout, args, context, timestamp, result;
            var later = function() {
                var last = _.now() - timestamp;
                if (last < wait) {
                    timeout = setTimeout(later, wait - last);
                } else {
                    timeout = null;
                    if (!immediate) {
                        result = func.apply(context, args);
                        context = args = null;
                    }
                }
            };
            return function() {
                context = this;
                args = arguments;
                timestamp = _.now();
                var callNow = immediate && !timeout;
                if (!timeout) {
                    timeout = setTimeout(later, wait);
                }
                if (callNow) {
                    result = func.apply(context, args);
                    context = args = null;
                }
                return result;
            };
        };
        _.once = function(func) {
            var ran = false, memo;
            return function() {
                if (ran) return memo;
                ran = true;
                memo = func.apply(this, arguments);
                func = null;
                return memo;
            };
        };
        _.wrap = function(func, wrapper) {
            return _.partial(wrapper, func);
        };
        _.compose = function() {
            var funcs = arguments;
            return function() {
                var args = arguments;
                for (var i = funcs.length - 1; i >= 0; i--) {
                    args = [ funcs[i].apply(this, args) ];
                }
                return args[0];
            };
        };
        _.after = function(times, func) {
            return function() {
                if (--times < 1) {
                    return func.apply(this, arguments);
                }
            };
        };
        _.keys = function(obj) {
            if (!_.isObject(obj)) return [];
            if (nativeKeys) return nativeKeys(obj);
            var keys = [];
            for (var key in obj) if (_.has(obj, key)) keys.push(key);
            return keys;
        };
        _.values = function(obj) {
            var keys = _.keys(obj);
            var length = keys.length;
            var values = new Array(length);
            for (var i = 0; i < length; i++) {
                values[i] = obj[keys[i]];
            }
            return values;
        };
        _.pairs = function(obj) {
            var keys = _.keys(obj);
            var length = keys.length;
            var pairs = new Array(length);
            for (var i = 0; i < length; i++) {
                pairs[i] = [ keys[i], obj[keys[i]] ];
            }
            return pairs;
        };
        _.invert = function(obj) {
            var result = {};
            var keys = _.keys(obj);
            for (var i = 0, length = keys.length; i < length; i++) {
                result[obj[keys[i]]] = keys[i];
            }
            return result;
        };
        _.functions = _.methods = function(obj) {
            var names = [];
            for (var key in obj) {
                if (_.isFunction(obj[key])) names.push(key);
            }
            return names.sort();
        };
        _.extend = function(obj) {
            each(slice.call(arguments, 1), function(source) {
                if (source) {
                    for (var prop in source) {
                        obj[prop] = source[prop];
                    }
                }
            });
            return obj;
        };
        _.pick = function(obj) {
            var copy = {};
            var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
            each(keys, function(key) {
                if (key in obj) copy[key] = obj[key];
            });
            return copy;
        };
        _.omit = function(obj) {
            var copy = {};
            var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
            for (var key in obj) {
                if (!_.contains(keys, key)) copy[key] = obj[key];
            }
            return copy;
        };
        _.defaults = function(obj) {
            each(slice.call(arguments, 1), function(source) {
                if (source) {
                    for (var prop in source) {
                        if (obj[prop] === void 0) obj[prop] = source[prop];
                    }
                }
            });
            return obj;
        };
        _.clone = function(obj) {
            if (!_.isObject(obj)) return obj;
            return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
        };
        _.tap = function(obj, interceptor) {
            interceptor(obj);
            return obj;
        };
        var eq = function(a, b, aStack, bStack) {
            if (a === b) return a !== 0 || 1 / a == 1 / b;
            if (a == null || b == null) return a === b;
            if (a instanceof _) a = a._wrapped;
            if (b instanceof _) b = b._wrapped;
            var className = toString.call(a);
            if (className != toString.call(b)) return false;
            switch (className) {
              case "[object String]":
                return a == String(b);

              case "[object Number]":
                return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;

              case "[object Date]":
              case "[object Boolean]":
                return +a == +b;

              case "[object RegExp]":
                return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
            }
            if (typeof a != "object" || typeof b != "object") return false;
            var length = aStack.length;
            while (length--) {
                if (aStack[length] == a) return bStack[length] == b;
            }
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
                return false;
            }
            aStack.push(a);
            bStack.push(b);
            var size = 0, result = true;
            if (className == "[object Array]") {
                size = a.length;
                result = size == b.length;
                if (result) {
                    while (size--) {
                        if (!(result = eq(a[size], b[size], aStack, bStack))) break;
                    }
                }
            } else {
                for (var key in a) {
                    if (_.has(a, key)) {
                        size++;
                        if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
                    }
                }
                if (result) {
                    for (key in b) {
                        if (_.has(b, key) && !size--) break;
                    }
                    result = !size;
                }
            }
            aStack.pop();
            bStack.pop();
            return result;
        };
        _.isEqual = function(a, b) {
            return eq(a, b, [], []);
        };
        _.isEmpty = function(obj) {
            if (obj == null) return true;
            if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
            for (var key in obj) if (_.has(obj, key)) return false;
            return true;
        };
        _.isElement = function(obj) {
            return !!(obj && obj.nodeType === 1);
        };
        _.isArray = nativeIsArray || function(obj) {
            return toString.call(obj) == "[object Array]";
        };
        _.isObject = function(obj) {
            return obj === Object(obj);
        };
        each([ "Arguments", "Function", "String", "Number", "Date", "RegExp" ], function(name) {
            _["is" + name] = function(obj) {
                return toString.call(obj) == "[object " + name + "]";
            };
        });
        if (!_.isArguments(arguments)) {
            _.isArguments = function(obj) {
                return !!(obj && _.has(obj, "callee"));
            };
        }
        if (typeof /./ !== "function") {
            _.isFunction = function(obj) {
                return typeof obj === "function";
            };
        }
        _.isFinite = function(obj) {
            return isFinite(obj) && !isNaN(parseFloat(obj));
        };
        _.isNaN = function(obj) {
            return _.isNumber(obj) && obj != +obj;
        };
        _.isBoolean = function(obj) {
            return obj === true || obj === false || toString.call(obj) == "[object Boolean]";
        };
        _.isNull = function(obj) {
            return obj === null;
        };
        _.isUndefined = function(obj) {
            return obj === void 0;
        };
        _.has = function(obj, key) {
            return hasOwnProperty.call(obj, key);
        };
        _.noConflict = function() {
            root._ = previousUnderscore;
            return this;
        };
        _.identity = function(value) {
            return value;
        };
        _.constant = function(value) {
            return function() {
                return value;
            };
        };
        _.property = function(key) {
            return function(obj) {
                return obj[key];
            };
        };
        _.matches = function(attrs) {
            return function(obj) {
                if (obj === attrs) return true;
                for (var key in attrs) {
                    if (attrs[key] !== obj[key]) return false;
                }
                return true;
            };
        };
        _.times = function(n, iterator, context) {
            var accum = Array(Math.max(0, n));
            for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
            return accum;
        };
        _.random = function(min, max) {
            if (max == null) {
                max = min;
                min = 0;
            }
            return min + Math.floor(Math.random() * (max - min + 1));
        };
        _.now = Date.now || function() {
            return new Date().getTime();
        };
        var entityMap = {
            escape: {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#x27;"
            }
        };
        entityMap.unescape = _.invert(entityMap.escape);
        var entityRegexes = {
            escape: new RegExp("[" + _.keys(entityMap.escape).join("") + "]", "g"),
            unescape: new RegExp("(" + _.keys(entityMap.unescape).join("|") + ")", "g")
        };
        _.each([ "escape", "unescape" ], function(method) {
            _[method] = function(string) {
                if (string == null) return "";
                return ("" + string).replace(entityRegexes[method], function(match) {
                    return entityMap[method][match];
                });
            };
        });
        _.result = function(object, property) {
            if (object == null) return void 0;
            var value = object[property];
            return _.isFunction(value) ? value.call(object) : value;
        };
        _.mixin = function(obj) {
            each(_.functions(obj), function(name) {
                var func = _[name] = obj[name];
                _.prototype[name] = function() {
                    var args = [ this._wrapped ];
                    push.apply(args, arguments);
                    return result.call(this, func.apply(_, args));
                };
            });
        };
        var idCounter = 0;
        _.uniqueId = function(prefix) {
            var id = ++idCounter + "";
            return prefix ? prefix + id : id;
        };
        _.templateSettings = {
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: /<%=([\s\S]+?)%>/g,
            escape: /<%-([\s\S]+?)%>/g
        };
        var noMatch = /(.)^/;
        var escapes = {
            "'": "'",
            "\\": "\\",
            "\r": "r",
            "\n": "n",
            "	": "t",
            "\u2028": "u2028",
            "\u2029": "u2029"
        };
        var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
        _.template = function(text, data, settings) {
            var render;
            settings = _.defaults({}, settings, _.templateSettings);
            var matcher = new RegExp([ (settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source ].join("|") + "|$", "g");
            var index = 0;
            var source = "__p+='";
            text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
                source += text.slice(index, offset).replace(escaper, function(match) {
                    return "\\" + escapes[match];
                });
                if (escape) {
                    source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
                }
                if (interpolate) {
                    source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
                }
                if (evaluate) {
                    source += "';\n" + evaluate + "\n__p+='";
                }
                index = offset + match.length;
                return match;
            });
            source += "';\n";
            if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
            source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
            try {
                render = new Function(settings.variable || "obj", "_", source);
            } catch (e) {
                e.source = source;
                throw e;
            }
            if (data) return render(data, _);
            var template = function(data) {
                return render.call(this, data, _);
            };
            template.source = "function(" + (settings.variable || "obj") + "){\n" + source + "}";
            return template;
        };
        _.chain = function(obj) {
            return _(obj).chain();
        };
        var result = function(obj) {
            return this._chain ? _(obj).chain() : obj;
        };
        _.mixin(_);
        each([ "pop", "push", "reverse", "shift", "sort", "splice", "unshift" ], function(name) {
            var method = ArrayProto[name];
            _.prototype[name] = function() {
                var obj = this._wrapped;
                method.apply(obj, arguments);
                if ((name == "shift" || name == "splice") && obj.length === 0) delete obj[0];
                return result.call(this, obj);
            };
        });
        each([ "concat", "join", "slice" ], function(name) {
            var method = ArrayProto[name];
            _.prototype[name] = function() {
                return result.call(this, method.apply(this._wrapped, arguments));
            };
        });
        _.extend(_.prototype, {
            chain: function() {
                this._chain = true;
                return this;
            },
            value: function() {
                return this._wrapped;
            }
        });
        if (typeof define === "function" && define.amd) {
            define("underscore", [], function() {
                return _;
            });
        }
    }).call(this);
    (function(window, undefined) {
        var readyList, rootjQuery, core_strundefined = typeof undefined, document = window.document, location = window.location, _jQuery = window.jQuery, _$ = window.$, class2type = {}, core_deletedIds = [], core_version = "1.9.1", core_concat = core_deletedIds.concat, core_push = core_deletedIds.push, core_slice = core_deletedIds.slice, core_indexOf = core_deletedIds.indexOf, core_toString = class2type.toString, core_hasOwn = class2type.hasOwnProperty, core_trim = core_version.trim, jQuery = function(selector, context) {
            return new jQuery.fn.init(selector, context, rootjQuery);
        }, core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, core_rnotwhite = /\S+/g, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/, rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, rvalidchars = /^[\],:{}\s]*$/, rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g, rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g, rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function(all, letter) {
            return letter.toUpperCase();
        }, completed = function(event) {
            if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
                detach();
                jQuery.ready();
            }
        }, detach = function() {
            if (document.addEventListener) {
                document.removeEventListener("DOMContentLoaded", completed, false);
                window.removeEventListener("load", completed, false);
            } else {
                document.detachEvent("onreadystatechange", completed);
                window.detachEvent("onload", completed);
            }
        };
        jQuery.fn = jQuery.prototype = {
            jquery: core_version,
            constructor: jQuery,
            init: function(selector, context, rootjQuery) {
                var match, elem;
                if (!selector) {
                    return this;
                }
                if (typeof selector === "string") {
                    if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                        match = [ null, selector, null ];
                    } else {
                        match = rquickExpr.exec(selector);
                    }
                    if (match && (match[1] || !context)) {
                        if (match[1]) {
                            context = context instanceof jQuery ? context[0] : context;
                            jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                                for (match in context) {
                                    if (jQuery.isFunction(this[match])) {
                                        this[match](context[match]);
                                    } else {
                                        this.attr(match, context[match]);
                                    }
                                }
                            }
                            return this;
                        } else {
                            elem = document.getElementById(match[2]);
                            if (elem && elem.parentNode) {
                                if (elem.id !== match[2]) {
                                    return rootjQuery.find(selector);
                                }
                                this.length = 1;
                                this[0] = elem;
                            }
                            this.context = document;
                            this.selector = selector;
                            return this;
                        }
                    } else if (!context || context.jquery) {
                        return (context || rootjQuery).find(selector);
                    } else {
                        return this.constructor(context).find(selector);
                    }
                } else if (selector.nodeType) {
                    this.context = this[0] = selector;
                    this.length = 1;
                    return this;
                } else if (jQuery.isFunction(selector)) {
                    return rootjQuery.ready(selector);
                }
                if (selector.selector !== undefined) {
                    this.selector = selector.selector;
                    this.context = selector.context;
                }
                return jQuery.makeArray(selector, this);
            },
            selector: "",
            length: 0,
            size: function() {
                return this.length;
            },
            toArray: function() {
                return core_slice.call(this);
            },
            get: function(num) {
                return num == null ? this.toArray() : num < 0 ? this[this.length + num] : this[num];
            },
            pushStack: function(elems) {
                var ret = jQuery.merge(this.constructor(), elems);
                ret.prevObject = this;
                ret.context = this.context;
                return ret;
            },
            each: function(callback, args) {
                return jQuery.each(this, callback, args);
            },
            ready: function(fn) {
                jQuery.ready.promise().done(fn);
                return this;
            },
            slice: function() {
                return this.pushStack(core_slice.apply(this, arguments));
            },
            first: function() {
                return this.eq(0);
            },
            last: function() {
                return this.eq(-1);
            },
            eq: function(i) {
                var len = this.length, j = +i + (i < 0 ? len : 0);
                return this.pushStack(j >= 0 && j < len ? [ this[j] ] : []);
            },
            map: function(callback) {
                return this.pushStack(jQuery.map(this, function(elem, i) {
                    return callback.call(elem, i, elem);
                }));
            },
            end: function() {
                return this.prevObject || this.constructor(null);
            },
            push: core_push,
            sort: [].sort,
            splice: [].splice
        };
        jQuery.fn.init.prototype = jQuery.fn;
        jQuery.extend = jQuery.fn.extend = function() {
            var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                i = 2;
            }
            if (typeof target !== "object" && !jQuery.isFunction(target)) {
                target = {};
            }
            if (length === i) {
                target = this;
                --i;
            }
            for (;i < length; i++) {
                if ((options = arguments[i]) != null) {
                    for (name in options) {
                        src = target[name];
                        copy = options[name];
                        if (target === copy) {
                            continue;
                        }
                        if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                            if (copyIsArray) {
                                copyIsArray = false;
                                clone = src && jQuery.isArray(src) ? src : [];
                            } else {
                                clone = src && jQuery.isPlainObject(src) ? src : {};
                            }
                            target[name] = jQuery.extend(deep, clone, copy);
                        } else if (copy !== undefined) {
                            target[name] = copy;
                        }
                    }
                }
            }
            return target;
        };
        jQuery.extend({
            noConflict: function(deep) {
                if (window.$ === jQuery) {
                    window.$ = _$;
                }
                if (deep && window.jQuery === jQuery) {
                    window.jQuery = _jQuery;
                }
                return jQuery;
            },
            isReady: false,
            readyWait: 1,
            holdReady: function(hold) {
                if (hold) {
                    jQuery.readyWait++;
                } else {
                    jQuery.ready(true);
                }
            },
            ready: function(wait) {
                if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                    return;
                }
                if (!document.body) {
                    return setTimeout(jQuery.ready);
                }
                jQuery.isReady = true;
                if (wait !== true && --jQuery.readyWait > 0) {
                    return;
                }
                readyList.resolveWith(document, [ jQuery ]);
                if (jQuery.fn.trigger) {
                    jQuery(document).trigger("ready").off("ready");
                }
            },
            isFunction: function(obj) {
                return jQuery.type(obj) === "function";
            },
            isArray: Array.isArray || function(obj) {
                return jQuery.type(obj) === "array";
            },
            isWindow: function(obj) {
                return obj != null && obj == obj.window;
            },
            isNumeric: function(obj) {
                return !isNaN(parseFloat(obj)) && isFinite(obj);
            },
            type: function(obj) {
                if (obj == null) {
                    return String(obj);
                }
                return typeof obj === "object" || typeof obj === "function" ? class2type[core_toString.call(obj)] || "object" : typeof obj;
            },
            isPlainObject: function(obj) {
                if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                    return false;
                }
                try {
                    if (obj.constructor && !core_hasOwn.call(obj, "constructor") && !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                        return false;
                    }
                } catch (e) {
                    return false;
                }
                var key;
                for (key in obj) {}
                return key === undefined || core_hasOwn.call(obj, key);
            },
            isEmptyObject: function(obj) {
                var name;
                for (name in obj) {
                    return false;
                }
                return true;
            },
            error: function(msg) {
                throw new Error(msg);
            },
            parseHTML: function(data, context, keepScripts) {
                if (!data || typeof data !== "string") {
                    return null;
                }
                if (typeof context === "boolean") {
                    keepScripts = context;
                    context = false;
                }
                context = context || document;
                var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
                if (parsed) {
                    return [ context.createElement(parsed[1]) ];
                }
                parsed = jQuery.buildFragment([ data ], context, scripts);
                if (scripts) {
                    jQuery(scripts).remove();
                }
                return jQuery.merge([], parsed.childNodes);
            },
            parseJSON: function(data) {
                if (window.JSON && window.JSON.parse) {
                    return window.JSON.parse(data);
                }
                if (data === null) {
                    return data;
                }
                if (typeof data === "string") {
                    data = jQuery.trim(data);
                    if (data) {
                        if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
                            return new Function("return " + data)();
                        }
                    }
                }
                jQuery.error("Invalid JSON: " + data);
            },
            parseXML: function(data) {
                var xml, tmp;
                if (!data || typeof data !== "string") {
                    return null;
                }
                try {
                    if (window.DOMParser) {
                        tmp = new DOMParser();
                        xml = tmp.parseFromString(data, "text/xml");
                    } else {
                        xml = new ActiveXObject("Microsoft.XMLDOM");
                        xml.async = "false";
                        xml.loadXML(data);
                    }
                } catch (e) {
                    xml = undefined;
                }
                if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
                    jQuery.error("Invalid XML: " + data);
                }
                return xml;
            },
            noop: function() {},
            globalEval: function(data) {
                if (data && jQuery.trim(data)) {
                    (window.execScript || function(data) {
                        window["eval"].call(window, data);
                    })(data);
                }
            },
            camelCase: function(string) {
                return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
            },
            nodeName: function(elem, name) {
                return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
            },
            each: function(obj, callback, args) {
                var value, i = 0, length = obj.length, isArray = isArraylike(obj);
                if (args) {
                    if (isArray) {
                        for (;i < length; i++) {
                            value = callback.apply(obj[i], args);
                            if (value === false) {
                                break;
                            }
                        }
                    } else {
                        for (i in obj) {
                            value = callback.apply(obj[i], args);
                            if (value === false) {
                                break;
                            }
                        }
                    }
                } else {
                    if (isArray) {
                        for (;i < length; i++) {
                            value = callback.call(obj[i], i, obj[i]);
                            if (value === false) {
                                break;
                            }
                        }
                    } else {
                        for (i in obj) {
                            value = callback.call(obj[i], i, obj[i]);
                            if (value === false) {
                                break;
                            }
                        }
                    }
                }
                return obj;
            },
            trim: core_trim && !core_trim.call("﻿ ") ? function(text) {
                return text == null ? "" : core_trim.call(text);
            } : function(text) {
                return text == null ? "" : (text + "").replace(rtrim, "");
            },
            makeArray: function(arr, results) {
                var ret = results || [];
                if (arr != null) {
                    if (isArraylike(Object(arr))) {
                        jQuery.merge(ret, typeof arr === "string" ? [ arr ] : arr);
                    } else {
                        core_push.call(ret, arr);
                    }
                }
                return ret;
            },
            inArray: function(elem, arr, i) {
                var len;
                if (arr) {
                    if (core_indexOf) {
                        return core_indexOf.call(arr, elem, i);
                    }
                    len = arr.length;
                    i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                    for (;i < len; i++) {
                        if (i in arr && arr[i] === elem) {
                            return i;
                        }
                    }
                }
                return -1;
            },
            merge: function(first, second) {
                var l = second.length, i = first.length, j = 0;
                if (typeof l === "number") {
                    for (;j < l; j++) {
                        first[i++] = second[j];
                    }
                } else {
                    while (second[j] !== undefined) {
                        first[i++] = second[j++];
                    }
                }
                first.length = i;
                return first;
            },
            grep: function(elems, callback, inv) {
                var retVal, ret = [], i = 0, length = elems.length;
                inv = !!inv;
                for (;i < length; i++) {
                    retVal = !!callback(elems[i], i);
                    if (inv !== retVal) {
                        ret.push(elems[i]);
                    }
                }
                return ret;
            },
            map: function(elems, callback, arg) {
                var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
                if (isArray) {
                    for (;i < length; i++) {
                        value = callback(elems[i], i, arg);
                        if (value != null) {
                            ret[ret.length] = value;
                        }
                    }
                } else {
                    for (i in elems) {
                        value = callback(elems[i], i, arg);
                        if (value != null) {
                            ret[ret.length] = value;
                        }
                    }
                }
                return core_concat.apply([], ret);
            },
            guid: 1,
            proxy: function(fn, context) {
                var args, proxy, tmp;
                if (typeof context === "string") {
                    tmp = fn[context];
                    context = fn;
                    fn = tmp;
                }
                if (!jQuery.isFunction(fn)) {
                    return undefined;
                }
                args = core_slice.call(arguments, 2);
                proxy = function() {
                    return fn.apply(context || this, args.concat(core_slice.call(arguments)));
                };
                proxy.guid = fn.guid = fn.guid || jQuery.guid++;
                return proxy;
            },
            access: function(elems, fn, key, value, chainable, emptyGet, raw) {
                var i = 0, length = elems.length, bulk = key == null;
                if (jQuery.type(key) === "object") {
                    chainable = true;
                    for (i in key) {
                        jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
                    }
                } else if (value !== undefined) {
                    chainable = true;
                    if (!jQuery.isFunction(value)) {
                        raw = true;
                    }
                    if (bulk) {
                        if (raw) {
                            fn.call(elems, value);
                            fn = null;
                        } else {
                            bulk = fn;
                            fn = function(elem, key, value) {
                                return bulk.call(jQuery(elem), value);
                            };
                        }
                    }
                    if (fn) {
                        for (;i < length; i++) {
                            fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                        }
                    }
                }
                return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
            },
            now: function() {
                return new Date().getTime();
            }
        });
        jQuery.ready.promise = function(obj) {
            if (!readyList) {
                readyList = jQuery.Deferred();
                if (document.readyState === "complete") {
                    setTimeout(jQuery.ready);
                } else if (document.addEventListener) {
                    document.addEventListener("DOMContentLoaded", completed, false);
                    window.addEventListener("load", completed, false);
                } else {
                    document.attachEvent("onreadystatechange", completed);
                    window.attachEvent("onload", completed);
                    var top = false;
                    try {
                        top = window.frameElement == null && document.documentElement;
                    } catch (e) {}
                    if (top && top.doScroll) {
                        (function doScrollCheck() {
                            if (!jQuery.isReady) {
                                try {
                                    top.doScroll("left");
                                } catch (e) {
                                    return setTimeout(doScrollCheck, 50);
                                }
                                detach();
                                jQuery.ready();
                            }
                        })();
                    }
                }
            }
            return readyList.promise(obj);
        };
        jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
        });
        function isArraylike(obj) {
            var length = obj.length, type = jQuery.type(obj);
            if (jQuery.isWindow(obj)) {
                return false;
            }
            if (obj.nodeType === 1 && length) {
                return true;
            }
            return type === "array" || type !== "function" && (length === 0 || typeof length === "number" && length > 0 && length - 1 in obj);
        }
        rootjQuery = jQuery(document);
        var optionsCache = {};
        function createOptions(options) {
            var object = optionsCache[options] = {};
            jQuery.each(options.match(core_rnotwhite) || [], function(_, flag) {
                object[flag] = true;
            });
            return object;
        }
        jQuery.Callbacks = function(options) {
            options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
            var firing, memory, fired, firingLength, firingIndex, firingStart, list = [], stack = !options.once && [], fire = function(data) {
                memory = options.memory && data;
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                firing = true;
                for (;list && firingIndex < firingLength; firingIndex++) {
                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                        memory = false;
                        break;
                    }
                }
                firing = false;
                if (list) {
                    if (stack) {
                        if (stack.length) {
                            fire(stack.shift());
                        }
                    } else if (memory) {
                        list = [];
                    } else {
                        self.disable();
                    }
                }
            }, self = {
                add: function() {
                    if (list) {
                        var start = list.length;
                        (function add(args) {
                            jQuery.each(args, function(_, arg) {
                                var type = jQuery.type(arg);
                                if (type === "function") {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && type !== "string") {
                                    add(arg);
                                }
                            });
                        })(arguments);
                        if (firing) {
                            firingLength = list.length;
                        } else if (memory) {
                            firingStart = start;
                            fire(memory);
                        }
                    }
                    return this;
                },
                remove: function() {
                    if (list) {
                        jQuery.each(arguments, function(_, arg) {
                            var index;
                            while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                list.splice(index, 1);
                                if (firing) {
                                    if (index <= firingLength) {
                                        firingLength--;
                                    }
                                    if (index <= firingIndex) {
                                        firingIndex--;
                                    }
                                }
                            }
                        });
                    }
                    return this;
                },
                has: function(fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
                },
                empty: function() {
                    list = [];
                    return this;
                },
                disable: function() {
                    list = stack = memory = undefined;
                    return this;
                },
                disabled: function() {
                    return !list;
                },
                lock: function() {
                    stack = undefined;
                    if (!memory) {
                        self.disable();
                    }
                    return this;
                },
                locked: function() {
                    return !stack;
                },
                fireWith: function(context, args) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if (list && (!fired || stack)) {
                        if (firing) {
                            stack.push(args);
                        } else {
                            fire(args);
                        }
                    }
                    return this;
                },
                fire: function() {
                    self.fireWith(this, arguments);
                    return this;
                },
                fired: function() {
                    return !!fired;
                }
            };
            return self;
        };
        jQuery.extend({
            Deferred: function(func) {
                var tuples = [ [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ], [ "notify", "progress", jQuery.Callbacks("memory") ] ], state = "pending", promise = {
                    state: function() {
                        return state;
                    },
                    always: function() {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    then: function() {
                        var fns = arguments;
                        return jQuery.Deferred(function(newDefer) {
                            jQuery.each(tuples, function(i, tuple) {
                                var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];
                                deferred[tuple[1]](function() {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && jQuery.isFunction(returned.promise)) {
                                        returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                                    } else {
                                        newDefer[action + "With"](this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments);
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    promise: function(obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                }, deferred = {};
                promise.pipe = promise.then;
                jQuery.each(tuples, function(i, tuple) {
                    var list = tuple[2], stateString = tuple[3];
                    promise[tuple[1]] = list.add;
                    if (stateString) {
                        list.add(function() {
                            state = stateString;
                        }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                    }
                    deferred[tuple[0]] = function() {
                        deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                        return this;
                    };
                    deferred[tuple[0] + "With"] = list.fireWith;
                });
                promise.promise(deferred);
                if (func) {
                    func.call(deferred, deferred);
                }
                return deferred;
            },
            when: function(subordinate) {
                var i = 0, resolveValues = core_slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function(i, contexts, values) {
                    return function(value) {
                        contexts[i] = this;
                        values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                        if (values === progressValues) {
                            deferred.notifyWith(contexts, values);
                        } else if (!--remaining) {
                            deferred.resolveWith(contexts, values);
                        }
                    };
                }, progressValues, progressContexts, resolveContexts;
                if (length > 1) {
                    progressValues = new Array(length);
                    progressContexts = new Array(length);
                    resolveContexts = new Array(length);
                    for (;i < length; i++) {
                        if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                        } else {
                            --remaining;
                        }
                    }
                }
                if (!remaining) {
                    deferred.resolveWith(resolveContexts, resolveValues);
                }
                return deferred.promise();
            }
        });
        jQuery.support = function() {
            var support, all, a, input, select, fragment, opt, eventName, isSupported, i, div = document.createElement("div");
            div.setAttribute("className", "t");
            div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
            all = div.getElementsByTagName("*");
            a = div.getElementsByTagName("a")[0];
            if (!all || !a || !all.length) {
                return {};
            }
            select = document.createElement("select");
            opt = select.appendChild(document.createElement("option"));
            input = div.getElementsByTagName("input")[0];
            a.style.cssText = "top:1px;float:left;opacity:.5";
            support = {
                getSetAttribute: div.className !== "t",
                leadingWhitespace: div.firstChild.nodeType === 3,
                tbody: !div.getElementsByTagName("tbody").length,
                htmlSerialize: !!div.getElementsByTagName("link").length,
                style: /top/.test(a.getAttribute("style")),
                hrefNormalized: a.getAttribute("href") === "/a",
                opacity: /^0.5/.test(a.style.opacity),
                cssFloat: !!a.style.cssFloat,
                checkOn: !!input.value,
                optSelected: opt.selected,
                enctype: !!document.createElement("form").enctype,
                html5Clone: document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>",
                boxModel: document.compatMode === "CSS1Compat",
                deleteExpando: true,
                noCloneEvent: true,
                inlineBlockNeedsLayout: false,
                shrinkWrapBlocks: false,
                reliableMarginRight: true,
                boxSizingReliable: true,
                pixelPosition: false
            };
            input.checked = true;
            support.noCloneChecked = input.cloneNode(true).checked;
            select.disabled = true;
            support.optDisabled = !opt.disabled;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = false;
            }
            input = document.createElement("input");
            input.setAttribute("value", "");
            support.input = input.getAttribute("value") === "";
            input.value = "t";
            input.setAttribute("type", "radio");
            support.radioValue = input.value === "t";
            input.setAttribute("checked", "t");
            input.setAttribute("name", "t");
            fragment = document.createDocumentFragment();
            fragment.appendChild(input);
            support.appendChecked = input.checked;
            support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
            if (div.attachEvent) {
                div.attachEvent("onclick", function() {
                    support.noCloneEvent = false;
                });
                div.cloneNode(true).click();
            }
            for (i in {
                submit: true,
                change: true,
                focusin: true
            }) {
                div.setAttribute(eventName = "on" + i, "t");
                support[i + "Bubbles"] = eventName in window || div.attributes[eventName].expando === false;
            }
            div.style.backgroundClip = "content-box";
            div.cloneNode(true).style.backgroundClip = "";
            support.clearCloneStyle = div.style.backgroundClip === "content-box";
            jQuery(function() {
                var container, marginDiv, tds, divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;", body = document.getElementsByTagName("body")[0];
                if (!body) {
                    return;
                }
                container = document.createElement("div");
                container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";
                body.appendChild(container).appendChild(div);
                div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
                tds = div.getElementsByTagName("td");
                tds[0].style.cssText = "padding:0;margin:0;border:0;display:none";
                isSupported = tds[0].offsetHeight === 0;
                tds[0].style.display = "";
                tds[1].style.display = "none";
                support.reliableHiddenOffsets = isSupported && tds[0].offsetHeight === 0;
                div.innerHTML = "";
                div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
                support.boxSizing = div.offsetWidth === 4;
                support.doesNotIncludeMarginInBodyOffset = body.offsetTop !== 1;
                if (window.getComputedStyle) {
                    support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== "1%";
                    support.boxSizingReliable = (window.getComputedStyle(div, null) || {
                        width: "4px"
                    }).width === "4px";
                    marginDiv = div.appendChild(document.createElement("div"));
                    marginDiv.style.cssText = div.style.cssText = divReset;
                    marginDiv.style.marginRight = marginDiv.style.width = "0";
                    div.style.width = "1px";
                    support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
                }
                if (typeof div.style.zoom !== core_strundefined) {
                    div.innerHTML = "";
                    div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
                    support.inlineBlockNeedsLayout = div.offsetWidth === 3;
                    div.style.display = "block";
                    div.innerHTML = "<div></div>";
                    div.firstChild.style.width = "5px";
                    support.shrinkWrapBlocks = div.offsetWidth !== 3;
                    if (support.inlineBlockNeedsLayout) {
                        body.style.zoom = 1;
                    }
                }
                body.removeChild(container);
                container = div = tds = marginDiv = null;
            });
            all = select = fragment = opt = a = input = null;
            return support;
        }();
        var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, rmultiDash = /([A-Z])/g;
        function internalData(elem, name, data, pvt) {
            if (!jQuery.acceptData(elem)) {
                return;
            }
            var thisCache, ret, internalKey = jQuery.expando, getByName = typeof name === "string", isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
            if ((!id || !cache[id] || !pvt && !cache[id].data) && getByName && data === undefined) {
                return;
            }
            if (!id) {
                if (isNode) {
                    elem[internalKey] = id = core_deletedIds.pop() || jQuery.guid++;
                } else {
                    id = internalKey;
                }
            }
            if (!cache[id]) {
                cache[id] = {};
                if (!isNode) {
                    cache[id].toJSON = jQuery.noop;
                }
            }
            if (typeof name === "object" || typeof name === "function") {
                if (pvt) {
                    cache[id] = jQuery.extend(cache[id], name);
                } else {
                    cache[id].data = jQuery.extend(cache[id].data, name);
                }
            }
            thisCache = cache[id];
            if (!pvt) {
                if (!thisCache.data) {
                    thisCache.data = {};
                }
                thisCache = thisCache.data;
            }
            if (data !== undefined) {
                thisCache[jQuery.camelCase(name)] = data;
            }
            if (getByName) {
                ret = thisCache[name];
                if (ret == null) {
                    ret = thisCache[jQuery.camelCase(name)];
                }
            } else {
                ret = thisCache;
            }
            return ret;
        }
        function internalRemoveData(elem, name, pvt) {
            if (!jQuery.acceptData(elem)) {
                return;
            }
            var i, l, thisCache, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
            if (!cache[id]) {
                return;
            }
            if (name) {
                thisCache = pvt ? cache[id] : cache[id].data;
                if (thisCache) {
                    if (!jQuery.isArray(name)) {
                        if (name in thisCache) {
                            name = [ name ];
                        } else {
                            name = jQuery.camelCase(name);
                            if (name in thisCache) {
                                name = [ name ];
                            } else {
                                name = name.split(" ");
                            }
                        }
                    } else {
                        name = name.concat(jQuery.map(name, jQuery.camelCase));
                    }
                    for (i = 0, l = name.length; i < l; i++) {
                        delete thisCache[name[i]];
                    }
                    if (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {
                        return;
                    }
                }
            }
            if (!pvt) {
                delete cache[id].data;
                if (!isEmptyDataObject(cache[id])) {
                    return;
                }
            }
            if (isNode) {
                jQuery.cleanData([ elem ], true);
            } else if (jQuery.support.deleteExpando || cache != cache.window) {
                delete cache[id];
            } else {
                cache[id] = null;
            }
        }
        jQuery.extend({
            cache: {},
            expando: "jQuery" + (core_version + Math.random()).replace(/\D/g, ""),
            noData: {
                embed: true,
                object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
                applet: true
            },
            hasData: function(elem) {
                elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
                return !!elem && !isEmptyDataObject(elem);
            },
            data: function(elem, name, data) {
                return internalData(elem, name, data);
            },
            removeData: function(elem, name) {
                return internalRemoveData(elem, name);
            },
            _data: function(elem, name, data) {
                return internalData(elem, name, data, true);
            },
            _removeData: function(elem, name) {
                return internalRemoveData(elem, name, true);
            },
            acceptData: function(elem) {
                if (elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9) {
                    return false;
                }
                var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];
                return !noData || noData !== true && elem.getAttribute("classid") === noData;
            }
        });
        jQuery.fn.extend({
            data: function(key, value) {
                var attrs, name, elem = this[0], i = 0, data = null;
                if (key === undefined) {
                    if (this.length) {
                        data = jQuery.data(elem);
                        if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
                            attrs = elem.attributes;
                            for (;i < attrs.length; i++) {
                                name = attrs[i].name;
                                if (!name.indexOf("data-")) {
                                    name = jQuery.camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                            jQuery._data(elem, "parsedAttrs", true);
                        }
                    }
                    return data;
                }
                if (typeof key === "object") {
                    return this.each(function() {
                        jQuery.data(this, key);
                    });
                }
                return jQuery.access(this, function(value) {
                    if (value === undefined) {
                        return elem ? dataAttr(elem, key, jQuery.data(elem, key)) : null;
                    }
                    this.each(function() {
                        jQuery.data(this, key, value);
                    });
                }, null, value, arguments.length > 1, null, true);
            },
            removeData: function(key) {
                return this.each(function() {
                    jQuery.removeData(this, key);
                });
            }
        });
        function dataAttr(elem, key, data) {
            if (data === undefined && elem.nodeType === 1) {
                var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
                data = elem.getAttribute(name);
                if (typeof data === "string") {
                    try {
                        data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                    } catch (e) {}
                    jQuery.data(elem, key, data);
                } else {
                    data = undefined;
                }
            }
            return data;
        }
        function isEmptyDataObject(obj) {
            var name;
            for (name in obj) {
                if (name === "data" && jQuery.isEmptyObject(obj[name])) {
                    continue;
                }
                if (name !== "toJSON") {
                    return false;
                }
            }
            return true;
        }
        jQuery.extend({
            queue: function(elem, type, data) {
                var queue;
                if (elem) {
                    type = (type || "fx") + "queue";
                    queue = jQuery._data(elem, type);
                    if (data) {
                        if (!queue || jQuery.isArray(data)) {
                            queue = jQuery._data(elem, type, jQuery.makeArray(data));
                        } else {
                            queue.push(data);
                        }
                    }
                    return queue || [];
                }
            },
            dequeue: function(elem, type) {
                type = type || "fx";
                var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                    jQuery.dequeue(elem, type);
                };
                if (fn === "inprogress") {
                    fn = queue.shift();
                    startLength--;
                }
                hooks.cur = fn;
                if (fn) {
                    if (type === "fx") {
                        queue.unshift("inprogress");
                    }
                    delete hooks.stop;
                    fn.call(elem, next, hooks);
                }
                if (!startLength && hooks) {
                    hooks.empty.fire();
                }
            },
            _queueHooks: function(elem, type) {
                var key = type + "queueHooks";
                return jQuery._data(elem, key) || jQuery._data(elem, key, {
                    empty: jQuery.Callbacks("once memory").add(function() {
                        jQuery._removeData(elem, type + "queue");
                        jQuery._removeData(elem, key);
                    })
                });
            }
        });
        jQuery.fn.extend({
            queue: function(type, data) {
                var setter = 2;
                if (typeof type !== "string") {
                    data = type;
                    type = "fx";
                    setter--;
                }
                if (arguments.length < setter) {
                    return jQuery.queue(this[0], type);
                }
                return data === undefined ? this : this.each(function() {
                    var queue = jQuery.queue(this, type, data);
                    jQuery._queueHooks(this, type);
                    if (type === "fx" && queue[0] !== "inprogress") {
                        jQuery.dequeue(this, type);
                    }
                });
            },
            dequeue: function(type) {
                return this.each(function() {
                    jQuery.dequeue(this, type);
                });
            },
            delay: function(time, type) {
                time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
                type = type || "fx";
                return this.queue(type, function(next, hooks) {
                    var timeout = setTimeout(next, time);
                    hooks.stop = function() {
                        clearTimeout(timeout);
                    };
                });
            },
            clearQueue: function(type) {
                return this.queue(type || "fx", []);
            },
            promise: function(type, obj) {
                var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                    if (!--count) {
                        defer.resolveWith(elements, [ elements ]);
                    }
                };
                if (typeof type !== "string") {
                    obj = type;
                    type = undefined;
                }
                type = type || "fx";
                while (i--) {
                    tmp = jQuery._data(elements[i], type + "queueHooks");
                    if (tmp && tmp.empty) {
                        count++;
                        tmp.empty.add(resolve);
                    }
                }
                resolve();
                return defer.promise(obj);
            }
        });
        var nodeHook, boolHook, rclass = /[\t\r\n]/g, rreturn = /\r/g, rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i, rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = jQuery.support.getSetAttribute, getSetInput = jQuery.support.input;
        jQuery.fn.extend({
            attr: function(name, value) {
                return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
            },
            removeAttr: function(name) {
                return this.each(function() {
                    jQuery.removeAttr(this, name);
                });
            },
            prop: function(name, value) {
                return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
            },
            removeProp: function(name) {
                name = jQuery.propFix[name] || name;
                return this.each(function() {
                    try {
                        this[name] = undefined;
                        delete this[name];
                    } catch (e) {}
                });
            },
            addClass: function(value) {
                var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = typeof value === "string" && value;
                if (jQuery.isFunction(value)) {
                    return this.each(function(j) {
                        jQuery(this).addClass(value.call(this, j, this.className));
                    });
                }
                if (proceed) {
                    classes = (value || "").match(core_rnotwhite) || [];
                    for (;i < len; i++) {
                        elem = this[i];
                        cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                        if (cur) {
                            j = 0;
                            while (clazz = classes[j++]) {
                                if (cur.indexOf(" " + clazz + " ") < 0) {
                                    cur += clazz + " ";
                                }
                            }
                            elem.className = jQuery.trim(cur);
                        }
                    }
                }
                return this;
            },
            removeClass: function(value) {
                var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = arguments.length === 0 || typeof value === "string" && value;
                if (jQuery.isFunction(value)) {
                    return this.each(function(j) {
                        jQuery(this).removeClass(value.call(this, j, this.className));
                    });
                }
                if (proceed) {
                    classes = (value || "").match(core_rnotwhite) || [];
                    for (;i < len; i++) {
                        elem = this[i];
                        cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                        if (cur) {
                            j = 0;
                            while (clazz = classes[j++]) {
                                while (cur.indexOf(" " + clazz + " ") >= 0) {
                                    cur = cur.replace(" " + clazz + " ", " ");
                                }
                            }
                            elem.className = value ? jQuery.trim(cur) : "";
                        }
                    }
                }
                return this;
            },
            toggleClass: function(value, stateVal) {
                var type = typeof value, isBool = typeof stateVal === "boolean";
                if (jQuery.isFunction(value)) {
                    return this.each(function(i) {
                        jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                    });
                }
                return this.each(function() {
                    if (type === "string") {
                        var className, i = 0, self = jQuery(this), state = stateVal, classNames = value.match(core_rnotwhite) || [];
                        while (className = classNames[i++]) {
                            state = isBool ? state : !self.hasClass(className);
                            self[state ? "addClass" : "removeClass"](className);
                        }
                    } else if (type === core_strundefined || type === "boolean") {
                        if (this.className) {
                            jQuery._data(this, "__className__", this.className);
                        }
                        this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
                    }
                });
            },
            hasClass: function(selector) {
                var className = " " + selector + " ", i = 0, l = this.length;
                for (;i < l; i++) {
                    if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                        return true;
                    }
                }
                return false;
            },
            val: function(value) {
                var ret, hooks, isFunction, elem = this[0];
                if (!arguments.length) {
                    if (elem) {
                        hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                        if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                            return ret;
                        }
                        ret = elem.value;
                        return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
                    }
                    return;
                }
                isFunction = jQuery.isFunction(value);
                return this.each(function(i) {
                    var val, self = jQuery(this);
                    if (this.nodeType !== 1) {
                        return;
                    }
                    if (isFunction) {
                        val = value.call(this, i, self.val());
                    } else {
                        val = value;
                    }
                    if (val == null) {
                        val = "";
                    } else if (typeof val === "number") {
                        val += "";
                    } else if (jQuery.isArray(val)) {
                        val = jQuery.map(val, function(value) {
                            return value == null ? "" : value + "";
                        });
                    }
                    hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                    if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                        this.value = val;
                    }
                });
            }
        });
        jQuery.extend({
            valHooks: {
                option: {
                    get: function(elem) {
                        var val = elem.attributes.value;
                        return !val || val.specified ? elem.value : elem.text;
                    }
                },
                select: {
                    get: function(elem) {
                        var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one" || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                        for (;i < max; i++) {
                            option = options[i];
                            if ((option.selected || i === index) && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                                value = jQuery(option).val();
                                if (one) {
                                    return value;
                                }
                                values.push(value);
                            }
                        }
                        return values;
                    },
                    set: function(elem, value) {
                        var values = jQuery.makeArray(value);
                        jQuery(elem).find("option").each(function() {
                            this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
                        });
                        if (!values.length) {
                            elem.selectedIndex = -1;
                        }
                        return values;
                    }
                }
            },
            attr: function(elem, name, value) {
                var hooks, notxml, ret, nType = elem.nodeType;
                if (!elem || nType === 3 || nType === 8 || nType === 2) {
                    return;
                }
                if (typeof elem.getAttribute === core_strundefined) {
                    return jQuery.prop(elem, name, value);
                }
                notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
                if (notxml) {
                    name = name.toLowerCase();
                    hooks = jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);
                }
                if (value !== undefined) {
                    if (value === null) {
                        jQuery.removeAttr(elem, name);
                    } else if (hooks && notxml && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                        return ret;
                    } else {
                        elem.setAttribute(name, value + "");
                        return value;
                    }
                } else if (hooks && notxml && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                    return ret;
                } else {
                    if (typeof elem.getAttribute !== core_strundefined) {
                        ret = elem.getAttribute(name);
                    }
                    return ret == null ? undefined : ret;
                }
            },
            removeAttr: function(elem, value) {
                var name, propName, i = 0, attrNames = value && value.match(core_rnotwhite);
                if (attrNames && elem.nodeType === 1) {
                    while (name = attrNames[i++]) {
                        propName = jQuery.propFix[name] || name;
                        if (rboolean.test(name)) {
                            if (!getSetAttribute && ruseDefault.test(name)) {
                                elem[jQuery.camelCase("default-" + name)] = elem[propName] = false;
                            } else {
                                elem[propName] = false;
                            }
                        } else {
                            jQuery.attr(elem, name, "");
                        }
                        elem.removeAttribute(getSetAttribute ? name : propName);
                    }
                }
            },
            attrHooks: {
                type: {
                    set: function(elem, value) {
                        if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                            var val = elem.value;
                            elem.setAttribute("type", value);
                            if (val) {
                                elem.value = val;
                            }
                            return value;
                        }
                    }
                }
            },
            propFix: {
                tabindex: "tabIndex",
                readonly: "readOnly",
                "for": "htmlFor",
                "class": "className",
                maxlength: "maxLength",
                cellspacing: "cellSpacing",
                cellpadding: "cellPadding",
                rowspan: "rowSpan",
                colspan: "colSpan",
                usemap: "useMap",
                frameborder: "frameBorder",
                contenteditable: "contentEditable"
            },
            prop: function(elem, name, value) {
                var ret, hooks, notxml, nType = elem.nodeType;
                if (!elem || nType === 3 || nType === 8 || nType === 2) {
                    return;
                }
                notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
                if (notxml) {
                    name = jQuery.propFix[name] || name;
                    hooks = jQuery.propHooks[name];
                }
                if (value !== undefined) {
                    if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                        return ret;
                    } else {
                        return elem[name] = value;
                    }
                } else {
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                        return ret;
                    } else {
                        return elem[name];
                    }
                }
            },
            propHooks: {
                tabIndex: {
                    get: function(elem) {
                        var attributeNode = elem.getAttributeNode("tabindex");
                        return attributeNode && attributeNode.specified ? parseInt(attributeNode.value, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined;
                    }
                }
            }
        });
        boolHook = {
            get: function(elem, name) {
                var prop = jQuery.prop(elem, name), attr = typeof prop === "boolean" && elem.getAttribute(name), detail = typeof prop === "boolean" ? getSetInput && getSetAttribute ? attr != null : ruseDefault.test(name) ? elem[jQuery.camelCase("default-" + name)] : !!attr : elem.getAttributeNode(name);
                return detail && detail.value !== false ? name.toLowerCase() : undefined;
            },
            set: function(elem, value, name) {
                if (value === false) {
                    jQuery.removeAttr(elem, name);
                } else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                    elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);
                } else {
                    elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
                }
                return name;
            }
        };
        if (!getSetInput || !getSetAttribute) {
            jQuery.attrHooks.value = {
                get: function(elem, name) {
                    var ret = elem.getAttributeNode(name);
                    return jQuery.nodeName(elem, "input") ? elem.defaultValue : ret && ret.specified ? ret.value : undefined;
                },
                set: function(elem, value, name) {
                    if (jQuery.nodeName(elem, "input")) {
                        elem.defaultValue = value;
                    } else {
                        return nodeHook && nodeHook.set(elem, value, name);
                    }
                }
            };
        }
        if (!getSetAttribute) {
            nodeHook = jQuery.valHooks.button = {
                get: function(elem, name) {
                    var ret = elem.getAttributeNode(name);
                    return ret && (name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified) ? ret.value : undefined;
                },
                set: function(elem, value, name) {
                    var ret = elem.getAttributeNode(name);
                    if (!ret) {
                        elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
                    }
                    ret.value = value += "";
                    return name === "value" || value === elem.getAttribute(name) ? value : undefined;
                }
            };
            jQuery.attrHooks.contenteditable = {
                get: nodeHook.get,
                set: function(elem, value, name) {
                    nodeHook.set(elem, value === "" ? false : value, name);
                }
            };
            jQuery.each([ "width", "height" ], function(i, name) {
                jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
                    set: function(elem, value) {
                        if (value === "") {
                            elem.setAttribute(name, "auto");
                            return value;
                        }
                    }
                });
            });
        }
        if (!jQuery.support.hrefNormalized) {
            jQuery.each([ "href", "src", "width", "height" ], function(i, name) {
                jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
                    get: function(elem) {
                        var ret = elem.getAttribute(name, 2);
                        return ret == null ? undefined : ret;
                    }
                });
            });
            jQuery.each([ "href", "src" ], function(i, name) {
                jQuery.propHooks[name] = {
                    get: function(elem) {
                        return elem.getAttribute(name, 4);
                    }
                };
            });
        }
        if (!jQuery.support.style) {
            jQuery.attrHooks.style = {
                get: function(elem) {
                    return elem.style.cssText || undefined;
                },
                set: function(elem, value) {
                    return elem.style.cssText = value + "";
                }
            };
        }
        if (!jQuery.support.optSelected) {
            jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {
                get: function(elem) {
                    var parent = elem.parentNode;
                    if (parent) {
                        parent.selectedIndex;
                        if (parent.parentNode) {
                            parent.parentNode.selectedIndex;
                        }
                    }
                    return null;
                }
            });
        }
        if (!jQuery.support.enctype) {
            jQuery.propFix.enctype = "encoding";
        }
        if (!jQuery.support.checkOn) {
            jQuery.each([ "radio", "checkbox" ], function() {
                jQuery.valHooks[this] = {
                    get: function(elem) {
                        return elem.getAttribute("value") === null ? "on" : elem.value;
                    }
                };
            });
        }
        jQuery.each([ "radio", "checkbox" ], function() {
            jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {
                set: function(elem, value) {
                    if (jQuery.isArray(value)) {
                        return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
                    }
                }
            });
        });
        var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
        function returnTrue() {
            return true;
        }
        function returnFalse() {
            return false;
        }
        jQuery.event = {
            global: {},
            add: function(elem, types, handler, data, selector) {
                var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
                if (!elemData) {
                    return;
                }
                if (handler.handler) {
                    handleObjIn = handler;
                    handler = handleObjIn.handler;
                    selector = handleObjIn.selector;
                }
                if (!handler.guid) {
                    handler.guid = jQuery.guid++;
                }
                if (!(events = elemData.events)) {
                    events = elemData.events = {};
                }
                if (!(eventHandle = elemData.handle)) {
                    eventHandle = elemData.handle = function(e) {
                        return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
                    };
                    eventHandle.elem = elem;
                }
                types = (types || "").match(core_rnotwhite) || [ "" ];
                t = types.length;
                while (t--) {
                    tmp = rtypenamespace.exec(types[t]) || [];
                    type = origType = tmp[1];
                    namespaces = (tmp[2] || "").split(".").sort();
                    special = jQuery.event.special[type] || {};
                    type = (selector ? special.delegateType : special.bindType) || type;
                    special = jQuery.event.special[type] || {};
                    handleObj = jQuery.extend({
                        type: type,
                        origType: origType,
                        data: data,
                        handler: handler,
                        guid: handler.guid,
                        selector: selector,
                        needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                        namespace: namespaces.join(".")
                    }, handleObjIn);
                    if (!(handlers = events[type])) {
                        handlers = events[type] = [];
                        handlers.delegateCount = 0;
                        if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                            if (elem.addEventListener) {
                                elem.addEventListener(type, eventHandle, false);
                            } else if (elem.attachEvent) {
                                elem.attachEvent("on" + type, eventHandle);
                            }
                        }
                    }
                    if (special.add) {
                        special.add.call(elem, handleObj);
                        if (!handleObj.handler.guid) {
                            handleObj.handler.guid = handler.guid;
                        }
                    }
                    if (selector) {
                        handlers.splice(handlers.delegateCount++, 0, handleObj);
                    } else {
                        handlers.push(handleObj);
                    }
                    jQuery.event.global[type] = true;
                }
                elem = null;
            },
            remove: function(elem, types, handler, selector, mappedTypes) {
                var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
                if (!elemData || !(events = elemData.events)) {
                    return;
                }
                types = (types || "").match(core_rnotwhite) || [ "" ];
                t = types.length;
                while (t--) {
                    tmp = rtypenamespace.exec(types[t]) || [];
                    type = origType = tmp[1];
                    namespaces = (tmp[2] || "").split(".").sort();
                    if (!type) {
                        for (type in events) {
                            jQuery.event.remove(elem, type + types[t], handler, selector, true);
                        }
                        continue;
                    }
                    special = jQuery.event.special[type] || {};
                    type = (selector ? special.delegateType : special.bindType) || type;
                    handlers = events[type] || [];
                    tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                    origCount = j = handlers.length;
                    while (j--) {
                        handleObj = handlers[j];
                        if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                            handlers.splice(j, 1);
                            if (handleObj.selector) {
                                handlers.delegateCount--;
                            }
                            if (special.remove) {
                                special.remove.call(elem, handleObj);
                            }
                        }
                    }
                    if (origCount && !handlers.length) {
                        if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                            jQuery.removeEvent(elem, type, elemData.handle);
                        }
                        delete events[type];
                    }
                }
                if (jQuery.isEmptyObject(events)) {
                    delete elemData.handle;
                    jQuery._removeData(elem, "events");
                }
            },
            trigger: function(event, data, elem, onlyHandlers) {
                var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [ elem || document ], type = core_hasOwn.call(event, "type") ? event.type : event, namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
                cur = tmp = elem = elem || document;
                if (elem.nodeType === 3 || elem.nodeType === 8) {
                    return;
                }
                if (rfocusMorph.test(type + jQuery.event.triggered)) {
                    return;
                }
                if (type.indexOf(".") >= 0) {
                    namespaces = type.split(".");
                    type = namespaces.shift();
                    namespaces.sort();
                }
                ontype = type.indexOf(":") < 0 && "on" + type;
                event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
                event.isTrigger = true;
                event.namespace = namespaces.join(".");
                event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
                event.result = undefined;
                if (!event.target) {
                    event.target = elem;
                }
                data = data == null ? [ event ] : jQuery.makeArray(data, [ event ]);
                special = jQuery.event.special[type] || {};
                if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                    return;
                }
                if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                    bubbleType = special.delegateType || type;
                    if (!rfocusMorph.test(bubbleType + type)) {
                        cur = cur.parentNode;
                    }
                    for (;cur; cur = cur.parentNode) {
                        eventPath.push(cur);
                        tmp = cur;
                    }
                    if (tmp === (elem.ownerDocument || document)) {
                        eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                    }
                }
                i = 0;
                while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                    event.type = i > 1 ? bubbleType : special.bindType || type;
                    handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                    if (handle) {
                        handle.apply(cur, data);
                    }
                    handle = ontype && cur[ontype];
                    if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
                        event.preventDefault();
                    }
                }
                event.type = type;
                if (!onlyHandlers && !event.isDefaultPrevented()) {
                    if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) && !(type === "click" && jQuery.nodeName(elem, "a")) && jQuery.acceptData(elem)) {
                        if (ontype && elem[type] && !jQuery.isWindow(elem)) {
                            tmp = elem[ontype];
                            if (tmp) {
                                elem[ontype] = null;
                            }
                            jQuery.event.triggered = type;
                            try {
                                elem[type]();
                            } catch (e) {}
                            jQuery.event.triggered = undefined;
                            if (tmp) {
                                elem[ontype] = tmp;
                            }
                        }
                    }
                }
                return event.result;
            },
            dispatch: function(event) {
                event = jQuery.event.fix(event);
                var i, ret, handleObj, matched, j, handlerQueue = [], args = core_slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
                args[0] = event;
                event.delegateTarget = this;
                if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                    return;
                }
                handlerQueue = jQuery.event.handlers.call(this, event, handlers);
                i = 0;
                while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                    event.currentTarget = matched.elem;
                    j = 0;
                    while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                        if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                            event.handleObj = handleObj;
                            event.data = handleObj.data;
                            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                            if (ret !== undefined) {
                                if ((event.result = ret) === false) {
                                    event.preventDefault();
                                    event.stopPropagation();
                                }
                            }
                        }
                    }
                }
                if (special.postDispatch) {
                    special.postDispatch.call(this, event);
                }
                return event.result;
            },
            handlers: function(event, handlers) {
                var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
                if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
                    for (;cur != this; cur = cur.parentNode || this) {
                        if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
                            matches = [];
                            for (i = 0; i < delegateCount; i++) {
                                handleObj = handlers[i];
                                sel = handleObj.selector + " ";
                                if (matches[sel] === undefined) {
                                    matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [ cur ]).length;
                                }
                                if (matches[sel]) {
                                    matches.push(handleObj);
                                }
                            }
                            if (matches.length) {
                                handlerQueue.push({
                                    elem: cur,
                                    handlers: matches
                                });
                            }
                        }
                    }
                }
                if (delegateCount < handlers.length) {
                    handlerQueue.push({
                        elem: this,
                        handlers: handlers.slice(delegateCount)
                    });
                }
                return handlerQueue;
            },
            fix: function(event) {
                if (event[jQuery.expando]) {
                    return event;
                }
                var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
                if (!fixHook) {
                    this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
                }
                copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
                event = new jQuery.Event(originalEvent);
                i = copy.length;
                while (i--) {
                    prop = copy[i];
                    event[prop] = originalEvent[prop];
                }
                if (!event.target) {
                    event.target = originalEvent.srcElement || document;
                }
                if (event.target.nodeType === 3) {
                    event.target = event.target.parentNode;
                }
                event.metaKey = !!event.metaKey;
                return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
            },
            props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
            fixHooks: {},
            keyHooks: {
                props: "char charCode key keyCode".split(" "),
                filter: function(event, original) {
                    if (event.which == null) {
                        event.which = original.charCode != null ? original.charCode : original.keyCode;
                    }
                    return event;
                }
            },
            mouseHooks: {
                props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
                filter: function(event, original) {
                    var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                    if (event.pageX == null && original.clientX != null) {
                        eventDoc = event.target.ownerDocument || document;
                        doc = eventDoc.documentElement;
                        body = eventDoc.body;
                        event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                        event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                    }
                    if (!event.relatedTarget && fromElement) {
                        event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                    }
                    if (!event.which && button !== undefined) {
                        event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
                    }
                    return event;
                }
            },
            special: {
                load: {
                    noBubble: true
                },
                click: {
                    trigger: function() {
                        if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
                            this.click();
                            return false;
                        }
                    }
                },
                focus: {
                    trigger: function() {
                        if (this !== document.activeElement && this.focus) {
                            try {
                                this.focus();
                                return false;
                            } catch (e) {}
                        }
                    },
                    delegateType: "focusin"
                },
                blur: {
                    trigger: function() {
                        if (this === document.activeElement && this.blur) {
                            this.blur();
                            return false;
                        }
                    },
                    delegateType: "focusout"
                },
                beforeunload: {
                    postDispatch: function(event) {
                        if (event.result !== undefined) {
                            event.originalEvent.returnValue = event.result;
                        }
                    }
                }
            },
            simulate: function(type, elem, event, bubble) {
                var e = jQuery.extend(new jQuery.Event(), event, {
                    type: type,
                    isSimulated: true,
                    originalEvent: {}
                });
                if (bubble) {
                    jQuery.event.trigger(e, null, elem);
                } else {
                    jQuery.event.dispatch.call(elem, e);
                }
                if (e.isDefaultPrevented()) {
                    event.preventDefault();
                }
            }
        };
        jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
            if (elem.removeEventListener) {
                elem.removeEventListener(type, handle, false);
            }
        } : function(elem, type, handle) {
            var name = "on" + type;
            if (elem.detachEvent) {
                if (typeof elem[name] === core_strundefined) {
                    elem[name] = null;
                }
                elem.detachEvent(name, handle);
            }
        };
        jQuery.Event = function(src, props) {
            if (!(this instanceof jQuery.Event)) {
                return new jQuery.Event(src, props);
            }
            if (src && src.type) {
                this.originalEvent = src;
                this.type = src.type;
                this.isDefaultPrevented = src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;
            } else {
                this.type = src;
            }
            if (props) {
                jQuery.extend(this, props);
            }
            this.timeStamp = src && src.timeStamp || jQuery.now();
            this[jQuery.expando] = true;
        };
        jQuery.Event.prototype = {
            isDefaultPrevented: returnFalse,
            isPropagationStopped: returnFalse,
            isImmediatePropagationStopped: returnFalse,
            preventDefault: function() {
                var e = this.originalEvent;
                this.isDefaultPrevented = returnTrue;
                if (!e) {
                    return;
                }
                if (e.preventDefault) {
                    e.preventDefault();
                } else {
                    e.returnValue = false;
                }
            },
            stopPropagation: function() {
                var e = this.originalEvent;
                this.isPropagationStopped = returnTrue;
                if (!e) {
                    return;
                }
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
                e.cancelBubble = true;
            },
            stopImmediatePropagation: function() {
                this.isImmediatePropagationStopped = returnTrue;
                this.stopPropagation();
            }
        };
        jQuery.each({
            mouseenter: "mouseover",
            mouseleave: "mouseout"
        }, function(orig, fix) {
            jQuery.event.special[orig] = {
                delegateType: fix,
                bindType: fix,
                handle: function(event) {
                    var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                    if (!related || related !== target && !jQuery.contains(target, related)) {
                        event.type = handleObj.origType;
                        ret = handleObj.handler.apply(this, arguments);
                        event.type = fix;
                    }
                    return ret;
                }
            };
        });
        if (!jQuery.support.submitBubbles) {
            jQuery.event.special.submit = {
                setup: function() {
                    if (jQuery.nodeName(this, "form")) {
                        return false;
                    }
                    jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                        var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                        if (form && !jQuery._data(form, "submitBubbles")) {
                            jQuery.event.add(form, "submit._submit", function(event) {
                                event._submit_bubble = true;
                            });
                            jQuery._data(form, "submitBubbles", true);
                        }
                    });
                },
                postDispatch: function(event) {
                    if (event._submit_bubble) {
                        delete event._submit_bubble;
                        if (this.parentNode && !event.isTrigger) {
                            jQuery.event.simulate("submit", this.parentNode, event, true);
                        }
                    }
                },
                teardown: function() {
                    if (jQuery.nodeName(this, "form")) {
                        return false;
                    }
                    jQuery.event.remove(this, "._submit");
                }
            };
        }
        if (!jQuery.support.changeBubbles) {
            jQuery.event.special.change = {
                setup: function() {
                    if (rformElems.test(this.nodeName)) {
                        if (this.type === "checkbox" || this.type === "radio") {
                            jQuery.event.add(this, "propertychange._change", function(event) {
                                if (event.originalEvent.propertyName === "checked") {
                                    this._just_changed = true;
                                }
                            });
                            jQuery.event.add(this, "click._change", function(event) {
                                if (this._just_changed && !event.isTrigger) {
                                    this._just_changed = false;
                                }
                                jQuery.event.simulate("change", this, event, true);
                            });
                        }
                        return false;
                    }
                    jQuery.event.add(this, "beforeactivate._change", function(e) {
                        var elem = e.target;
                        if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                            jQuery.event.add(elem, "change._change", function(event) {
                                if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                    jQuery.event.simulate("change", this.parentNode, event, true);
                                }
                            });
                            jQuery._data(elem, "changeBubbles", true);
                        }
                    });
                },
                handle: function(event) {
                    var elem = event.target;
                    if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {
                        return event.handleObj.handler.apply(this, arguments);
                    }
                },
                teardown: function() {
                    jQuery.event.remove(this, "._change");
                    return !rformElems.test(this.nodeName);
                }
            };
        }
        if (!jQuery.support.focusinBubbles) {
            jQuery.each({
                focus: "focusin",
                blur: "focusout"
            }, function(orig, fix) {
                var attaches = 0, handler = function(event) {
                    jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
                };
                jQuery.event.special[fix] = {
                    setup: function() {
                        if (attaches++ === 0) {
                            document.addEventListener(orig, handler, true);
                        }
                    },
                    teardown: function() {
                        if (--attaches === 0) {
                            document.removeEventListener(orig, handler, true);
                        }
                    }
                };
            });
        }
        jQuery.fn.extend({
            on: function(types, selector, data, fn, one) {
                var type, origFn;
                if (typeof types === "object") {
                    if (typeof selector !== "string") {
                        data = data || selector;
                        selector = undefined;
                    }
                    for (type in types) {
                        this.on(type, selector, data, types[type], one);
                    }
                    return this;
                }
                if (data == null && fn == null) {
                    fn = selector;
                    data = selector = undefined;
                } else if (fn == null) {
                    if (typeof selector === "string") {
                        fn = data;
                        data = undefined;
                    } else {
                        fn = data;
                        data = selector;
                        selector = undefined;
                    }
                }
                if (fn === false) {
                    fn = returnFalse;
                } else if (!fn) {
                    return this;
                }
                if (one === 1) {
                    origFn = fn;
                    fn = function(event) {
                        jQuery().off(event);
                        return origFn.apply(this, arguments);
                    };
                    fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
                }
                return this.each(function() {
                    jQuery.event.add(this, types, fn, data, selector);
                });
            },
            one: function(types, selector, data, fn) {
                return this.on(types, selector, data, fn, 1);
            },
            off: function(types, selector, fn) {
                var handleObj, type;
                if (types && types.preventDefault && types.handleObj) {
                    handleObj = types.handleObj;
                    jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                    return this;
                }
                if (typeof types === "object") {
                    for (type in types) {
                        this.off(type, selector, types[type]);
                    }
                    return this;
                }
                if (selector === false || typeof selector === "function") {
                    fn = selector;
                    selector = undefined;
                }
                if (fn === false) {
                    fn = returnFalse;
                }
                return this.each(function() {
                    jQuery.event.remove(this, types, fn, selector);
                });
            },
            bind: function(types, data, fn) {
                return this.on(types, null, data, fn);
            },
            unbind: function(types, fn) {
                return this.off(types, null, fn);
            },
            delegate: function(selector, types, data, fn) {
                return this.on(types, selector, data, fn);
            },
            undelegate: function(selector, types, fn) {
                return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
            },
            trigger: function(type, data) {
                return this.each(function() {
                    jQuery.event.trigger(type, data, this);
                });
            },
            triggerHandler: function(type, data) {
                var elem = this[0];
                if (elem) {
                    return jQuery.event.trigger(type, data, elem, true);
                }
            }
        });
        (function(window, undefined) {
            var i, cachedruns, Expr, getText, isXML, compile, hasDuplicate, outermostContext, setDocument, document, docElem, documentIsXML, rbuggyQSA, rbuggyMatches, matches, contains, sortOrder, expando = "sizzle" + -new Date(), preferredDoc = window.document, support = {}, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31, arr = [], pop = arr.pop, push = arr.push, slice = arr.slice, indexOf = arr.indexOf || function(elem) {
                var i = 0, len = this.length;
                for (;i < len; i++) {
                    if (this[i] === elem) {
                        return i;
                    }
                }
                return -1;
            }, whitespace = "[\\x20\\t\\r\\n\\f]", characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", identifier = characterEncoding.replace("w", "w#"), operators = "([*^$|!~]?=)", attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace + "*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]", pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace(3, 8) + ")*)|.*)\\)|)", rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
                ID: new RegExp("^#(" + characterEncoding + ")"),
                CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
                NAME: new RegExp("^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]"),
                TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
                ATTR: new RegExp("^" + attributes),
                PSEUDO: new RegExp("^" + pseudos),
                CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
            }, rsibling = /[\x20\t\r\n\f]*[+~]/, rnative = /^[^{]+\{\s*\[native code/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rescape = /'|\\/g, rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g, runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g, funescape = function(_, escaped) {
                var high = "0x" + escaped - 65536;
                return high !== high ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
            };
            try {
                slice.call(preferredDoc.documentElement.childNodes, 0)[0].nodeType;
            } catch (e) {
                slice = function(i) {
                    var elem, results = [];
                    while (elem = this[i++]) {
                        results.push(elem);
                    }
                    return results;
                };
            }
            function isNative(fn) {
                return rnative.test(fn + "");
            }
            function createCache() {
                var cache, keys = [];
                return cache = function(key, value) {
                    if (keys.push(key += " ") > Expr.cacheLength) {
                        delete cache[keys.shift()];
                    }
                    return cache[key] = value;
                };
            }
            function markFunction(fn) {
                fn[expando] = true;
                return fn;
            }
            function assert(fn) {
                var div = document.createElement("div");
                try {
                    return fn(div);
                } catch (e) {
                    return false;
                } finally {
                    div = null;
                }
            }
            function Sizzle(selector, context, results, seed) {
                var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
                if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                    setDocument(context);
                }
                context = context || document;
                results = results || [];
                if (!selector || typeof selector !== "string") {
                    return results;
                }
                if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
                    return [];
                }
                if (!documentIsXML && !seed) {
                    if (match = rquickExpr.exec(selector)) {
                        if (m = match[1]) {
                            if (nodeType === 9) {
                                elem = context.getElementById(m);
                                if (elem && elem.parentNode) {
                                    if (elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                } else {
                                    return results;
                                }
                            } else {
                                if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            }
                        } else if (match[2]) {
                            push.apply(results, slice.call(context.getElementsByTagName(selector), 0));
                            return results;
                        } else if ((m = match[3]) && support.getByClassName && context.getElementsByClassName) {
                            push.apply(results, slice.call(context.getElementsByClassName(m), 0));
                            return results;
                        }
                    }
                    if (support.qsa && !rbuggyQSA.test(selector)) {
                        old = true;
                        nid = expando;
                        newContext = context;
                        newSelector = nodeType === 9 && selector;
                        if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                            groups = tokenize(selector);
                            if (old = context.getAttribute("id")) {
                                nid = old.replace(rescape, "\\$&");
                            } else {
                                context.setAttribute("id", nid);
                            }
                            nid = "[id='" + nid + "'] ";
                            i = groups.length;
                            while (i--) {
                                groups[i] = nid + toSelector(groups[i]);
                            }
                            newContext = rsibling.test(selector) && context.parentNode || context;
                            newSelector = groups.join(",");
                        }
                        if (newSelector) {
                            try {
                                push.apply(results, slice.call(newContext.querySelectorAll(newSelector), 0));
                                return results;
                            } catch (qsaError) {} finally {
                                if (!old) {
                                    context.removeAttribute("id");
                                }
                            }
                        }
                    }
                }
                return select(selector.replace(rtrim, "$1"), context, results, seed);
            }
            isXML = Sizzle.isXML = function(elem) {
                var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                return documentElement ? documentElement.nodeName !== "HTML" : false;
            };
            setDocument = Sizzle.setDocument = function(node) {
                var doc = node ? node.ownerDocument || node : preferredDoc;
                if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                    return document;
                }
                document = doc;
                docElem = doc.documentElement;
                documentIsXML = isXML(doc);
                support.tagNameNoComments = assert(function(div) {
                    div.appendChild(doc.createComment(""));
                    return !div.getElementsByTagName("*").length;
                });
                support.attributes = assert(function(div) {
                    div.innerHTML = "<select></select>";
                    var type = typeof div.lastChild.getAttribute("multiple");
                    return type !== "boolean" && type !== "string";
                });
                support.getByClassName = assert(function(div) {
                    div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
                    if (!div.getElementsByClassName || !div.getElementsByClassName("e").length) {
                        return false;
                    }
                    div.lastChild.className = "e";
                    return div.getElementsByClassName("e").length === 2;
                });
                support.getByName = assert(function(div) {
                    div.id = expando + 0;
                    div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
                    docElem.insertBefore(div, docElem.firstChild);
                    var pass = doc.getElementsByName && doc.getElementsByName(expando).length === 2 + doc.getElementsByName(expando + 0).length;
                    support.getIdNotName = !doc.getElementById(expando);
                    docElem.removeChild(div);
                    return pass;
                });
                Expr.attrHandle = assert(function(div) {
                    div.innerHTML = "<a href='#'></a>";
                    return div.firstChild && typeof div.firstChild.getAttribute !== strundefined && div.firstChild.getAttribute("href") === "#";
                }) ? {} : {
                    href: function(elem) {
                        return elem.getAttribute("href", 2);
                    },
                    type: function(elem) {
                        return elem.getAttribute("type");
                    }
                };
                if (support.getIdNotName) {
                    Expr.find["ID"] = function(id, context) {
                        if (typeof context.getElementById !== strundefined && !documentIsXML) {
                            var m = context.getElementById(id);
                            return m && m.parentNode ? [ m ] : [];
                        }
                    };
                    Expr.filter["ID"] = function(id) {
                        var attrId = id.replace(runescape, funescape);
                        return function(elem) {
                            return elem.getAttribute("id") === attrId;
                        };
                    };
                } else {
                    Expr.find["ID"] = function(id, context) {
                        if (typeof context.getElementById !== strundefined && !documentIsXML) {
                            var m = context.getElementById(id);
                            return m ? m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ? [ m ] : undefined : [];
                        }
                    };
                    Expr.filter["ID"] = function(id) {
                        var attrId = id.replace(runescape, funescape);
                        return function(elem) {
                            var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                            return node && node.value === attrId;
                        };
                    };
                }
                Expr.find["TAG"] = support.tagNameNoComments ? function(tag, context) {
                    if (typeof context.getElementsByTagName !== strundefined) {
                        return context.getElementsByTagName(tag);
                    }
                } : function(tag, context) {
                    var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                    if (tag === "*") {
                        while (elem = results[i++]) {
                            if (elem.nodeType === 1) {
                                tmp.push(elem);
                            }
                        }
                        return tmp;
                    }
                    return results;
                };
                Expr.find["NAME"] = support.getByName && function(tag, context) {
                    if (typeof context.getElementsByName !== strundefined) {
                        return context.getElementsByName(name);
                    }
                };
                Expr.find["CLASS"] = support.getByClassName && function(className, context) {
                    if (typeof context.getElementsByClassName !== strundefined && !documentIsXML) {
                        return context.getElementsByClassName(className);
                    }
                };
                rbuggyMatches = [];
                rbuggyQSA = [ ":focus" ];
                if (support.qsa = isNative(doc.querySelectorAll)) {
                    assert(function(div) {
                        div.innerHTML = "<select><option selected=''></option></select>";
                        if (!div.querySelectorAll("[selected]").length) {
                            rbuggyQSA.push("\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)");
                        }
                        if (!div.querySelectorAll(":checked").length) {
                            rbuggyQSA.push(":checked");
                        }
                    });
                    assert(function(div) {
                        div.innerHTML = "<input type='hidden' i=''/>";
                        if (div.querySelectorAll("[i^='']").length) {
                            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:\"\"|'')");
                        }
                        if (!div.querySelectorAll(":enabled").length) {
                            rbuggyQSA.push(":enabled", ":disabled");
                        }
                        div.querySelectorAll("*,:x");
                        rbuggyQSA.push(",.*:");
                    });
                }
                if (support.matchesSelector = isNative(matches = docElem.matchesSelector || docElem.mozMatchesSelector || docElem.webkitMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                    assert(function(div) {
                        support.disconnectedMatch = matches.call(div, "div");
                        matches.call(div, "[s!='']:x");
                        rbuggyMatches.push("!=", pseudos);
                    });
                }
                rbuggyQSA = new RegExp(rbuggyQSA.join("|"));
                rbuggyMatches = new RegExp(rbuggyMatches.join("|"));
                contains = isNative(docElem.contains) || docElem.compareDocumentPosition ? function(a, b) {
                    var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                    return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
                } : function(a, b) {
                    if (b) {
                        while (b = b.parentNode) {
                            if (b === a) {
                                return true;
                            }
                        }
                    }
                    return false;
                };
                sortOrder = docElem.compareDocumentPosition ? function(a, b) {
                    var compare;
                    if (a === b) {
                        hasDuplicate = true;
                        return 0;
                    }
                    if (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b)) {
                        if (compare & 1 || a.parentNode && a.parentNode.nodeType === 11) {
                            if (a === doc || contains(preferredDoc, a)) {
                                return -1;
                            }
                            if (b === doc || contains(preferredDoc, b)) {
                                return 1;
                            }
                            return 0;
                        }
                        return compare & 4 ? -1 : 1;
                    }
                    return a.compareDocumentPosition ? -1 : 1;
                } : function(a, b) {
                    var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                    if (a === b) {
                        hasDuplicate = true;
                        return 0;
                    } else if (!aup || !bup) {
                        return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : 0;
                    } else if (aup === bup) {
                        return siblingCheck(a, b);
                    }
                    cur = a;
                    while (cur = cur.parentNode) {
                        ap.unshift(cur);
                    }
                    cur = b;
                    while (cur = cur.parentNode) {
                        bp.unshift(cur);
                    }
                    while (ap[i] === bp[i]) {
                        i++;
                    }
                    return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
                };
                hasDuplicate = false;
                [ 0, 0 ].sort(sortOrder);
                support.detectDuplicates = hasDuplicate;
                return document;
            };
            Sizzle.matches = function(expr, elements) {
                return Sizzle(expr, null, null, elements);
            };
            Sizzle.matchesSelector = function(elem, expr) {
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }
                expr = expr.replace(rattributeQuotes, "='$1']");
                if (support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr)) {
                    try {
                        var ret = matches.call(elem, expr);
                        if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                            return ret;
                        }
                    } catch (e) {}
                }
                return Sizzle(expr, document, null, [ elem ]).length > 0;
            };
            Sizzle.contains = function(context, elem) {
                if ((context.ownerDocument || context) !== document) {
                    setDocument(context);
                }
                return contains(context, elem);
            };
            Sizzle.attr = function(elem, name) {
                var val;
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }
                if (!documentIsXML) {
                    name = name.toLowerCase();
                }
                if (val = Expr.attrHandle[name]) {
                    return val(elem);
                }
                if (documentIsXML || support.attributes) {
                    return elem.getAttribute(name);
                }
                return ((val = elem.getAttributeNode(name)) || elem.getAttribute(name)) && elem[name] === true ? name : val && val.specified ? val.value : null;
            };
            Sizzle.error = function(msg) {
                throw new Error("Syntax error, unrecognized expression: " + msg);
            };
            Sizzle.uniqueSort = function(results) {
                var elem, duplicates = [], i = 1, j = 0;
                hasDuplicate = !support.detectDuplicates;
                results.sort(sortOrder);
                if (hasDuplicate) {
                    for (;elem = results[i]; i++) {
                        if (elem === results[i - 1]) {
                            j = duplicates.push(i);
                        }
                    }
                    while (j--) {
                        results.splice(duplicates[j], 1);
                    }
                }
                return results;
            };
            function siblingCheck(a, b) {
                var cur = b && a, diff = cur && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
                if (diff) {
                    return diff;
                }
                if (cur) {
                    while (cur = cur.nextSibling) {
                        if (cur === b) {
                            return -1;
                        }
                    }
                }
                return a ? 1 : -1;
            }
            function createInputPseudo(type) {
                return function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === type;
                };
            }
            function createButtonPseudo(type) {
                return function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (name === "input" || name === "button") && elem.type === type;
                };
            }
            function createPositionalPseudo(fn) {
                return markFunction(function(argument) {
                    argument = +argument;
                    return markFunction(function(seed, matches) {
                        var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                        while (i--) {
                            if (seed[j = matchIndexes[i]]) {
                                seed[j] = !(matches[j] = seed[j]);
                            }
                        }
                    });
                });
            }
            getText = Sizzle.getText = function(elem) {
                var node, ret = "", i = 0, nodeType = elem.nodeType;
                if (!nodeType) {
                    for (;node = elem[i]; i++) {
                        ret += getText(node);
                    }
                } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                    if (typeof elem.textContent === "string") {
                        return elem.textContent;
                    } else {
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            ret += getText(elem);
                        }
                    }
                } else if (nodeType === 3 || nodeType === 4) {
                    return elem.nodeValue;
                }
                return ret;
            };
            Expr = Sizzle.selectors = {
                cacheLength: 50,
                createPseudo: markFunction,
                match: matchExpr,
                find: {},
                relative: {
                    ">": {
                        dir: "parentNode",
                        first: true
                    },
                    " ": {
                        dir: "parentNode"
                    },
                    "+": {
                        dir: "previousSibling",
                        first: true
                    },
                    "~": {
                        dir: "previousSibling"
                    }
                },
                preFilter: {
                    ATTR: function(match) {
                        match[1] = match[1].replace(runescape, funescape);
                        match[3] = (match[4] || match[5] || "").replace(runescape, funescape);
                        if (match[2] === "~=") {
                            match[3] = " " + match[3] + " ";
                        }
                        return match.slice(0, 4);
                    },
                    CHILD: function(match) {
                        match[1] = match[1].toLowerCase();
                        if (match[1].slice(0, 3) === "nth") {
                            if (!match[3]) {
                                Sizzle.error(match[0]);
                            }
                            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                            match[5] = +(match[7] + match[8] || match[3] === "odd");
                        } else if (match[3]) {
                            Sizzle.error(match[0]);
                        }
                        return match;
                    },
                    PSEUDO: function(match) {
                        var excess, unquoted = !match[5] && match[2];
                        if (matchExpr["CHILD"].test(match[0])) {
                            return null;
                        }
                        if (match[4]) {
                            match[2] = match[4];
                        } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                            match[0] = match[0].slice(0, excess);
                            match[2] = unquoted.slice(0, excess);
                        }
                        return match.slice(0, 3);
                    }
                },
                filter: {
                    TAG: function(nodeName) {
                        if (nodeName === "*") {
                            return function() {
                                return true;
                            };
                        }
                        nodeName = nodeName.replace(runescape, funescape).toLowerCase();
                        return function(elem) {
                            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                        };
                    },
                    CLASS: function(className) {
                        var pattern = classCache[className + " "];
                        return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                            return pattern.test(elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "");
                        });
                    },
                    ATTR: function(name, operator, check) {
                        return function(elem) {
                            var result = Sizzle.attr(elem, name);
                            if (result == null) {
                                return operator === "!=";
                            }
                            if (!operator) {
                                return true;
                            }
                            result += "";
                            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                        };
                    },
                    CHILD: function(type, what, argument, first, last) {
                        var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                        return first === 1 && last === 0 ? function(elem) {
                            return !!elem.parentNode;
                        } : function(elem, context, xml) {
                            var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                            if (parent) {
                                if (simple) {
                                    while (dir) {
                                        node = elem;
                                        while (node = node[dir]) {
                                            if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                                return false;
                                            }
                                        }
                                        start = dir = type === "only" && !start && "nextSibling";
                                    }
                                    return true;
                                }
                                start = [ forward ? parent.firstChild : parent.lastChild ];
                                if (forward && useCache) {
                                    outerCache = parent[expando] || (parent[expando] = {});
                                    cache = outerCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = cache[0] === dirruns && cache[2];
                                    node = nodeIndex && parent.childNodes[nodeIndex];
                                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                        if (node.nodeType === 1 && ++diff && node === elem) {
                                            outerCache[type] = [ dirruns, nodeIndex, diff ];
                                            break;
                                        }
                                    }
                                } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                    diff = cache[1];
                                } else {
                                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                            if (useCache) {
                                                (node[expando] || (node[expando] = {}))[type] = [ dirruns, diff ];
                                            }
                                            if (node === elem) {
                                                break;
                                            }
                                        }
                                    }
                                }
                                diff -= last;
                                return diff === first || diff % first === 0 && diff / first >= 0;
                            }
                        };
                    },
                    PSEUDO: function(pseudo, argument) {
                        var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                        if (fn[expando]) {
                            return fn(argument);
                        }
                        if (fn.length > 1) {
                            args = [ pseudo, pseudo, "", argument ];
                            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                                var idx, matched = fn(seed, argument), i = matched.length;
                                while (i--) {
                                    idx = indexOf.call(seed, matched[i]);
                                    seed[idx] = !(matches[idx] = matched[i]);
                                }
                            }) : function(elem) {
                                return fn(elem, 0, args);
                            };
                        }
                        return fn;
                    }
                },
                pseudos: {
                    not: markFunction(function(selector) {
                        var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                        return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                            var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                            while (i--) {
                                if (elem = unmatched[i]) {
                                    seed[i] = !(matches[i] = elem);
                                }
                            }
                        }) : function(elem, context, xml) {
                            input[0] = elem;
                            matcher(input, null, xml, results);
                            return !results.pop();
                        };
                    }),
                    has: markFunction(function(selector) {
                        return function(elem) {
                            return Sizzle(selector, elem).length > 0;
                        };
                    }),
                    contains: markFunction(function(text) {
                        return function(elem) {
                            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                        };
                    }),
                    lang: markFunction(function(lang) {
                        if (!ridentifier.test(lang || "")) {
                            Sizzle.error("unsupported lang: " + lang);
                        }
                        lang = lang.replace(runescape, funescape).toLowerCase();
                        return function(elem) {
                            var elemLang;
                            do {
                                if (elemLang = documentIsXML ? elem.getAttribute("xml:lang") || elem.getAttribute("lang") : elem.lang) {
                                    elemLang = elemLang.toLowerCase();
                                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                                }
                            } while ((elem = elem.parentNode) && elem.nodeType === 1);
                            return false;
                        };
                    }),
                    target: function(elem) {
                        var hash = window.location && window.location.hash;
                        return hash && hash.slice(1) === elem.id;
                    },
                    root: function(elem) {
                        return elem === docElem;
                    },
                    focus: function(elem) {
                        return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                    },
                    enabled: function(elem) {
                        return elem.disabled === false;
                    },
                    disabled: function(elem) {
                        return elem.disabled === true;
                    },
                    checked: function(elem) {
                        var nodeName = elem.nodeName.toLowerCase();
                        return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
                    },
                    selected: function(elem) {
                        if (elem.parentNode) {
                            elem.parentNode.selectedIndex;
                        }
                        return elem.selected === true;
                    },
                    empty: function(elem) {
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            if (elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4) {
                                return false;
                            }
                        }
                        return true;
                    },
                    parent: function(elem) {
                        return !Expr.pseudos["empty"](elem);
                    },
                    header: function(elem) {
                        return rheader.test(elem.nodeName);
                    },
                    input: function(elem) {
                        return rinputs.test(elem.nodeName);
                    },
                    button: function(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return name === "input" && elem.type === "button" || name === "button";
                    },
                    text: function(elem) {
                        var attr;
                        return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type);
                    },
                    first: createPositionalPseudo(function() {
                        return [ 0 ];
                    }),
                    last: createPositionalPseudo(function(matchIndexes, length) {
                        return [ length - 1 ];
                    }),
                    eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                        return [ argument < 0 ? argument + length : argument ];
                    }),
                    even: createPositionalPseudo(function(matchIndexes, length) {
                        var i = 0;
                        for (;i < length; i += 2) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),
                    odd: createPositionalPseudo(function(matchIndexes, length) {
                        var i = 1;
                        for (;i < length; i += 2) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),
                    lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument;
                        for (;--i >= 0; ) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),
                    gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument;
                        for (;++i < length; ) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    })
                }
            };
            for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true
            }) {
                Expr.pseudos[i] = createInputPseudo(i);
            }
            for (i in {
                submit: true,
                reset: true
            }) {
                Expr.pseudos[i] = createButtonPseudo(i);
            }
            function tokenize(selector, parseOnly) {
                var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
                if (cached) {
                    return parseOnly ? 0 : cached.slice(0);
                }
                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;
                while (soFar) {
                    if (!matched || (match = rcomma.exec(soFar))) {
                        if (match) {
                            soFar = soFar.slice(match[0].length) || soFar;
                        }
                        groups.push(tokens = []);
                    }
                    matched = false;
                    if (match = rcombinators.exec(soFar)) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: match[0].replace(rtrim, " ")
                        });
                        soFar = soFar.slice(matched.length);
                    }
                    for (type in Expr.filter) {
                        if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                            matched = match.shift();
                            tokens.push({
                                value: matched,
                                type: type,
                                matches: match
                            });
                            soFar = soFar.slice(matched.length);
                        }
                    }
                    if (!matched) {
                        break;
                    }
                }
                return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
            }
            function toSelector(tokens) {
                var i = 0, len = tokens.length, selector = "";
                for (;i < len; i++) {
                    selector += tokens[i].value;
                }
                return selector;
            }
            function addCombinator(matcher, combinator, base) {
                var dir = combinator.dir, checkNonElements = base && dir === "parentNode", doneName = done++;
                return combinator.first ? function(elem, context, xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            return matcher(elem, context, xml);
                        }
                    }
                } : function(elem, context, xml) {
                    var data, cache, outerCache, dirkey = dirruns + " " + doneName;
                    if (xml) {
                        while (elem = elem[dir]) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                if (matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    } else {
                        while (elem = elem[dir]) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                outerCache = elem[expando] || (elem[expando] = {});
                                if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                                    if ((data = cache[1]) === true || data === cachedruns) {
                                        return data === true;
                                    }
                                } else {
                                    cache = outerCache[dir] = [ dirkey ];
                                    cache[1] = matcher(elem, context, xml) || cachedruns;
                                    if (cache[1] === true) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                };
            }
            function elementMatcher(matchers) {
                return matchers.length > 1 ? function(elem, context, xml) {
                    var i = matchers.length;
                    while (i--) {
                        if (!matchers[i](elem, context, xml)) {
                            return false;
                        }
                    }
                    return true;
                } : matchers[0];
            }
            function condense(unmatched, map, filter, context, xml) {
                var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
                for (;i < len; i++) {
                    if (elem = unmatched[i]) {
                        if (!filter || filter(elem, context, xml)) {
                            newUnmatched.push(elem);
                            if (mapped) {
                                map.push(i);
                            }
                        }
                    }
                }
                return newUnmatched;
            }
            function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                if (postFilter && !postFilter[expando]) {
                    postFilter = setMatcher(postFilter);
                }
                if (postFinder && !postFinder[expando]) {
                    postFinder = setMatcher(postFinder, postSelector);
                }
                return markFunction(function(seed, results, context, xml) {
                    var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [ context ] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                    if (matcher) {
                        matcher(matcherIn, matcherOut, context, xml);
                    }
                    if (postFilter) {
                        temp = condense(matcherOut, postMap);
                        postFilter(temp, [], context, xml);
                        i = temp.length;
                        while (i--) {
                            if (elem = temp[i]) {
                                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                            }
                        }
                    }
                    if (seed) {
                        if (postFinder || preFilter) {
                            if (postFinder) {
                                temp = [];
                                i = matcherOut.length;
                                while (i--) {
                                    if (elem = matcherOut[i]) {
                                        temp.push(matcherIn[i] = elem);
                                    }
                                }
                                postFinder(null, matcherOut = [], temp, xml);
                            }
                            i = matcherOut.length;
                            while (i--) {
                                if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                                    seed[temp] = !(results[temp] = elem);
                                }
                            }
                        }
                    } else {
                        matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                        if (postFinder) {
                            postFinder(null, results, matcherOut, xml);
                        } else {
                            push.apply(results, matcherOut);
                        }
                    }
                });
            }
            function matcherFromTokens(tokens) {
                var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                    return elem === checkContext;
                }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                    return indexOf.call(checkContext, elem) > -1;
                }, implicitRelative, true), matchers = [ function(elem, context, xml) {
                    return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                } ];
                for (;i < len; i++) {
                    if (matcher = Expr.relative[tokens[i].type]) {
                        matchers = [ addCombinator(elementMatcher(matchers), matcher) ];
                    } else {
                        matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                        if (matcher[expando]) {
                            j = ++i;
                            for (;j < len; j++) {
                                if (Expr.relative[tokens[j].type]) {
                                    break;
                                }
                            }
                            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1)).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                        }
                        matchers.push(matcher);
                    }
                }
                return elementMatcher(matchers);
            }
            function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var matcherCachedRuns = 0, bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, expandContext) {
                    var elem, j, matcher, setMatched = [], matchedCount = 0, i = "0", unmatched = seed && [], outermost = expandContext != null, contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", expandContext && context.parentNode || context), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || .1;
                    if (outermost) {
                        outermostContext = context !== document && context;
                        cachedruns = matcherCachedRuns;
                    }
                    for (;(elem = elems[i]) != null; i++) {
                        if (byElement && elem) {
                            j = 0;
                            while (matcher = elementMatchers[j++]) {
                                if (matcher(elem, context, xml)) {
                                    results.push(elem);
                                    break;
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                                cachedruns = ++matcherCachedRuns;
                            }
                        }
                        if (bySet) {
                            if (elem = !matcher && elem) {
                                matchedCount--;
                            }
                            if (seed) {
                                unmatched.push(elem);
                            }
                        }
                    }
                    matchedCount += i;
                    if (bySet && i !== matchedCount) {
                        j = 0;
                        while (matcher = setMatchers[j++]) {
                            matcher(unmatched, setMatched, context, xml);
                        }
                        if (seed) {
                            if (matchedCount > 0) {
                                while (i--) {
                                    if (!(unmatched[i] || setMatched[i])) {
                                        setMatched[i] = pop.call(results);
                                    }
                                }
                            }
                            setMatched = condense(setMatched);
                        }
                        push.apply(results, setMatched);
                        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                            Sizzle.uniqueSort(results);
                        }
                    }
                    if (outermost) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup;
                    }
                    return unmatched;
                };
                return bySet ? markFunction(superMatcher) : superMatcher;
            }
            compile = Sizzle.compile = function(selector, group) {
                var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
                if (!cached) {
                    if (!group) {
                        group = tokenize(selector);
                    }
                    i = group.length;
                    while (i--) {
                        cached = matcherFromTokens(group[i]);
                        if (cached[expando]) {
                            setMatchers.push(cached);
                        } else {
                            elementMatchers.push(cached);
                        }
                    }
                    cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                }
                return cached;
            };
            function multipleContexts(selector, contexts, results) {
                var i = 0, len = contexts.length;
                for (;i < len; i++) {
                    Sizzle(selector, contexts[i], results);
                }
                return results;
            }
            function select(selector, context, results, seed) {
                var i, tokens, token, type, find, match = tokenize(selector);
                if (!seed) {
                    if (match.length === 1) {
                        tokens = match[0] = match[0].slice(0);
                        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && !documentIsXML && Expr.relative[tokens[1].type]) {
                            context = Expr.find["ID"](token.matches[0].replace(runescape, funescape), context)[0];
                            if (!context) {
                                return results;
                            }
                            selector = selector.slice(tokens.shift().value.length);
                        }
                        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                        while (i--) {
                            token = tokens[i];
                            if (Expr.relative[type = token.type]) {
                                break;
                            }
                            if (find = Expr.find[type]) {
                                if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context)) {
                                    tokens.splice(i, 1);
                                    selector = seed.length && toSelector(tokens);
                                    if (!selector) {
                                        push.apply(results, slice.call(seed, 0));
                                        return results;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                compile(selector, match)(seed, context, documentIsXML, results, rsibling.test(selector));
                return results;
            }
            Expr.pseudos["nth"] = Expr.pseudos["eq"];
            function setFilters() {}
            Expr.filters = setFilters.prototype = Expr.pseudos;
            Expr.setFilters = new setFilters();
            setDocument();
            Sizzle.attr = jQuery.attr;
            jQuery.find = Sizzle;
            jQuery.expr = Sizzle.selectors;
            jQuery.expr[":"] = jQuery.expr.pseudos;
            jQuery.unique = Sizzle.uniqueSort;
            jQuery.text = Sizzle.getText;
            jQuery.isXMLDoc = Sizzle.isXML;
            jQuery.contains = Sizzle.contains;
        })(window);
        var runtil = /Until$/, rparentsprev = /^(?:parents|prev(?:Until|All))/, isSimple = /^.[^:#\[\.,]*$/, rneedsContext = jQuery.expr.match.needsContext, guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
        jQuery.fn.extend({
            find: function(selector) {
                var i, ret, self, len = this.length;
                if (typeof selector !== "string") {
                    self = this;
                    return this.pushStack(jQuery(selector).filter(function() {
                        for (i = 0; i < len; i++) {
                            if (jQuery.contains(self[i], this)) {
                                return true;
                            }
                        }
                    }));
                }
                ret = [];
                for (i = 0; i < len; i++) {
                    jQuery.find(selector, this[i], ret);
                }
                ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
                ret.selector = (this.selector ? this.selector + " " : "") + selector;
                return ret;
            },
            has: function(target) {
                var i, targets = jQuery(target, this), len = targets.length;
                return this.filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(this, targets[i])) {
                            return true;
                        }
                    }
                });
            },
            not: function(selector) {
                return this.pushStack(winnow(this, selector, false));
            },
            filter: function(selector) {
                return this.pushStack(winnow(this, selector, true));
            },
            is: function(selector) {
                return !!selector && (typeof selector === "string" ? rneedsContext.test(selector) ? jQuery(selector, this.context).index(this[0]) >= 0 : jQuery.filter(selector, this).length > 0 : this.filter(selector).length > 0);
            },
            closest: function(selectors, context) {
                var cur, i = 0, l = this.length, ret = [], pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
                for (;i < l; i++) {
                    cur = this[i];
                    while (cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11) {
                        if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
                            ret.push(cur);
                            break;
                        }
                        cur = cur.parentNode;
                    }
                }
                return this.pushStack(ret.length > 1 ? jQuery.unique(ret) : ret);
            },
            index: function(elem) {
                if (!elem) {
                    return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
                }
                if (typeof elem === "string") {
                    return jQuery.inArray(this[0], jQuery(elem));
                }
                return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
            },
            add: function(selector, context) {
                var set = typeof selector === "string" ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [ selector ] : selector), all = jQuery.merge(this.get(), set);
                return this.pushStack(jQuery.unique(all));
            },
            addBack: function(selector) {
                return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
            }
        });
        jQuery.fn.andSelf = jQuery.fn.addBack;
        function sibling(cur, dir) {
            do {
                cur = cur[dir];
            } while (cur && cur.nodeType !== 1);
            return cur;
        }
        jQuery.each({
            parent: function(elem) {
                var parent = elem.parentNode;
                return parent && parent.nodeType !== 11 ? parent : null;
            },
            parents: function(elem) {
                return jQuery.dir(elem, "parentNode");
            },
            parentsUntil: function(elem, i, until) {
                return jQuery.dir(elem, "parentNode", until);
            },
            next: function(elem) {
                return sibling(elem, "nextSibling");
            },
            prev: function(elem) {
                return sibling(elem, "previousSibling");
            },
            nextAll: function(elem) {
                return jQuery.dir(elem, "nextSibling");
            },
            prevAll: function(elem) {
                return jQuery.dir(elem, "previousSibling");
            },
            nextUntil: function(elem, i, until) {
                return jQuery.dir(elem, "nextSibling", until);
            },
            prevUntil: function(elem, i, until) {
                return jQuery.dir(elem, "previousSibling", until);
            },
            siblings: function(elem) {
                return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
            },
            children: function(elem) {
                return jQuery.sibling(elem.firstChild);
            },
            contents: function(elem) {
                return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
            }
        }, function(name, fn) {
            jQuery.fn[name] = function(until, selector) {
                var ret = jQuery.map(this, fn, until);
                if (!runtil.test(name)) {
                    selector = until;
                }
                if (selector && typeof selector === "string") {
                    ret = jQuery.filter(selector, ret);
                }
                ret = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;
                if (this.length > 1 && rparentsprev.test(name)) {
                    ret = ret.reverse();
                }
                return this.pushStack(ret);
            };
        });
        jQuery.extend({
            filter: function(expr, elems, not) {
                if (not) {
                    expr = ":not(" + expr + ")";
                }
                return elems.length === 1 ? jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] : jQuery.find.matches(expr, elems);
            },
            dir: function(elem, dir, until) {
                var matched = [], cur = elem[dir];
                while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                    if (cur.nodeType === 1) {
                        matched.push(cur);
                    }
                    cur = cur[dir];
                }
                return matched;
            },
            sibling: function(n, elem) {
                var r = [];
                for (;n; n = n.nextSibling) {
                    if (n.nodeType === 1 && n !== elem) {
                        r.push(n);
                    }
                }
                return r;
            }
        });
        function winnow(elements, qualifier, keep) {
            qualifier = qualifier || 0;
            if (jQuery.isFunction(qualifier)) {
                return jQuery.grep(elements, function(elem, i) {
                    var retVal = !!qualifier.call(elem, i, elem);
                    return retVal === keep;
                });
            } else if (qualifier.nodeType) {
                return jQuery.grep(elements, function(elem) {
                    return elem === qualifier === keep;
                });
            } else if (typeof qualifier === "string") {
                var filtered = jQuery.grep(elements, function(elem) {
                    return elem.nodeType === 1;
                });
                if (isSimple.test(qualifier)) {
                    return jQuery.filter(qualifier, filtered, !keep);
                } else {
                    qualifier = jQuery.filter(qualifier, filtered);
                }
            }
            return jQuery.grep(elements, function(elem) {
                return jQuery.inArray(elem, qualifier) >= 0 === keep;
            });
        }
        function createSafeFragment(document) {
            var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
            if (safeFrag.createElement) {
                while (list.length) {
                    safeFrag.createElement(list.pop());
                }
            }
            return safeFrag;
        }
        var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, manipulation_rcheckableType = /^(?:checkbox|radio)$/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
            option: [ 1, "<select multiple='multiple'>", "</select>" ],
            legend: [ 1, "<fieldset>", "</fieldset>" ],
            area: [ 1, "<map>", "</map>" ],
            param: [ 1, "<object>", "</object>" ],
            thead: [ 1, "<table>", "</table>" ],
            tr: [ 2, "<table><tbody>", "</tbody></table>" ],
            col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
            td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
            _default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
        }, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement("div"));
        wrapMap.optgroup = wrapMap.option;
        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
        wrapMap.th = wrapMap.td;
        jQuery.fn.extend({
            text: function(value) {
                return jQuery.access(this, function(value) {
                    return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
                }, null, value, arguments.length);
            },
            wrapAll: function(html) {
                if (jQuery.isFunction(html)) {
                    return this.each(function(i) {
                        jQuery(this).wrapAll(html.call(this, i));
                    });
                }
                if (this[0]) {
                    var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                    if (this[0].parentNode) {
                        wrap.insertBefore(this[0]);
                    }
                    wrap.map(function() {
                        var elem = this;
                        while (elem.firstChild && elem.firstChild.nodeType === 1) {
                            elem = elem.firstChild;
                        }
                        return elem;
                    }).append(this);
                }
                return this;
            },
            wrapInner: function(html) {
                if (jQuery.isFunction(html)) {
                    return this.each(function(i) {
                        jQuery(this).wrapInner(html.call(this, i));
                    });
                }
                return this.each(function() {
                    var self = jQuery(this), contents = self.contents();
                    if (contents.length) {
                        contents.wrapAll(html);
                    } else {
                        self.append(html);
                    }
                });
            },
            wrap: function(html) {
                var isFunction = jQuery.isFunction(html);
                return this.each(function(i) {
                    jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
                });
            },
            unwrap: function() {
                return this.parent().each(function() {
                    if (!jQuery.nodeName(this, "body")) {
                        jQuery(this).replaceWith(this.childNodes);
                    }
                }).end();
            },
            append: function() {
                return this.domManip(arguments, true, function(elem) {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.appendChild(elem);
                    }
                });
            },
            prepend: function() {
                return this.domManip(arguments, true, function(elem) {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.insertBefore(elem, this.firstChild);
                    }
                });
            },
            before: function() {
                return this.domManip(arguments, false, function(elem) {
                    if (this.parentNode) {
                        this.parentNode.insertBefore(elem, this);
                    }
                });
            },
            after: function() {
                return this.domManip(arguments, false, function(elem) {
                    if (this.parentNode) {
                        this.parentNode.insertBefore(elem, this.nextSibling);
                    }
                });
            },
            remove: function(selector, keepData) {
                var elem, i = 0;
                for (;(elem = this[i]) != null; i++) {
                    if (!selector || jQuery.filter(selector, [ elem ]).length > 0) {
                        if (!keepData && elem.nodeType === 1) {
                            jQuery.cleanData(getAll(elem));
                        }
                        if (elem.parentNode) {
                            if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                                setGlobalEval(getAll(elem, "script"));
                            }
                            elem.parentNode.removeChild(elem);
                        }
                    }
                }
                return this;
            },
            empty: function() {
                var elem, i = 0;
                for (;(elem = this[i]) != null; i++) {
                    if (elem.nodeType === 1) {
                        jQuery.cleanData(getAll(elem, false));
                    }
                    while (elem.firstChild) {
                        elem.removeChild(elem.firstChild);
                    }
                    if (elem.options && jQuery.nodeName(elem, "select")) {
                        elem.options.length = 0;
                    }
                }
                return this;
            },
            clone: function(dataAndEvents, deepDataAndEvents) {
                dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
                return this.map(function() {
                    return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
                });
            },
            html: function(value) {
                return jQuery.access(this, function(value) {
                    var elem = this[0] || {}, i = 0, l = this.length;
                    if (value === undefined) {
                        return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;
                    }
                    if (typeof value === "string" && !rnoInnerhtml.test(value) && (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                        value = value.replace(rxhtmlTag, "<$1></$2>");
                        try {
                            for (;i < l; i++) {
                                elem = this[i] || {};
                                if (elem.nodeType === 1) {
                                    jQuery.cleanData(getAll(elem, false));
                                    elem.innerHTML = value;
                                }
                            }
                            elem = 0;
                        } catch (e) {}
                    }
                    if (elem) {
                        this.empty().append(value);
                    }
                }, null, value, arguments.length);
            },
            replaceWith: function(value) {
                var isFunc = jQuery.isFunction(value);
                if (!isFunc && typeof value !== "string") {
                    value = jQuery(value).not(this).detach();
                }
                return this.domManip([ value ], true, function(elem) {
                    var next = this.nextSibling, parent = this.parentNode;
                    if (parent) {
                        jQuery(this).remove();
                        parent.insertBefore(elem, next);
                    }
                });
            },
            detach: function(selector) {
                return this.remove(selector, true);
            },
            domManip: function(args, table, callback) {
                args = core_concat.apply([], args);
                var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
                if (isFunction || !(l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test(value))) {
                    return this.each(function(index) {
                        var self = set.eq(index);
                        if (isFunction) {
                            args[0] = value.call(this, index, table ? self.html() : undefined);
                        }
                        self.domManip(args, table, callback);
                    });
                }
                if (l) {
                    fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                    first = fragment.firstChild;
                    if (fragment.childNodes.length === 1) {
                        fragment = first;
                    }
                    if (first) {
                        table = table && jQuery.nodeName(first, "tr");
                        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                        hasScripts = scripts.length;
                        for (;i < l; i++) {
                            node = fragment;
                            if (i !== iNoClone) {
                                node = jQuery.clone(node, true, true);
                                if (hasScripts) {
                                    jQuery.merge(scripts, getAll(node, "script"));
                                }
                            }
                            callback.call(table && jQuery.nodeName(this[i], "table") ? findOrAppend(this[i], "tbody") : this[i], node, i);
                        }
                        if (hasScripts) {
                            doc = scripts[scripts.length - 1].ownerDocument;
                            jQuery.map(scripts, restoreScript);
                            for (i = 0; i < hasScripts; i++) {
                                node = scripts[i];
                                if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {
                                    if (node.src) {
                                        jQuery.ajax({
                                            url: node.src,
                                            type: "GET",
                                            dataType: "script",
                                            async: false,
                                            global: false,
                                            "throws": true
                                        });
                                    } else {
                                        jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
                                    }
                                }
                            }
                        }
                        fragment = first = null;
                    }
                }
                return this;
            }
        });
        function findOrAppend(elem, tag) {
            return elem.getElementsByTagName(tag)[0] || elem.appendChild(elem.ownerDocument.createElement(tag));
        }
        function disableScript(elem) {
            var attr = elem.getAttributeNode("type");
            elem.type = (attr && attr.specified) + "/" + elem.type;
            return elem;
        }
        function restoreScript(elem) {
            var match = rscriptTypeMasked.exec(elem.type);
            if (match) {
                elem.type = match[1];
            } else {
                elem.removeAttribute("type");
            }
            return elem;
        }
        function setGlobalEval(elems, refElements) {
            var elem, i = 0;
            for (;(elem = elems[i]) != null; i++) {
                jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
            }
        }
        function cloneCopyEvent(src, dest) {
            if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
                return;
            }
            var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
            if (events) {
                delete curData.handle;
                curData.events = {};
                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
            if (curData.data) {
                curData.data = jQuery.extend({}, curData.data);
            }
        }
        function fixCloneNodeIssues(src, dest) {
            var nodeName, e, data;
            if (dest.nodeType !== 1) {
                return;
            }
            nodeName = dest.nodeName.toLowerCase();
            if (!jQuery.support.noCloneEvent && dest[jQuery.expando]) {
                data = jQuery._data(dest);
                for (e in data.events) {
                    jQuery.removeEvent(dest, e, data.handle);
                }
                dest.removeAttribute(jQuery.expando);
            }
            if (nodeName === "script" && dest.text !== src.text) {
                disableScript(dest).text = src.text;
                restoreScript(dest);
            } else if (nodeName === "object") {
                if (dest.parentNode) {
                    dest.outerHTML = src.outerHTML;
                }
                if (jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
                    dest.innerHTML = src.innerHTML;
                }
            } else if (nodeName === "input" && manipulation_rcheckableType.test(src.type)) {
                dest.defaultChecked = dest.checked = src.checked;
                if (dest.value !== src.value) {
                    dest.value = src.value;
                }
            } else if (nodeName === "option") {
                dest.defaultSelected = dest.selected = src.defaultSelected;
            } else if (nodeName === "input" || nodeName === "textarea") {
                dest.defaultValue = src.defaultValue;
            }
        }
        jQuery.each({
            appendTo: "append",
            prependTo: "prepend",
            insertBefore: "before",
            insertAfter: "after",
            replaceAll: "replaceWith"
        }, function(name, original) {
            jQuery.fn[name] = function(selector) {
                var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1;
                for (;i <= last; i++) {
                    elems = i === last ? this : this.clone(true);
                    jQuery(insert[i])[original](elems);
                    core_push.apply(ret, elems.get());
                }
                return this.pushStack(ret);
            };
        });
        function getAll(context, tag) {
            var elems, elem, i = 0, found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll(tag || "*") : undefined;
            if (!found) {
                for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
                    if (!tag || jQuery.nodeName(elem, tag)) {
                        found.push(elem);
                    } else {
                        jQuery.merge(found, getAll(elem, tag));
                    }
                }
            }
            return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([ context ], found) : found;
        }
        function fixDefaultChecked(elem) {
            if (manipulation_rcheckableType.test(elem.type)) {
                elem.defaultChecked = elem.checked;
            }
        }
        jQuery.extend({
            clone: function(elem, dataAndEvents, deepDataAndEvents) {
                var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
                if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
                    clone = elem.cloneNode(true);
                } else {
                    fragmentDiv.innerHTML = elem.outerHTML;
                    fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
                }
                if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                    destElements = getAll(clone);
                    srcElements = getAll(elem);
                    for (i = 0; (node = srcElements[i]) != null; ++i) {
                        if (destElements[i]) {
                            fixCloneNodeIssues(node, destElements[i]);
                        }
                    }
                }
                if (dataAndEvents) {
                    if (deepDataAndEvents) {
                        srcElements = srcElements || getAll(elem);
                        destElements = destElements || getAll(clone);
                        for (i = 0; (node = srcElements[i]) != null; i++) {
                            cloneCopyEvent(node, destElements[i]);
                        }
                    } else {
                        cloneCopyEvent(elem, clone);
                    }
                }
                destElements = getAll(clone, "script");
                if (destElements.length > 0) {
                    setGlobalEval(destElements, !inPage && getAll(elem, "script"));
                }
                destElements = srcElements = node = null;
                return clone;
            },
            buildFragment: function(elems, context, scripts, selection) {
                var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, safe = createSafeFragment(context), nodes = [], i = 0;
                for (;i < l; i++) {
                    elem = elems[i];
                    if (elem || elem === 0) {
                        if (jQuery.type(elem) === "object") {
                            jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem);
                        } else if (!rhtml.test(elem)) {
                            nodes.push(context.createTextNode(elem));
                        } else {
                            tmp = tmp || safe.appendChild(context.createElement("div"));
                            tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                            wrap = wrapMap[tag] || wrapMap._default;
                            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                            j = wrap[0];
                            while (j--) {
                                tmp = tmp.lastChild;
                            }
                            if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                                nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                            }
                            if (!jQuery.support.tbody) {
                                elem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild : wrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0;
                                j = elem && elem.childNodes.length;
                                while (j--) {
                                    if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {
                                        elem.removeChild(tbody);
                                    }
                                }
                            }
                            jQuery.merge(nodes, tmp.childNodes);
                            tmp.textContent = "";
                            while (tmp.firstChild) {
                                tmp.removeChild(tmp.firstChild);
                            }
                            tmp = safe.lastChild;
                        }
                    }
                }
                if (tmp) {
                    safe.removeChild(tmp);
                }
                if (!jQuery.support.appendChecked) {
                    jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
                }
                i = 0;
                while (elem = nodes[i++]) {
                    if (selection && jQuery.inArray(elem, selection) !== -1) {
                        continue;
                    }
                    contains = jQuery.contains(elem.ownerDocument, elem);
                    tmp = getAll(safe.appendChild(elem), "script");
                    if (contains) {
                        setGlobalEval(tmp);
                    }
                    if (scripts) {
                        j = 0;
                        while (elem = tmp[j++]) {
                            if (rscriptType.test(elem.type || "")) {
                                scripts.push(elem);
                            }
                        }
                    }
                }
                tmp = null;
                return safe;
            },
            cleanData: function(elems, acceptData) {
                var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = jQuery.support.deleteExpando, special = jQuery.event.special;
                for (;(elem = elems[i]) != null; i++) {
                    if (acceptData || jQuery.acceptData(elem)) {
                        id = elem[internalKey];
                        data = id && cache[id];
                        if (data) {
                            if (data.events) {
                                for (type in data.events) {
                                    if (special[type]) {
                                        jQuery.event.remove(elem, type);
                                    } else {
                                        jQuery.removeEvent(elem, type, data.handle);
                                    }
                                }
                            }
                            if (cache[id]) {
                                delete cache[id];
                                if (deleteExpando) {
                                    delete elem[internalKey];
                                } else if (typeof elem.removeAttribute !== core_strundefined) {
                                    elem.removeAttribute(internalKey);
                                } else {
                                    elem[internalKey] = null;
                                }
                                core_deletedIds.push(id);
                            }
                        }
                    }
                }
            }
        });
        var iframe, getStyles, curCSS, ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rposition = /^(top|right|bottom|left)$/, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rmargin = /^margin/, rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"), rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"), rrelNum = new RegExp("^([+-])=(" + core_pnum + ")", "i"), elemdisplay = {
            BODY: "block"
        }, cssShow = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        }, cssNormalTransform = {
            letterSpacing: 0,
            fontWeight: 400
        }, cssExpand = [ "Top", "Right", "Bottom", "Left" ], cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
        function vendorPropName(style, name) {
            if (name in style) {
                return name;
            }
            var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
            while (i--) {
                name = cssPrefixes[i] + capName;
                if (name in style) {
                    return name;
                }
            }
            return origName;
        }
        function isHidden(elem, el) {
            elem = el || elem;
            return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
        }
        function showHide(elements, show) {
            var display, elem, hidden, values = [], index = 0, length = elements.length;
            for (;index < length; index++) {
                elem = elements[index];
                if (!elem.style) {
                    continue;
                }
                values[index] = jQuery._data(elem, "olddisplay");
                display = elem.style.display;
                if (show) {
                    if (!values[index] && display === "none") {
                        elem.style.display = "";
                    }
                    if (elem.style.display === "" && isHidden(elem)) {
                        values[index] = jQuery._data(elem, "olddisplay", css_defaultDisplay(elem.nodeName));
                    }
                } else {
                    if (!values[index]) {
                        hidden = isHidden(elem);
                        if (display && display !== "none" || !hidden) {
                            jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                        }
                    }
                }
            }
            for (index = 0; index < length; index++) {
                elem = elements[index];
                if (!elem.style) {
                    continue;
                }
                if (!show || elem.style.display === "none" || elem.style.display === "") {
                    elem.style.display = show ? values[index] || "" : "none";
                }
            }
            return elements;
        }
        jQuery.fn.extend({
            css: function(name, value) {
                return jQuery.access(this, function(elem, name, value) {
                    var len, styles, map = {}, i = 0;
                    if (jQuery.isArray(name)) {
                        styles = getStyles(elem);
                        len = name.length;
                        for (;i < len; i++) {
                            map[name[i]] = jQuery.css(elem, name[i], false, styles);
                        }
                        return map;
                    }
                    return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
                }, name, value, arguments.length > 1);
            },
            show: function() {
                return showHide(this, true);
            },
            hide: function() {
                return showHide(this);
            },
            toggle: function(state) {
                var bool = typeof state === "boolean";
                return this.each(function() {
                    if (bool ? state : isHidden(this)) {
                        jQuery(this).show();
                    } else {
                        jQuery(this).hide();
                    }
                });
            }
        });
        jQuery.extend({
            cssHooks: {
                opacity: {
                    get: function(elem, computed) {
                        if (computed) {
                            var ret = curCSS(elem, "opacity");
                            return ret === "" ? "1" : ret;
                        }
                    }
                }
            },
            cssNumber: {
                columnCount: true,
                fillOpacity: true,
                fontWeight: true,
                lineHeight: true,
                opacity: true,
                orphans: true,
                widows: true,
                zIndex: true,
                zoom: true
            },
            cssProps: {
                "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
            },
            style: function(elem, name, value, extra) {
                if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                    return;
                }
                var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
                name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                if (value !== undefined) {
                    type = typeof value;
                    if (type === "string" && (ret = rrelNum.exec(value))) {
                        value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                        type = "number";
                    }
                    if (value == null || type === "number" && isNaN(value)) {
                        return;
                    }
                    if (type === "number" && !jQuery.cssNumber[origName]) {
                        value += "px";
                    }
                    if (!jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                        style[name] = "inherit";
                    }
                    if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                        try {
                            style[name] = value;
                        } catch (e) {}
                    }
                } else {
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                        return ret;
                    }
                    return style[name];
                }
            },
            css: function(elem, name, extra, styles) {
                var num, val, hooks, origName = jQuery.camelCase(name);
                name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                if (hooks && "get" in hooks) {
                    val = hooks.get(elem, true, extra);
                }
                if (val === undefined) {
                    val = curCSS(elem, name, styles);
                }
                if (val === "normal" && name in cssNormalTransform) {
                    val = cssNormalTransform[name];
                }
                if (extra === "" || extra) {
                    num = parseFloat(val);
                    return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
                }
                return val;
            },
            swap: function(elem, options, callback, args) {
                var ret, name, old = {};
                for (name in options) {
                    old[name] = elem.style[name];
                    elem.style[name] = options[name];
                }
                ret = callback.apply(elem, args || []);
                for (name in options) {
                    elem.style[name] = old[name];
                }
                return ret;
            }
        });
        if (window.getComputedStyle) {
            getStyles = function(elem) {
                return window.getComputedStyle(elem, null);
            };
            curCSS = function(elem, name, _computed) {
                var width, minWidth, maxWidth, computed = _computed || getStyles(elem), ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined, style = elem.style;
                if (computed) {
                    if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                        ret = jQuery.style(elem, name);
                    }
                    if (rnumnonpx.test(ret) && rmargin.test(name)) {
                        width = style.width;
                        minWidth = style.minWidth;
                        maxWidth = style.maxWidth;
                        style.minWidth = style.maxWidth = style.width = ret;
                        ret = computed.width;
                        style.width = width;
                        style.minWidth = minWidth;
                        style.maxWidth = maxWidth;
                    }
                }
                return ret;
            };
        } else if (document.documentElement.currentStyle) {
            getStyles = function(elem) {
                return elem.currentStyle;
            };
            curCSS = function(elem, name, _computed) {
                var left, rs, rsLeft, computed = _computed || getStyles(elem), ret = computed ? computed[name] : undefined, style = elem.style;
                if (ret == null && style && style[name]) {
                    ret = style[name];
                }
                if (rnumnonpx.test(ret) && !rposition.test(name)) {
                    left = style.left;
                    rs = elem.runtimeStyle;
                    rsLeft = rs && rs.left;
                    if (rsLeft) {
                        rs.left = elem.currentStyle.left;
                    }
                    style.left = name === "fontSize" ? "1em" : ret;
                    ret = style.pixelLeft + "px";
                    style.left = left;
                    if (rsLeft) {
                        rs.left = rsLeft;
                    }
                }
                return ret === "" ? "auto" : ret;
            };
        }
        function setPositiveNumber(elem, value, subtract) {
            var matches = rnumsplit.exec(value);
            return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
        }
        function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
            var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0, val = 0;
            for (;i < 4; i += 2) {
                if (extra === "margin") {
                    val += jQuery.css(elem, extra + cssExpand[i], true, styles);
                }
                if (isBorderBox) {
                    if (extra === "content") {
                        val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                    }
                    if (extra !== "margin") {
                        val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                    }
                } else {
                    val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                    if (extra !== "padding") {
                        val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                    }
                }
            }
            return val;
        }
        function getWidthOrHeight(elem, name, extra) {
            var valueIsBorderBox = true, val = name === "width" ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";
            if (val <= 0 || val == null) {
                val = curCSS(elem, name, styles);
                if (val < 0 || val == null) {
                    val = elem.style[name];
                }
                if (rnumnonpx.test(val)) {
                    return val;
                }
                valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
                val = parseFloat(val) || 0;
            }
            return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
        }
        function css_defaultDisplay(nodeName) {
            var doc = document, display = elemdisplay[nodeName];
            if (!display) {
                display = actualDisplay(nodeName, doc);
                if (display === "none" || !display) {
                    iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>").css("cssText", "display:block !important")).appendTo(doc.documentElement);
                    doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                    doc.write("<!doctype html><html><body>");
                    doc.close();
                    display = actualDisplay(nodeName, doc);
                    iframe.detach();
                }
                elemdisplay[nodeName] = display;
            }
            return display;
        }
        function actualDisplay(name, doc) {
            var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = jQuery.css(elem[0], "display");
            elem.remove();
            return display;
        }
        jQuery.each([ "height", "width" ], function(i, name) {
            jQuery.cssHooks[name] = {
                get: function(elem, computed, extra) {
                    if (computed) {
                        return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, "display")) ? jQuery.swap(elem, cssShow, function() {
                            return getWidthOrHeight(elem, name, extra);
                        }) : getWidthOrHeight(elem, name, extra);
                    }
                },
                set: function(elem, value, extra) {
                    var styles = extra && getStyles(elem);
                    return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
                }
            };
        });
        if (!jQuery.support.opacity) {
            jQuery.cssHooks.opacity = {
                get: function(elem, computed) {
                    return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
                },
                set: function(elem, value) {
                    var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
                    style.zoom = 1;
                    if ((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {
                        style.removeAttribute("filter");
                        if (value === "" || currentStyle && !currentStyle.filter) {
                            return;
                        }
                    }
                    style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
                }
            };
        }
        jQuery(function() {
            if (!jQuery.support.reliableMarginRight) {
                jQuery.cssHooks.marginRight = {
                    get: function(elem, computed) {
                        if (computed) {
                            return jQuery.swap(elem, {
                                display: "inline-block"
                            }, curCSS, [ elem, "marginRight" ]);
                        }
                    }
                };
            }
            if (!jQuery.support.pixelPosition && jQuery.fn.position) {
                jQuery.each([ "top", "left" ], function(i, prop) {
                    jQuery.cssHooks[prop] = {
                        get: function(elem, computed) {
                            if (computed) {
                                computed = curCSS(elem, prop);
                                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
                            }
                        }
                    };
                });
            }
        });
        if (jQuery.expr && jQuery.expr.filters) {
            jQuery.expr.filters.hidden = function(elem) {
                return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !jQuery.support.reliableHiddenOffsets && (elem.style && elem.style.display || jQuery.css(elem, "display")) === "none";
            };
            jQuery.expr.filters.visible = function(elem) {
                return !jQuery.expr.filters.hidden(elem);
            };
        }
        jQuery.each({
            margin: "",
            padding: "",
            border: "Width"
        }, function(prefix, suffix) {
            jQuery.cssHooks[prefix + suffix] = {
                expand: function(value) {
                    var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [ value ];
                    for (;i < 4; i++) {
                        expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                    }
                    return expanded;
                }
            };
            if (!rmargin.test(prefix)) {
                jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
            }
        });
        var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
        jQuery.fn.extend({
            serialize: function() {
                return jQuery.param(this.serializeArray());
            },
            serializeArray: function() {
                return this.map(function() {
                    var elements = jQuery.prop(this, "elements");
                    return elements ? jQuery.makeArray(elements) : this;
                }).filter(function() {
                    var type = this.type;
                    return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));
                }).map(function(i, elem) {
                    var val = jQuery(this).val();
                    return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                        return {
                            name: elem.name,
                            value: val.replace(rCRLF, "\r\n")
                        };
                    }) : {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }).get();
            }
        });
        jQuery.param = function(a, traditional) {
            var prefix, s = [], add = function(key, value) {
                value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
                s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
            };
            if (traditional === undefined) {
                traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
            }
            if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
                jQuery.each(a, function() {
                    add(this.name, this.value);
                });
            } else {
                for (prefix in a) {
                    buildParams(prefix, a[prefix], traditional, add);
                }
            }
            return s.join("&").replace(r20, "+");
        };
        function buildParams(prefix, obj, traditional, add) {
            var name;
            if (jQuery.isArray(obj)) {
                jQuery.each(obj, function(i, v) {
                    if (traditional || rbracket.test(prefix)) {
                        add(prefix, v);
                    } else {
                        buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
                    }
                });
            } else if (!traditional && jQuery.type(obj) === "object") {
                for (name in obj) {
                    buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
                }
            } else {
                add(prefix, obj);
            }
        }
        jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
            jQuery.fn[name] = function(data, fn) {
                return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
            };
        });
        jQuery.fn.hover = function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        };
        var ajaxLocParts, ajaxLocation, ajax_nonce = jQuery.now(), ajax_rquery = /\?/, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, _load = jQuery.fn.load, prefilters = {}, transports = {}, allTypes = "*/".concat("*");
        try {
            ajaxLocation = location.href;
        } catch (e) {
            ajaxLocation = document.createElement("a");
            ajaxLocation.href = "";
            ajaxLocation = ajaxLocation.href;
        }
        ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
        function addToPrefiltersOrTransports(structure) {
            return function(dataTypeExpression, func) {
                if (typeof dataTypeExpression !== "string") {
                    func = dataTypeExpression;
                    dataTypeExpression = "*";
                }
                var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];
                if (jQuery.isFunction(func)) {
                    while (dataType = dataTypes[i++]) {
                        if (dataType[0] === "+") {
                            dataType = dataType.slice(1) || "*";
                            (structure[dataType] = structure[dataType] || []).unshift(func);
                        } else {
                            (structure[dataType] = structure[dataType] || []).push(func);
                        }
                    }
                }
            };
        }
        function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
            var inspected = {}, seekingTransport = structure === transports;
            function inspect(dataType) {
                var selected;
                inspected[dataType] = true;
                jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                    var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                    if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                        options.dataTypes.unshift(dataTypeOrTransport);
                        inspect(dataTypeOrTransport);
                        return false;
                    } else if (seekingTransport) {
                        return !(selected = dataTypeOrTransport);
                    }
                });
                return selected;
            }
            return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
        }
        function ajaxExtend(target, src) {
            var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
            for (key in src) {
                if (src[key] !== undefined) {
                    (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
                }
            }
            if (deep) {
                jQuery.extend(true, target, deep);
            }
            return target;
        }
        jQuery.fn.load = function(url, params, callback) {
            if (typeof url !== "string" && _load) {
                return _load.apply(this, arguments);
            }
            var selector, response, type, self = this, off = url.indexOf(" ");
            if (off >= 0) {
                selector = url.slice(off, url.length);
                url = url.slice(0, off);
            }
            if (jQuery.isFunction(params)) {
                callback = params;
                params = undefined;
            } else if (params && typeof params === "object") {
                type = "POST";
            }
            if (self.length > 0) {
                jQuery.ajax({
                    url: url,
                    type: type,
                    dataType: "html",
                    data: params
                }).done(function(responseText) {
                    response = arguments;
                    self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
                }).complete(callback && function(jqXHR, status) {
                    self.each(callback, response || [ jqXHR.responseText, status, jqXHR ]);
                });
            }
            return this;
        };
        jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
            jQuery.fn[type] = function(fn) {
                return this.on(type, fn);
            };
        });
        jQuery.each([ "get", "post" ], function(i, method) {
            jQuery[method] = function(url, data, callback, type) {
                if (jQuery.isFunction(data)) {
                    type = type || callback;
                    callback = data;
                    data = undefined;
                }
                return jQuery.ajax({
                    url: url,
                    type: method,
                    dataType: type,
                    data: data,
                    success: callback
                });
            };
        });
        jQuery.extend({
            active: 0,
            lastModified: {},
            etag: {},
            ajaxSettings: {
                url: ajaxLocation,
                type: "GET",
                isLocal: rlocalProtocol.test(ajaxLocParts[1]),
                global: true,
                processData: true,
                async: true,
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                accepts: {
                    "*": allTypes,
                    text: "text/plain",
                    html: "text/html",
                    xml: "application/xml, text/xml",
                    json: "application/json, text/javascript"
                },
                contents: {
                    xml: /xml/,
                    html: /html/,
                    json: /json/
                },
                responseFields: {
                    xml: "responseXML",
                    text: "responseText"
                },
                converters: {
                    "* text": window.String,
                    "text html": true,
                    "text json": jQuery.parseJSON,
                    "text xml": jQuery.parseXML
                },
                flatOptions: {
                    url: true,
                    context: true
                }
            },
            ajaxSetup: function(target, settings) {
                return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
            },
            ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
            ajaxTransport: addToPrefiltersOrTransports(transports),
            ajax: function(url, options) {
                if (typeof url === "object") {
                    options = url;
                    url = undefined;
                }
                options = options || {};
                var parts, i, cacheURL, responseHeadersString, timeoutTimer, fireGlobals, transport, responseHeaders, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                    readyState: 0,
                    getResponseHeader: function(key) {
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while (match = rheaders.exec(responseHeadersString)) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match == null ? null : match;
                    },
                    getAllResponseHeaders: function() {
                        return state === 2 ? responseHeadersString : null;
                    },
                    setRequestHeader: function(name, value) {
                        var lname = name.toLowerCase();
                        if (!state) {
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },
                    overrideMimeType: function(type) {
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },
                    statusCode: function(map) {
                        var code;
                        if (map) {
                            if (state < 2) {
                                for (code in map) {
                                    statusCode[code] = [ statusCode[code], map[code] ];
                                }
                            } else {
                                jqXHR.always(map[jqXHR.status]);
                            }
                        }
                        return this;
                    },
                    abort: function(statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };
                deferred.promise(jqXHR).complete = completeDeferred.add;
                jqXHR.success = jqXHR.done;
                jqXHR.error = jqXHR.fail;
                s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
                s.type = options.method || options.type || s.method || s.type;
                s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(core_rnotwhite) || [ "" ];
                if (s.crossDomain == null) {
                    parts = rurl.exec(s.url.toLowerCase());
                    s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))));
                }
                if (s.data && s.processData && typeof s.data !== "string") {
                    s.data = jQuery.param(s.data, s.traditional);
                }
                inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
                if (state === 2) {
                    return jqXHR;
                }
                fireGlobals = s.global;
                if (fireGlobals && jQuery.active++ === 0) {
                    jQuery.event.trigger("ajaxStart");
                }
                s.type = s.type.toUpperCase();
                s.hasContent = !rnoContent.test(s.type);
                cacheURL = s.url;
                if (!s.hasContent) {
                    if (s.data) {
                        cacheURL = s.url += (ajax_rquery.test(cacheURL) ? "&" : "?") + s.data;
                        delete s.data;
                    }
                    if (s.cache === false) {
                        s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + ajax_nonce++) : cacheURL + (ajax_rquery.test(cacheURL) ? "&" : "?") + "_=" + ajax_nonce++;
                    }
                }
                if (s.ifModified) {
                    if (jQuery.lastModified[cacheURL]) {
                        jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                    }
                    if (jQuery.etag[cacheURL]) {
                        jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                    }
                }
                if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                    jqXHR.setRequestHeader("Content-Type", s.contentType);
                }
                jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
                for (i in s.headers) {
                    jqXHR.setRequestHeader(i, s.headers[i]);
                }
                if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                    return jqXHR.abort();
                }
                strAbort = "abort";
                for (i in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) {
                    jqXHR[i](s[i]);
                }
                transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
                if (!transport) {
                    done(-1, "No Transport");
                } else {
                    jqXHR.readyState = 1;
                    if (fireGlobals) {
                        globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                    }
                    if (s.async && s.timeout > 0) {
                        timeoutTimer = setTimeout(function() {
                            jqXHR.abort("timeout");
                        }, s.timeout);
                    }
                    try {
                        state = 1;
                        transport.send(requestHeaders, done);
                    } catch (e) {
                        if (state < 2) {
                            done(-1, e);
                        } else {
                            throw e;
                        }
                    }
                }
                function done(status, nativeStatusText, responses, headers) {
                    var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                    if (state === 2) {
                        return;
                    }
                    state = 2;
                    if (timeoutTimer) {
                        clearTimeout(timeoutTimer);
                    }
                    transport = undefined;
                    responseHeadersString = headers || "";
                    jqXHR.readyState = status > 0 ? 4 : 0;
                    if (responses) {
                        response = ajaxHandleResponses(s, jqXHR, responses);
                    }
                    if (status >= 200 && status < 300 || status === 304) {
                        if (s.ifModified) {
                            modified = jqXHR.getResponseHeader("Last-Modified");
                            if (modified) {
                                jQuery.lastModified[cacheURL] = modified;
                            }
                            modified = jqXHR.getResponseHeader("etag");
                            if (modified) {
                                jQuery.etag[cacheURL] = modified;
                            }
                        }
                        if (status === 204) {
                            isSuccess = true;
                            statusText = "nocontent";
                        } else if (status === 304) {
                            isSuccess = true;
                            statusText = "notmodified";
                        } else {
                            isSuccess = ajaxConvert(s, response);
                            statusText = isSuccess.state;
                            success = isSuccess.data;
                            error = isSuccess.error;
                            isSuccess = !error;
                        }
                    } else {
                        error = statusText;
                        if (status || !statusText) {
                            statusText = "error";
                            if (status < 0) {
                                status = 0;
                            }
                        }
                    }
                    jqXHR.status = status;
                    jqXHR.statusText = (nativeStatusText || statusText) + "";
                    if (isSuccess) {
                        deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]);
                    } else {
                        deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                    }
                    jqXHR.statusCode(statusCode);
                    statusCode = undefined;
                    if (fireGlobals) {
                        globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                    }
                    completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                    if (fireGlobals) {
                        globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                        if (!--jQuery.active) {
                            jQuery.event.trigger("ajaxStop");
                        }
                    }
                }
                return jqXHR;
            },
            getScript: function(url, callback) {
                return jQuery.get(url, undefined, callback, "script");
            },
            getJSON: function(url, data, callback) {
                return jQuery.get(url, data, callback, "json");
            }
        });
        function ajaxHandleResponses(s, jqXHR, responses) {
            var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes, responseFields = s.responseFields;
            for (type in responseFields) {
                if (type in responses) {
                    jqXHR[responseFields[type]] = responses[type];
                }
            }
            while (dataTypes[0] === "*") {
                dataTypes.shift();
                if (ct === undefined) {
                    ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
                }
            }
            if (ct) {
                for (type in contents) {
                    if (contents[type] && contents[type].test(ct)) {
                        dataTypes.unshift(type);
                        break;
                    }
                }
            }
            if (dataTypes[0] in responses) {
                finalDataType = dataTypes[0];
            } else {
                for (type in responses) {
                    if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                        finalDataType = type;
                        break;
                    }
                    if (!firstDataType) {
                        firstDataType = type;
                    }
                }
                finalDataType = finalDataType || firstDataType;
            }
            if (finalDataType) {
                if (finalDataType !== dataTypes[0]) {
                    dataTypes.unshift(finalDataType);
                }
                return responses[finalDataType];
            }
        }
        function ajaxConvert(s, response) {
            var conv2, current, conv, tmp, converters = {}, i = 0, dataTypes = s.dataTypes.slice(), prev = dataTypes[0];
            if (s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            if (dataTypes[1]) {
                for (conv in s.converters) {
                    converters[conv.toLowerCase()] = s.converters[conv];
                }
            }
            for (;current = dataTypes[++i]; ) {
                if (current !== "*") {
                    if (prev !== "*" && prev !== current) {
                        conv = converters[prev + " " + current] || converters["* " + current];
                        if (!conv) {
                            for (conv2 in converters) {
                                tmp = conv2.split(" ");
                                if (tmp[1] === current) {
                                    conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                    if (conv) {
                                        if (conv === true) {
                                            conv = converters[conv2];
                                        } else if (converters[conv2] !== true) {
                                            current = tmp[0];
                                            dataTypes.splice(i--, 0, current);
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        if (conv !== true) {
                            if (conv && s["throws"]) {
                                response = conv(response);
                            } else {
                                try {
                                    response = conv(response);
                                } catch (e) {
                                    return {
                                        state: "parsererror",
                                        error: conv ? e : "No conversion from " + prev + " to " + current
                                    };
                                }
                            }
                        }
                    }
                    prev = current;
                }
            }
            return {
                state: "success",
                data: response
            };
        }
        jQuery.ajaxSetup({
            accepts: {
                script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
            },
            contents: {
                script: /(?:java|ecma)script/
            },
            converters: {
                "text script": function(text) {
                    jQuery.globalEval(text);
                    return text;
                }
            }
        });
        jQuery.ajaxPrefilter("script", function(s) {
            if (s.cache === undefined) {
                s.cache = false;
            }
            if (s.crossDomain) {
                s.type = "GET";
                s.global = false;
            }
        });
        jQuery.ajaxTransport("script", function(s) {
            if (s.crossDomain) {
                var script, head = document.head || jQuery("head")[0] || document.documentElement;
                return {
                    send: function(_, callback) {
                        script = document.createElement("script");
                        script.async = true;
                        if (s.scriptCharset) {
                            script.charset = s.scriptCharset;
                        }
                        script.src = s.url;
                        script.onload = script.onreadystatechange = function(_, isAbort) {
                            if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                                script.onload = script.onreadystatechange = null;
                                if (script.parentNode) {
                                    script.parentNode.removeChild(script);
                                }
                                script = null;
                                if (!isAbort) {
                                    callback(200, "success");
                                }
                            }
                        };
                        head.insertBefore(script, head.firstChild);
                    },
                    abort: function() {
                        if (script) {
                            script.onload(undefined, true);
                        }
                    }
                };
            }
        });
        var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
        jQuery.ajaxSetup({
            jsonp: "callback",
            jsonpCallback: function() {
                var callback = oldCallbacks.pop() || jQuery.expando + "_" + ajax_nonce++;
                this[callback] = true;
                return callback;
            }
        });
        jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
            var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
            if (jsonProp || s.dataTypes[0] === "jsonp") {
                callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
                if (jsonProp) {
                    s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
                } else if (s.jsonp !== false) {
                    s.url += (ajax_rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
                }
                s.converters["script json"] = function() {
                    if (!responseContainer) {
                        jQuery.error(callbackName + " was not called");
                    }
                    return responseContainer[0];
                };
                s.dataTypes[0] = "json";
                overwritten = window[callbackName];
                window[callbackName] = function() {
                    responseContainer = arguments;
                };
                jqXHR.always(function() {
                    window[callbackName] = overwritten;
                    if (s[callbackName]) {
                        s.jsonpCallback = originalSettings.jsonpCallback;
                        oldCallbacks.push(callbackName);
                    }
                    if (responseContainer && jQuery.isFunction(overwritten)) {
                        overwritten(responseContainer[0]);
                    }
                    responseContainer = overwritten = undefined;
                });
                return "script";
            }
        });
        var xhrCallbacks, xhrSupported, xhrId = 0, xhrOnUnloadAbort = window.ActiveXObject && function() {
            var key;
            for (key in xhrCallbacks) {
                xhrCallbacks[key](undefined, true);
            }
        };
        function createStandardXHR() {
            try {
                return new window.XMLHttpRequest();
            } catch (e) {}
        }
        function createActiveXHR() {
            try {
                return new window.ActiveXObject("Microsoft.XMLHTTP");
            } catch (e) {}
        }
        jQuery.ajaxSettings.xhr = window.ActiveXObject ? function() {
            return !this.isLocal && createStandardXHR() || createActiveXHR();
        } : createStandardXHR;
        xhrSupported = jQuery.ajaxSettings.xhr();
        jQuery.support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
        xhrSupported = jQuery.support.ajax = !!xhrSupported;
        if (xhrSupported) {
            jQuery.ajaxTransport(function(s) {
                if (!s.crossDomain || jQuery.support.cors) {
                    var callback;
                    return {
                        send: function(headers, complete) {
                            var handle, i, xhr = s.xhr();
                            if (s.username) {
                                xhr.open(s.type, s.url, s.async, s.username, s.password);
                            } else {
                                xhr.open(s.type, s.url, s.async);
                            }
                            if (s.xhrFields) {
                                for (i in s.xhrFields) {
                                    xhr[i] = s.xhrFields[i];
                                }
                            }
                            if (s.mimeType && xhr.overrideMimeType) {
                                xhr.overrideMimeType(s.mimeType);
                            }
                            if (!s.crossDomain && !headers["X-Requested-With"]) {
                                headers["X-Requested-With"] = "XMLHttpRequest";
                            }
                            try {
                                for (i in headers) {
                                    xhr.setRequestHeader(i, headers[i]);
                                }
                            } catch (err) {}
                            xhr.send(s.hasContent && s.data || null);
                            callback = function(_, isAbort) {
                                var status, responseHeaders, statusText, responses;
                                try {
                                    if (callback && (isAbort || xhr.readyState === 4)) {
                                        callback = undefined;
                                        if (handle) {
                                            xhr.onreadystatechange = jQuery.noop;
                                            if (xhrOnUnloadAbort) {
                                                delete xhrCallbacks[handle];
                                            }
                                        }
                                        if (isAbort) {
                                            if (xhr.readyState !== 4) {
                                                xhr.abort();
                                            }
                                        } else {
                                            responses = {};
                                            status = xhr.status;
                                            responseHeaders = xhr.getAllResponseHeaders();
                                            if (typeof xhr.responseText === "string") {
                                                responses.text = xhr.responseText;
                                            }
                                            try {
                                                statusText = xhr.statusText;
                                            } catch (e) {
                                                statusText = "";
                                            }
                                            if (!status && s.isLocal && !s.crossDomain) {
                                                status = responses.text ? 200 : 404;
                                            } else if (status === 1223) {
                                                status = 204;
                                            }
                                        }
                                    }
                                } catch (firefoxAccessException) {
                                    if (!isAbort) {
                                        complete(-1, firefoxAccessException);
                                    }
                                }
                                if (responses) {
                                    complete(status, statusText, responses, responseHeaders);
                                }
                            };
                            if (!s.async) {
                                callback();
                            } else if (xhr.readyState === 4) {
                                setTimeout(callback);
                            } else {
                                handle = ++xhrId;
                                if (xhrOnUnloadAbort) {
                                    if (!xhrCallbacks) {
                                        xhrCallbacks = {};
                                        jQuery(window).unload(xhrOnUnloadAbort);
                                    }
                                    xhrCallbacks[handle] = callback;
                                }
                                xhr.onreadystatechange = callback;
                            }
                        },
                        abort: function() {
                            if (callback) {
                                callback(undefined, true);
                            }
                        }
                    };
                }
            });
        }
        var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [ defaultPrefilter ], tweeners = {
            "*": [ function(prop, value) {
                var end, unit, tween = this.createTween(prop, value), parts = rfxnum.exec(value), target = tween.cur(), start = +target || 0, scale = 1, maxIterations = 20;
                if (parts) {
                    end = +parts[2];
                    unit = parts[3] || (jQuery.cssNumber[prop] ? "" : "px");
                    if (unit !== "px" && start) {
                        start = jQuery.css(tween.elem, prop, true) || end || 1;
                        do {
                            scale = scale || ".5";
                            start = start / scale;
                            jQuery.style(tween.elem, prop, start + unit);
                        } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
                    }
                    tween.unit = unit;
                    tween.start = start;
                    tween.end = parts[1] ? start + (parts[1] + 1) * end : end;
                }
                return tween;
            } ]
        };
        function createFxNow() {
            setTimeout(function() {
                fxNow = undefined;
            });
            return fxNow = jQuery.now();
        }
        function createTweens(animation, props) {
            jQuery.each(props, function(prop, value) {
                var collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length;
                for (;index < length; index++) {
                    if (collection[index].call(animation, prop, value)) {
                        return;
                    }
                }
            });
        }
        function Animation(elem, properties, options) {
            var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
                delete tick.elem;
            }), tick = function() {
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
                for (;index < length; index++) {
                    animation.tweens[index].run(percent);
                }
                deferred.notifyWith(elem, [ animation, percent, remaining ]);
                if (percent < 1 && length) {
                    return remaining;
                } else {
                    deferred.resolveWith(elem, [ animation ]);
                    return false;
                }
            }, animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {}
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function(prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function(gotoEnd) {
                    var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (;index < length; index++) {
                        animation.tweens[index].run(1);
                    }
                    if (gotoEnd) {
                        deferred.resolveWith(elem, [ animation, gotoEnd ]);
                    } else {
                        deferred.rejectWith(elem, [ animation, gotoEnd ]);
                    }
                    return this;
                }
            }), props = animation.props;
            propFilter(props, animation.opts.specialEasing);
            for (;index < length; index++) {
                result = animationPrefilters[index].call(animation, elem, props, animation.opts);
                if (result) {
                    return result;
                }
            }
            createTweens(animation, props);
            if (jQuery.isFunction(animation.opts.start)) {
                animation.opts.start.call(elem, animation);
            }
            jQuery.fx.timer(jQuery.extend(tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
            }));
            return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        }
        function propFilter(props, specialEasing) {
            var value, name, index, easing, hooks;
            for (index in props) {
                name = jQuery.camelCase(index);
                easing = specialEasing[name];
                value = props[index];
                if (jQuery.isArray(value)) {
                    easing = value[1];
                    value = props[index] = value[0];
                }
                if (index !== name) {
                    props[name] = value;
                    delete props[index];
                }
                hooks = jQuery.cssHooks[name];
                if (hooks && "expand" in hooks) {
                    value = hooks.expand(value);
                    delete props[name];
                    for (index in value) {
                        if (!(index in props)) {
                            props[index] = value[index];
                            specialEasing[index] = easing;
                        }
                    }
                } else {
                    specialEasing[name] = easing;
                }
            }
        }
        jQuery.Animation = jQuery.extend(Animation, {
            tweener: function(props, callback) {
                if (jQuery.isFunction(props)) {
                    callback = props;
                    props = [ "*" ];
                } else {
                    props = props.split(" ");
                }
                var prop, index = 0, length = props.length;
                for (;index < length; index++) {
                    prop = props[index];
                    tweeners[prop] = tweeners[prop] || [];
                    tweeners[prop].unshift(callback);
                }
            },
            prefilter: function(callback, prepend) {
                if (prepend) {
                    animationPrefilters.unshift(callback);
                } else {
                    animationPrefilters.push(callback);
                }
            }
        });
        function defaultPrefilter(elem, props, opts) {
            var prop, index, length, value, dataShow, toggle, tween, hooks, oldfire, anim = this, style = elem.style, orig = {}, handled = [], hidden = elem.nodeType && isHidden(elem);
            if (!opts.queue) {
                hooks = jQuery._queueHooks(elem, "fx");
                if (hooks.unqueued == null) {
                    hooks.unqueued = 0;
                    oldfire = hooks.empty.fire;
                    hooks.empty.fire = function() {
                        if (!hooks.unqueued) {
                            oldfire();
                        }
                    };
                }
                hooks.unqueued++;
                anim.always(function() {
                    anim.always(function() {
                        hooks.unqueued--;
                        if (!jQuery.queue(elem, "fx").length) {
                            hooks.empty.fire();
                        }
                    });
                });
            }
            if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
                opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
                if (jQuery.css(elem, "display") === "inline" && jQuery.css(elem, "float") === "none") {
                    if (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === "inline") {
                        style.display = "inline-block";
                    } else {
                        style.zoom = 1;
                    }
                }
            }
            if (opts.overflow) {
                style.overflow = "hidden";
                if (!jQuery.support.shrinkWrapBlocks) {
                    anim.always(function() {
                        style.overflow = opts.overflow[0];
                        style.overflowX = opts.overflow[1];
                        style.overflowY = opts.overflow[2];
                    });
                }
            }
            for (index in props) {
                value = props[index];
                if (rfxtypes.exec(value)) {
                    delete props[index];
                    toggle = toggle || value === "toggle";
                    if (value === (hidden ? "hide" : "show")) {
                        continue;
                    }
                    handled.push(index);
                }
            }
            length = handled.length;
            if (length) {
                dataShow = jQuery._data(elem, "fxshow") || jQuery._data(elem, "fxshow", {});
                if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                }
                if (toggle) {
                    dataShow.hidden = !hidden;
                }
                if (hidden) {
                    jQuery(elem).show();
                } else {
                    anim.done(function() {
                        jQuery(elem).hide();
                    });
                }
                anim.done(function() {
                    var prop;
                    jQuery._removeData(elem, "fxshow");
                    for (prop in orig) {
                        jQuery.style(elem, prop, orig[prop]);
                    }
                });
                for (index = 0; index < length; index++) {
                    prop = handled[index];
                    tween = anim.createTween(prop, hidden ? dataShow[prop] : 0);
                    orig[prop] = dataShow[prop] || jQuery.style(elem, prop);
                    if (!(prop in dataShow)) {
                        dataShow[prop] = tween.start;
                        if (hidden) {
                            tween.end = tween.start;
                            tween.start = prop === "width" || prop === "height" ? 1 : 0;
                        }
                    }
                }
            }
        }
        function Tween(elem, options, prop, end, easing) {
            return new Tween.prototype.init(elem, options, prop, end, easing);
        }
        jQuery.Tween = Tween;
        Tween.prototype = {
            constructor: Tween,
            init: function(elem, options, prop, end, easing, unit) {
                this.elem = elem;
                this.prop = prop;
                this.easing = easing || "swing";
                this.options = options;
                this.start = this.now = this.cur();
                this.end = end;
                this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
            },
            cur: function() {
                var hooks = Tween.propHooks[this.prop];
                return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
            },
            run: function(percent) {
                var eased, hooks = Tween.propHooks[this.prop];
                if (this.options.duration) {
                    this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
                } else {
                    this.pos = eased = percent;
                }
                this.now = (this.end - this.start) * eased + this.start;
                if (this.options.step) {
                    this.options.step.call(this.elem, this.now, this);
                }
                if (hooks && hooks.set) {
                    hooks.set(this);
                } else {
                    Tween.propHooks._default.set(this);
                }
                return this;
            }
        };
        Tween.prototype.init.prototype = Tween.prototype;
        Tween.propHooks = {
            _default: {
                get: function(tween) {
                    var result;
                    if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                        return tween.elem[tween.prop];
                    }
                    result = jQuery.css(tween.elem, tween.prop, "");
                    return !result || result === "auto" ? 0 : result;
                },
                set: function(tween) {
                    if (jQuery.fx.step[tween.prop]) {
                        jQuery.fx.step[tween.prop](tween);
                    } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                        jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                    } else {
                        tween.elem[tween.prop] = tween.now;
                    }
                }
            }
        };
        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
            set: function(tween) {
                if (tween.elem.nodeType && tween.elem.parentNode) {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        };
        jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
            var cssFn = jQuery.fn[name];
            jQuery.fn[name] = function(speed, easing, callback) {
                return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
            };
        });
        jQuery.fn.extend({
            fadeTo: function(speed, to, easing, callback) {
                return this.filter(isHidden).css("opacity", 0).show().end().animate({
                    opacity: to
                }, speed, easing, callback);
            },
            animate: function(prop, speed, easing, callback) {
                var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    doAnimation.finish = function() {
                        anim.stop(true);
                    };
                    if (empty || jQuery._data(this, "finish")) {
                        anim.stop(true);
                    }
                };
                doAnimation.finish = doAnimation;
                return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
            },
            stop: function(type, clearQueue, gotoEnd) {
                var stopQueue = function(hooks) {
                    var stop = hooks.stop;
                    delete hooks.stop;
                    stop(gotoEnd);
                };
                if (typeof type !== "string") {
                    gotoEnd = clearQueue;
                    clearQueue = type;
                    type = undefined;
                }
                if (clearQueue && type !== false) {
                    this.queue(type || "fx", []);
                }
                return this.each(function() {
                    var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this);
                    if (index) {
                        if (data[index] && data[index].stop) {
                            stopQueue(data[index]);
                        }
                    } else {
                        for (index in data) {
                            if (data[index] && data[index].stop && rrun.test(index)) {
                                stopQueue(data[index]);
                            }
                        }
                    }
                    for (index = timers.length; index--; ) {
                        if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                            timers[index].anim.stop(gotoEnd);
                            dequeue = false;
                            timers.splice(index, 1);
                        }
                    }
                    if (dequeue || !gotoEnd) {
                        jQuery.dequeue(this, type);
                    }
                });
            },
            finish: function(type) {
                if (type !== false) {
                    type = type || "fx";
                }
                return this.each(function() {
                    var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                    data.finish = true;
                    jQuery.queue(this, type, []);
                    if (hooks && hooks.cur && hooks.cur.finish) {
                        hooks.cur.finish.call(this);
                    }
                    for (index = timers.length; index--; ) {
                        if (timers[index].elem === this && timers[index].queue === type) {
                            timers[index].anim.stop(true);
                            timers.splice(index, 1);
                        }
                    }
                    for (index = 0; index < length; index++) {
                        if (queue[index] && queue[index].finish) {
                            queue[index].finish.call(this);
                        }
                    }
                    delete data.finish;
                });
            }
        });
        function genFx(type, includeWidth) {
            var which, attrs = {
                height: type
            }, i = 0;
            includeWidth = includeWidth ? 1 : 0;
            for (;i < 4; i += 2 - includeWidth) {
                which = cssExpand[i];
                attrs["margin" + which] = attrs["padding" + which] = type;
            }
            if (includeWidth) {
                attrs.opacity = attrs.width = type;
            }
            return attrs;
        }
        jQuery.each({
            slideDown: genFx("show"),
            slideUp: genFx("hide"),
            slideToggle: genFx("toggle"),
            fadeIn: {
                opacity: "show"
            },
            fadeOut: {
                opacity: "hide"
            },
            fadeToggle: {
                opacity: "toggle"
            }
        }, function(name, props) {
            jQuery.fn[name] = function(speed, easing, callback) {
                return this.animate(props, speed, easing, callback);
            };
        });
        jQuery.speed = function(speed, easing, fn) {
            var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
                complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                duration: speed,
                easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
            };
            opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
            if (opt.queue == null || opt.queue === true) {
                opt.queue = "fx";
            }
            opt.old = opt.complete;
            opt.complete = function() {
                if (jQuery.isFunction(opt.old)) {
                    opt.old.call(this);
                }
                if (opt.queue) {
                    jQuery.dequeue(this, opt.queue);
                }
            };
            return opt;
        };
        jQuery.easing = {
            linear: function(p) {
                return p;
            },
            swing: function(p) {
                return .5 - Math.cos(p * Math.PI) / 2;
            }
        };
        jQuery.timers = [];
        jQuery.fx = Tween.prototype.init;
        jQuery.fx.tick = function() {
            var timer, timers = jQuery.timers, i = 0;
            fxNow = jQuery.now();
            for (;i < timers.length; i++) {
                timer = timers[i];
                if (!timer() && timers[i] === timer) {
                    timers.splice(i--, 1);
                }
            }
            if (!timers.length) {
                jQuery.fx.stop();
            }
            fxNow = undefined;
        };
        jQuery.fx.timer = function(timer) {
            if (timer() && jQuery.timers.push(timer)) {
                jQuery.fx.start();
            }
        };
        jQuery.fx.interval = 13;
        jQuery.fx.start = function() {
            if (!timerId) {
                timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
            }
        };
        jQuery.fx.stop = function() {
            clearInterval(timerId);
            timerId = null;
        };
        jQuery.fx.speeds = {
            slow: 600,
            fast: 200,
            _default: 400
        };
        jQuery.fx.step = {};
        if (jQuery.expr && jQuery.expr.filters) {
            jQuery.expr.filters.animated = function(elem) {
                return jQuery.grep(jQuery.timers, function(fn) {
                    return elem === fn.elem;
                }).length;
            };
        }
        jQuery.fn.offset = function(options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var docElem, win, box = {
                top: 0,
                left: 0
            }, elem = this[0], doc = elem && elem.ownerDocument;
            if (!doc) {
                return;
            }
            docElem = doc.documentElement;
            if (!jQuery.contains(docElem, elem)) {
                return box;
            }
            if (typeof elem.getBoundingClientRect !== core_strundefined) {
                box = elem.getBoundingClientRect();
            }
            win = getWindow(doc);
            return {
                top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
                left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
            };
        };
        jQuery.offset = {
            setOffset: function(elem, options, i) {
                var position = jQuery.css(elem, "position");
                if (position === "static") {
                    elem.style.position = "relative";
                }
                var curElem = jQuery(elem), curOffset = curElem.offset(), curCSSTop = jQuery.css(elem, "top"), curCSSLeft = jQuery.css(elem, "left"), calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [ curCSSTop, curCSSLeft ]) > -1, props = {}, curPosition = {}, curTop, curLeft;
                if (calculatePosition) {
                    curPosition = curElem.position();
                    curTop = curPosition.top;
                    curLeft = curPosition.left;
                } else {
                    curTop = parseFloat(curCSSTop) || 0;
                    curLeft = parseFloat(curCSSLeft) || 0;
                }
                if (jQuery.isFunction(options)) {
                    options = options.call(elem, i, curOffset);
                }
                if (options.top != null) {
                    props.top = options.top - curOffset.top + curTop;
                }
                if (options.left != null) {
                    props.left = options.left - curOffset.left + curLeft;
                }
                if ("using" in options) {
                    options.using.call(elem, props);
                } else {
                    curElem.css(props);
                }
            }
        };
        jQuery.fn.extend({
            position: function() {
                if (!this[0]) {
                    return;
                }
                var offsetParent, offset, parentOffset = {
                    top: 0,
                    left: 0
                }, elem = this[0];
                if (jQuery.css(elem, "position") === "fixed") {
                    offset = elem.getBoundingClientRect();
                } else {
                    offsetParent = this.offsetParent();
                    offset = this.offset();
                    if (!jQuery.nodeName(offsetParent[0], "html")) {
                        parentOffset = offsetParent.offset();
                    }
                    parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                    parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
                }
                return {
                    top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                    left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
                };
            },
            offsetParent: function() {
                return this.map(function() {
                    var offsetParent = this.offsetParent || document.documentElement;
                    while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                        offsetParent = offsetParent.offsetParent;
                    }
                    return offsetParent || document.documentElement;
                });
            }
        });
        jQuery.each({
            scrollLeft: "pageXOffset",
            scrollTop: "pageYOffset"
        }, function(method, prop) {
            var top = /Y/.test(prop);
            jQuery.fn[method] = function(val) {
                return jQuery.access(this, function(elem, method, val) {
                    var win = getWindow(elem);
                    if (val === undefined) {
                        return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
                    }
                    if (win) {
                        win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
                    } else {
                        elem[method] = val;
                    }
                }, method, val, arguments.length, null);
            };
        });
        function getWindow(elem) {
            return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
        }
        jQuery.each({
            Height: "height",
            Width: "width"
        }, function(name, type) {
            jQuery.each({
                padding: "inner" + name,
                content: type,
                "": "outer" + name
            }, function(defaultExtra, funcName) {
                jQuery.fn[funcName] = function(margin, value) {
                    var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                    return jQuery.access(this, function(elem, type, value) {
                        var doc;
                        if (jQuery.isWindow(elem)) {
                            return elem.document.documentElement["client" + name];
                        }
                        if (elem.nodeType === 9) {
                            doc = elem.documentElement;
                            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                        }
                        return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                    }, type, chainable ? margin : undefined, chainable, null);
                };
            });
        });
        window.jQuery = window.$ = jQuery;
        if (typeof define === "function" && define.amd && define.amd.jQuery) {
            define("jquery", [], function() {
                return jQuery;
            });
        }
    })(window);
    (function(root, factory) {
        if (typeof define === "function" && define.amd) {
            define("backbone", [ "underscore", "jquery", "exports" ], function(_, $, exports) {
                root.Backbone = factory(root, exports, _, $);
            });
        } else if (typeof exports !== "undefined") {
            var _ = require("underscore");
            factory(root, exports, _);
        } else {
            root.Backbone = factory(root, {}, root._, root.jQuery || root.Zepto || root.ender || root.$);
        }
    })(this, function(root, Backbone, _, $) {
        var previousBackbone = root.Backbone;
        var array = [];
        var push = array.push;
        var slice = array.slice;
        var splice = array.splice;
        Backbone.VERSION = "1.1.2";
        Backbone.$ = $;
        Backbone.noConflict = function() {
            root.Backbone = previousBackbone;
            return this;
        };
        Backbone.emulateHTTP = false;
        Backbone.emulateJSON = false;
        var Events = Backbone.Events = {
            on: function(name, callback, context) {
                if (!eventsApi(this, "on", name, [ callback, context ]) || !callback) return this;
                this._events || (this._events = {});
                var events = this._events[name] || (this._events[name] = []);
                events.push({
                    callback: callback,
                    context: context,
                    ctx: context || this
                });
                return this;
            },
            once: function(name, callback, context) {
                if (!eventsApi(this, "once", name, [ callback, context ]) || !callback) return this;
                var self = this;
                var once = _.once(function() {
                    self.off(name, once);
                    callback.apply(this, arguments);
                });
                once._callback = callback;
                return this.on(name, once, context);
            },
            off: function(name, callback, context) {
                var retain, ev, events, names, i, l, j, k;
                if (!this._events || !eventsApi(this, "off", name, [ callback, context ])) return this;
                if (!name && !callback && !context) {
                    this._events = void 0;
                    return this;
                }
                names = name ? [ name ] : _.keys(this._events);
                for (i = 0, l = names.length; i < l; i++) {
                    name = names[i];
                    if (events = this._events[name]) {
                        this._events[name] = retain = [];
                        if (callback || context) {
                            for (j = 0, k = events.length; j < k; j++) {
                                ev = events[j];
                                if (callback && callback !== ev.callback && callback !== ev.callback._callback || context && context !== ev.context) {
                                    retain.push(ev);
                                }
                            }
                        }
                        if (!retain.length) delete this._events[name];
                    }
                }
                return this;
            },
            trigger: function(name) {
                if (!this._events) return this;
                var args = slice.call(arguments, 1);
                if (!eventsApi(this, "trigger", name, args)) return this;
                var events = this._events[name];
                var allEvents = this._events.all;
                if (events) triggerEvents(events, args);
                if (allEvents) triggerEvents(allEvents, arguments);
                return this;
            },
            stopListening: function(obj, name, callback) {
                var listeningTo = this._listeningTo;
                if (!listeningTo) return this;
                var remove = !name && !callback;
                if (!callback && typeof name === "object") callback = this;
                if (obj) (listeningTo = {})[obj._listenId] = obj;
                for (var id in listeningTo) {
                    obj = listeningTo[id];
                    obj.off(name, callback, this);
                    if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
                }
                return this;
            }
        };
        var eventSplitter = /\s+/;
        var eventsApi = function(obj, action, name, rest) {
            if (!name) return true;
            if (typeof name === "object") {
                for (var key in name) {
                    obj[action].apply(obj, [ key, name[key] ].concat(rest));
                }
                return false;
            }
            if (eventSplitter.test(name)) {
                var names = name.split(eventSplitter);
                for (var i = 0, l = names.length; i < l; i++) {
                    obj[action].apply(obj, [ names[i] ].concat(rest));
                }
                return false;
            }
            return true;
        };
        var triggerEvents = function(events, args) {
            var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
            switch (args.length) {
              case 0:
                while (++i < l) (ev = events[i]).callback.call(ev.ctx);
                return;

              case 1:
                while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1);
                return;

              case 2:
                while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2);
                return;

              case 3:
                while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
                return;

              default:
                while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
                return;
            }
        };
        var listenMethods = {
            listenTo: "on",
            listenToOnce: "once"
        };
        _.each(listenMethods, function(implementation, method) {
            Events[method] = function(obj, name, callback) {
                var listeningTo = this._listeningTo || (this._listeningTo = {});
                var id = obj._listenId || (obj._listenId = _.uniqueId("l"));
                listeningTo[id] = obj;
                if (!callback && typeof name === "object") callback = this;
                obj[implementation](name, callback, this);
                return this;
            };
        });
        Events.bind = Events.on;
        Events.unbind = Events.off;
        _.extend(Backbone, Events);
        var Model = Backbone.Model = function(attributes, options) {
            var attrs = attributes || {};
            options || (options = {});
            this.cid = _.uniqueId("c");
            this.attributes = {};
            if (options.collection) this.collection = options.collection;
            if (options.parse) attrs = this.parse(attrs, options) || {};
            attrs = _.defaults({}, attrs, _.result(this, "defaults"));
            this.set(attrs, options);
            this.changed = {};
            this.initialize.apply(this, arguments);
        };
        _.extend(Model.prototype, Events, {
            changed: null,
            validationError: null,
            idAttribute: "id",
            initialize: function() {},
            toJSON: function(options) {
                return _.clone(this.attributes);
            },
            sync: function() {
                return Backbone.sync.apply(this, arguments);
            },
            get: function(attr) {
                return this.attributes[attr];
            },
            escape: function(attr) {
                return _.escape(this.get(attr));
            },
            has: function(attr) {
                return this.get(attr) != null;
            },
            set: function(key, val, options) {
                var attr, attrs, unset, changes, silent, changing, prev, current;
                if (key == null) return this;
                if (typeof key === "object") {
                    attrs = key;
                    options = val;
                } else {
                    (attrs = {})[key] = val;
                }
                options || (options = {});
                if (!this._validate(attrs, options)) return false;
                unset = options.unset;
                silent = options.silent;
                changes = [];
                changing = this._changing;
                this._changing = true;
                if (!changing) {
                    this._previousAttributes = _.clone(this.attributes);
                    this.changed = {};
                }
                current = this.attributes, prev = this._previousAttributes;
                if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];
                for (attr in attrs) {
                    val = attrs[attr];
                    if (!_.isEqual(current[attr], val)) changes.push(attr);
                    if (!_.isEqual(prev[attr], val)) {
                        this.changed[attr] = val;
                    } else {
                        delete this.changed[attr];
                    }
                    unset ? delete current[attr] : current[attr] = val;
                }
                if (!silent) {
                    if (changes.length) this._pending = options;
                    for (var i = 0, l = changes.length; i < l; i++) {
                        this.trigger("change:" + changes[i], this, current[changes[i]], options);
                    }
                }
                if (changing) return this;
                if (!silent) {
                    while (this._pending) {
                        options = this._pending;
                        this._pending = false;
                        this.trigger("change", this, options);
                    }
                }
                this._pending = false;
                this._changing = false;
                return this;
            },
            unset: function(attr, options) {
                return this.set(attr, void 0, _.extend({}, options, {
                    unset: true
                }));
            },
            clear: function(options) {
                var attrs = {};
                for (var key in this.attributes) attrs[key] = void 0;
                return this.set(attrs, _.extend({}, options, {
                    unset: true
                }));
            },
            hasChanged: function(attr) {
                if (attr == null) return !_.isEmpty(this.changed);
                return _.has(this.changed, attr);
            },
            changedAttributes: function(diff) {
                if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
                var val, changed = false;
                var old = this._changing ? this._previousAttributes : this.attributes;
                for (var attr in diff) {
                    if (_.isEqual(old[attr], val = diff[attr])) continue;
                    (changed || (changed = {}))[attr] = val;
                }
                return changed;
            },
            previous: function(attr) {
                if (attr == null || !this._previousAttributes) return null;
                return this._previousAttributes[attr];
            },
            previousAttributes: function() {
                return _.clone(this._previousAttributes);
            },
            fetch: function(options) {
                options = options ? _.clone(options) : {};
                if (options.parse === void 0) options.parse = true;
                var model = this;
                var success = options.success;
                options.success = function(resp) {
                    if (!model.set(model.parse(resp, options), options)) return false;
                    if (success) success(model, resp, options);
                    model.trigger("sync", model, resp, options);
                };
                wrapError(this, options);
                return this.sync("read", this, options);
            },
            save: function(key, val, options) {
                var attrs, method, xhr, attributes = this.attributes;
                if (key == null || typeof key === "object") {
                    attrs = key;
                    options = val;
                } else {
                    (attrs = {})[key] = val;
                }
                options = _.extend({
                    validate: true
                }, options);
                if (attrs && !options.wait) {
                    if (!this.set(attrs, options)) return false;
                } else {
                    if (!this._validate(attrs, options)) return false;
                }
                if (attrs && options.wait) {
                    this.attributes = _.extend({}, attributes, attrs);
                }
                if (options.parse === void 0) options.parse = true;
                var model = this;
                var success = options.success;
                options.success = function(resp) {
                    model.attributes = attributes;
                    var serverAttrs = model.parse(resp, options);
                    if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
                    if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
                        return false;
                    }
                    if (success) success(model, resp, options);
                    model.trigger("sync", model, resp, options);
                };
                wrapError(this, options);
                method = this.isNew() ? "create" : options.patch ? "patch" : "update";
                if (method === "patch") options.attrs = attrs;
                xhr = this.sync(method, this, options);
                if (attrs && options.wait) this.attributes = attributes;
                return xhr;
            },
            destroy: function(options) {
                options = options ? _.clone(options) : {};
                var model = this;
                var success = options.success;
                var destroy = function() {
                    model.trigger("destroy", model, model.collection, options);
                };
                options.success = function(resp) {
                    if (options.wait || model.isNew()) destroy();
                    if (success) success(model, resp, options);
                    if (!model.isNew()) model.trigger("sync", model, resp, options);
                };
                if (this.isNew()) {
                    options.success();
                    return false;
                }
                wrapError(this, options);
                var xhr = this.sync("delete", this, options);
                if (!options.wait) destroy();
                return xhr;
            },
            url: function() {
                var base = _.result(this, "urlRoot") || _.result(this.collection, "url") || urlError();
                if (this.isNew()) return base;
                return base.replace(/([^\/])$/, "$1/") + encodeURIComponent(this.id);
            },
            parse: function(resp, options) {
                return resp;
            },
            clone: function() {
                return new this.constructor(this.attributes);
            },
            isNew: function() {
                return !this.has(this.idAttribute);
            },
            isValid: function(options) {
                return this._validate({}, _.extend(options || {}, {
                    validate: true
                }));
            },
            _validate: function(attrs, options) {
                if (!options.validate || !this.validate) return true;
                attrs = _.extend({}, this.attributes, attrs);
                var error = this.validationError = this.validate(attrs, options) || null;
                if (!error) return true;
                this.trigger("invalid", this, error, _.extend(options, {
                    validationError: error
                }));
                return false;
            }
        });
        var modelMethods = [ "keys", "values", "pairs", "invert", "pick", "omit" ];
        _.each(modelMethods, function(method) {
            Model.prototype[method] = function() {
                var args = slice.call(arguments);
                args.unshift(this.attributes);
                return _[method].apply(_, args);
            };
        });
        var Collection = Backbone.Collection = function(models, options) {
            options || (options = {});
            if (options.model) this.model = options.model;
            if (options.comparator !== void 0) this.comparator = options.comparator;
            this._reset();
            this.initialize.apply(this, arguments);
            if (models) this.reset(models, _.extend({
                silent: true
            }, options));
        };
        var setOptions = {
            add: true,
            remove: true,
            merge: true
        };
        var addOptions = {
            add: true,
            remove: false
        };
        _.extend(Collection.prototype, Events, {
            model: Model,
            initialize: function() {},
            toJSON: function(options) {
                return this.map(function(model) {
                    return model.toJSON(options);
                });
            },
            sync: function() {
                return Backbone.sync.apply(this, arguments);
            },
            add: function(models, options) {
                return this.set(models, _.extend({
                    merge: false
                }, options, addOptions));
            },
            remove: function(models, options) {
                var singular = !_.isArray(models);
                models = singular ? [ models ] : _.clone(models);
                options || (options = {});
                var i, l, index, model;
                for (i = 0, l = models.length; i < l; i++) {
                    model = models[i] = this.get(models[i]);
                    if (!model) continue;
                    delete this._byId[model.id];
                    delete this._byId[model.cid];
                    index = this.indexOf(model);
                    this.models.splice(index, 1);
                    this.length--;
                    if (!options.silent) {
                        options.index = index;
                        model.trigger("remove", model, this, options);
                    }
                    this._removeReference(model, options);
                }
                return singular ? models[0] : models;
            },
            set: function(models, options) {
                options = _.defaults({}, options, setOptions);
                if (options.parse) models = this.parse(models, options);
                var singular = !_.isArray(models);
                models = singular ? models ? [ models ] : [] : _.clone(models);
                var i, l, id, model, attrs, existing, sort;
                var at = options.at;
                var targetModel = this.model;
                var sortable = this.comparator && at == null && options.sort !== false;
                var sortAttr = _.isString(this.comparator) ? this.comparator : null;
                var toAdd = [], toRemove = [], modelMap = {};
                var add = options.add, merge = options.merge, remove = options.remove;
                var order = !sortable && add && remove ? [] : false;
                for (i = 0, l = models.length; i < l; i++) {
                    attrs = models[i] || {};
                    if (attrs instanceof Model) {
                        id = model = attrs;
                    } else {
                        id = attrs[targetModel.prototype.idAttribute || "id"];
                    }
                    if (existing = this.get(id)) {
                        if (remove) modelMap[existing.cid] = true;
                        if (merge) {
                            attrs = attrs === model ? model.attributes : attrs;
                            if (options.parse) attrs = existing.parse(attrs, options);
                            existing.set(attrs, options);
                            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
                        }
                        models[i] = existing;
                    } else if (add) {
                        model = models[i] = this._prepareModel(attrs, options);
                        if (!model) continue;
                        toAdd.push(model);
                        this._addReference(model, options);
                    }
                    model = existing || model;
                    if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
                    modelMap[model.id] = true;
                }
                if (remove) {
                    for (i = 0, l = this.length; i < l; ++i) {
                        if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
                    }
                    if (toRemove.length) this.remove(toRemove, options);
                }
                if (toAdd.length || order && order.length) {
                    if (sortable) sort = true;
                    this.length += toAdd.length;
                    if (at != null) {
                        for (i = 0, l = toAdd.length; i < l; i++) {
                            this.models.splice(at + i, 0, toAdd[i]);
                        }
                    } else {
                        if (order) this.models.length = 0;
                        var orderedModels = order || toAdd;
                        for (i = 0, l = orderedModels.length; i < l; i++) {
                            this.models.push(orderedModels[i]);
                        }
                    }
                }
                if (sort) this.sort({
                    silent: true
                });
                if (!options.silent) {
                    for (i = 0, l = toAdd.length; i < l; i++) {
                        (model = toAdd[i]).trigger("add", model, this, options);
                    }
                    if (sort || order && order.length) this.trigger("sort", this, options);
                }
                return singular ? models[0] : models;
            },
            reset: function(models, options) {
                options || (options = {});
                for (var i = 0, l = this.models.length; i < l; i++) {
                    this._removeReference(this.models[i], options);
                }
                options.previousModels = this.models;
                this._reset();
                models = this.add(models, _.extend({
                    silent: true
                }, options));
                if (!options.silent) this.trigger("reset", this, options);
                return models;
            },
            push: function(model, options) {
                return this.add(model, _.extend({
                    at: this.length
                }, options));
            },
            pop: function(options) {
                var model = this.at(this.length - 1);
                this.remove(model, options);
                return model;
            },
            unshift: function(model, options) {
                return this.add(model, _.extend({
                    at: 0
                }, options));
            },
            shift: function(options) {
                var model = this.at(0);
                this.remove(model, options);
                return model;
            },
            slice: function() {
                return slice.apply(this.models, arguments);
            },
            get: function(obj) {
                if (obj == null) return void 0;
                return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
            },
            at: function(index) {
                return this.models[index];
            },
            where: function(attrs, first) {
                if (_.isEmpty(attrs)) return first ? void 0 : [];
                return this[first ? "find" : "filter"](function(model) {
                    for (var key in attrs) {
                        if (attrs[key] !== model.get(key)) return false;
                    }
                    return true;
                });
            },
            findWhere: function(attrs) {
                return this.where(attrs, true);
            },
            sort: function(options) {
                if (!this.comparator) throw new Error("Cannot sort a set without a comparator");
                options || (options = {});
                if (_.isString(this.comparator) || this.comparator.length === 1) {
                    this.models = this.sortBy(this.comparator, this);
                } else {
                    this.models.sort(_.bind(this.comparator, this));
                }
                if (!options.silent) this.trigger("sort", this, options);
                return this;
            },
            pluck: function(attr) {
                return _.invoke(this.models, "get", attr);
            },
            fetch: function(options) {
                options = options ? _.clone(options) : {};
                if (options.parse === void 0) options.parse = true;
                var success = options.success;
                var collection = this;
                options.success = function(resp) {
                    var method = options.reset ? "reset" : "set";
                    collection[method](resp, options);
                    if (success) success(collection, resp, options);
                    collection.trigger("sync", collection, resp, options);
                };
                wrapError(this, options);
                return this.sync("read", this, options);
            },
            create: function(model, options) {
                options = options ? _.clone(options) : {};
                if (!(model = this._prepareModel(model, options))) return false;
                if (!options.wait) this.add(model, options);
                var collection = this;
                var success = options.success;
                options.success = function(model, resp) {
                    if (options.wait) collection.add(model, options);
                    if (success) success(model, resp, options);
                };
                model.save(null, options);
                return model;
            },
            parse: function(resp, options) {
                return resp;
            },
            clone: function() {
                return new this.constructor(this.models);
            },
            _reset: function() {
                this.length = 0;
                this.models = [];
                this._byId = {};
            },
            _prepareModel: function(attrs, options) {
                if (attrs instanceof Model) return attrs;
                options = options ? _.clone(options) : {};
                options.collection = this;
                var model = new this.model(attrs, options);
                if (!model.validationError) return model;
                this.trigger("invalid", this, model.validationError, options);
                return false;
            },
            _addReference: function(model, options) {
                this._byId[model.cid] = model;
                if (model.id != null) this._byId[model.id] = model;
                if (!model.collection) model.collection = this;
                model.on("all", this._onModelEvent, this);
            },
            _removeReference: function(model, options) {
                if (this === model.collection) delete model.collection;
                model.off("all", this._onModelEvent, this);
            },
            _onModelEvent: function(event, model, collection, options) {
                if ((event === "add" || event === "remove") && collection !== this) return;
                if (event === "destroy") this.remove(model, options);
                if (model && event === "change:" + model.idAttribute) {
                    delete this._byId[model.previous(model.idAttribute)];
                    if (model.id != null) this._byId[model.id] = model;
                }
                this.trigger.apply(this, arguments);
            }
        });
        var methods = [ "forEach", "each", "map", "collect", "reduce", "foldl", "inject", "reduceRight", "foldr", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "toArray", "size", "first", "head", "take", "initial", "rest", "tail", "drop", "last", "without", "difference", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "chain", "sample" ];
        _.each(methods, function(method) {
            Collection.prototype[method] = function() {
                var args = slice.call(arguments);
                args.unshift(this.models);
                return _[method].apply(_, args);
            };
        });
        var attributeMethods = [ "groupBy", "countBy", "sortBy", "indexBy" ];
        _.each(attributeMethods, function(method) {
            Collection.prototype[method] = function(value, context) {
                var iterator = _.isFunction(value) ? value : function(model) {
                    return model.get(value);
                };
                return _[method](this.models, iterator, context);
            };
        });
        var View = Backbone.View = function(options) {
            this.cid = _.uniqueId("view");
            options || (options = {});
            _.extend(this, _.pick(options, viewOptions));
            this._ensureElement();
            this.initialize.apply(this, arguments);
            this.delegateEvents();
        };
        var delegateEventSplitter = /^(\S+)\s*(.*)$/;
        var viewOptions = [ "model", "collection", "el", "id", "attributes", "className", "tagName", "events" ];
        _.extend(View.prototype, Events, {
            tagName: "div",
            $: function(selector) {
                return this.$el.find(selector);
            },
            initialize: function() {},
            render: function() {
                return this;
            },
            remove: function() {
                this.$el.remove();
                this.stopListening();
                return this;
            },
            setElement: function(element, delegate) {
                if (this.$el) this.undelegateEvents();
                this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
                this.el = this.$el[0];
                if (delegate !== false) this.delegateEvents();
                return this;
            },
            delegateEvents: function(events) {
                if (!(events || (events = _.result(this, "events")))) return this;
                this.undelegateEvents();
                for (var key in events) {
                    var method = events[key];
                    if (!_.isFunction(method)) method = this[events[key]];
                    if (!method) continue;
                    var match = key.match(delegateEventSplitter);
                    var eventName = match[1], selector = match[2];
                    method = _.bind(method, this);
                    eventName += ".delegateEvents" + this.cid;
                    if (selector === "") {
                        this.$el.on(eventName, method);
                    } else {
                        this.$el.on(eventName, selector, method);
                    }
                }
                return this;
            },
            undelegateEvents: function() {
                this.$el.off(".delegateEvents" + this.cid);
                return this;
            },
            _ensureElement: function() {
                if (!this.el) {
                    var attrs = _.extend({}, _.result(this, "attributes"));
                    if (this.id) attrs.id = _.result(this, "id");
                    if (this.className) attrs["class"] = _.result(this, "className");
                    var $el = Backbone.$("<" + _.result(this, "tagName") + ">").attr(attrs);
                    this.setElement($el, false);
                } else {
                    this.setElement(_.result(this, "el"), false);
                }
            }
        });
        Backbone.sync = function(method, model, options) {
            var type = methodMap[method];
            _.defaults(options || (options = {}), {
                emulateHTTP: Backbone.emulateHTTP,
                emulateJSON: Backbone.emulateJSON
            });
            var params = {
                type: type,
                dataType: "json"
            };
            if (!options.url) {
                params.url = _.result(model, "url") || urlError();
            }
            if (options.data == null && model && (method === "create" || method === "update" || method === "patch")) {
                params.contentType = "application/json";
                params.data = JSON.stringify(options.attrs || model.toJSON(options));
            }
            if (options.emulateJSON) {
                params.contentType = "application/x-www-form-urlencoded";
                params.data = params.data ? {
                    model: params.data
                } : {};
            }
            if (options.emulateHTTP && (type === "PUT" || type === "DELETE" || type === "PATCH")) {
                params.type = "POST";
                if (options.emulateJSON) params.data._method = type;
                var beforeSend = options.beforeSend;
                options.beforeSend = function(xhr) {
                    xhr.setRequestHeader("X-HTTP-Method-Override", type);
                    if (beforeSend) return beforeSend.apply(this, arguments);
                };
            }
            if (params.type !== "GET" && !options.emulateJSON) {
                params.processData = false;
            }
            if (params.type === "PATCH" && noXhrPatch) {
                params.xhr = function() {
                    return new ActiveXObject("Microsoft.XMLHTTP");
                };
            }
            var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
            model.trigger("request", model, xhr, options);
            return xhr;
        };
        var noXhrPatch = typeof window !== "undefined" && !!window.ActiveXObject && !(window.XMLHttpRequest && new XMLHttpRequest().dispatchEvent);
        var methodMap = {
            create: "POST",
            update: "PUT",
            patch: "PATCH",
            "delete": "DELETE",
            read: "GET"
        };
        Backbone.ajax = function() {
            return Backbone.$.ajax.apply(Backbone.$, arguments);
        };
        var Router = Backbone.Router = function(options) {
            options || (options = {});
            if (options.routes) this.routes = options.routes;
            this._bindRoutes();
            this.initialize.apply(this, arguments);
        };
        var optionalParam = /\((.*?)\)/g;
        var namedParam = /(\(\?)?:\w+/g;
        var splatParam = /\*\w+/g;
        var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
        _.extend(Router.prototype, Events, {
            initialize: function() {},
            route: function(route, name, callback) {
                if (!_.isRegExp(route)) route = this._routeToRegExp(route);
                if (_.isFunction(name)) {
                    callback = name;
                    name = "";
                }
                if (!callback) callback = this[name];
                var router = this;
                Backbone.history.route(route, function(fragment) {
                    var args = router._extractParameters(route, fragment);
                    router.execute(callback, args);
                    router.trigger.apply(router, [ "route:" + name ].concat(args));
                    router.trigger("route", name, args);
                    Backbone.history.trigger("route", router, name, args);
                });
                return this;
            },
            execute: function(callback, args) {
                if (callback) callback.apply(this, args);
            },
            navigate: function(fragment, options) {
                Backbone.history.navigate(fragment, options);
                return this;
            },
            _bindRoutes: function() {
                if (!this.routes) return;
                this.routes = _.result(this, "routes");
                var route, routes = _.keys(this.routes);
                while ((route = routes.pop()) != null) {
                    this.route(route, this.routes[route]);
                }
            },
            _routeToRegExp: function(route) {
                route = route.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function(match, optional) {
                    return optional ? match : "([^/?]+)";
                }).replace(splatParam, "([^?]*?)");
                return new RegExp("^" + route + "(?:\\?([\\s\\S]*))?$");
            },
            _extractParameters: function(route, fragment) {
                var params = route.exec(fragment).slice(1);
                return _.map(params, function(param, i) {
                    if (i === params.length - 1) return param || null;
                    return param ? decodeURIComponent(param) : null;
                });
            }
        });
        var History = Backbone.History = function() {
            this.handlers = [];
            _.bindAll(this, "checkUrl");
            if (typeof window !== "undefined") {
                this.location = window.location;
                this.history = window.history;
            }
        };
        var routeStripper = /^[#\/]|\s+$/g;
        var rootStripper = /^\/+|\/+$/g;
        var isExplorer = /msie [\w.]+/;
        var trailingSlash = /\/$/;
        var pathStripper = /#.*$/;
        History.started = false;
        _.extend(History.prototype, Events, {
            interval: 50,
            atRoot: function() {
                return this.location.pathname.replace(/[^\/]$/, "$&/") === this.root;
            },
            getHash: function(window) {
                var match = (window || this).location.href.match(/#(.*)$/);
                return match ? match[1] : "";
            },
            getFragment: function(fragment, forcePushState) {
                if (fragment == null) {
                    if (this._hasPushState || !this._wantsHashChange || forcePushState) {
                        fragment = decodeURI(this.location.pathname + this.location.search);
                        var root = this.root.replace(trailingSlash, "");
                        if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
                    } else {
                        fragment = this.getHash();
                    }
                }
                return fragment.replace(routeStripper, "");
            },
            start: function(options) {
                if (History.started) throw new Error("Backbone.history has already been started");
                History.started = true;
                this.options = _.extend({
                    root: "/"
                }, this.options, options);
                this.root = this.options.root;
                this._wantsHashChange = this.options.hashChange !== false;
                this._wantsPushState = !!this.options.pushState;
                this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
                var fragment = this.getFragment();
                var docMode = document.documentMode;
                var oldIE = isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7);
                this.root = ("/" + this.root + "/").replace(rootStripper, "/");
                if (oldIE && this._wantsHashChange) {
                    var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
                    this.iframe = frame.hide().appendTo("body")[0].contentWindow;
                    this.navigate(fragment);
                }
                if (this._hasPushState) {
                    Backbone.$(window).on("popstate", this.checkUrl);
                } else if (this._wantsHashChange && "onhashchange" in window && !oldIE) {
                    Backbone.$(window).on("hashchange", this.checkUrl);
                } else if (this._wantsHashChange) {
                    this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
                }
                this.fragment = fragment;
                var loc = this.location;
                if (this._wantsHashChange && this._wantsPushState) {
                    if (!this._hasPushState && !this.atRoot()) {
                        this.fragment = this.getFragment(null, true);
                        this.location.replace(this.root + "#" + this.fragment);
                        return true;
                    } else if (this._hasPushState && this.atRoot() && loc.hash) {
                        this.fragment = this.getHash().replace(routeStripper, "");
                        this.history.replaceState({}, document.title, this.root + this.fragment);
                    }
                }
                if (!this.options.silent) return this.loadUrl();
            },
            stop: function() {
                Backbone.$(window).off("popstate", this.checkUrl).off("hashchange", this.checkUrl);
                if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
                History.started = false;
            },
            route: function(route, callback) {
                this.handlers.unshift({
                    route: route,
                    callback: callback
                });
            },
            checkUrl: function(e) {
                var current = this.getFragment();
                if (current === this.fragment && this.iframe) {
                    current = this.getFragment(this.getHash(this.iframe));
                }
                if (current === this.fragment) return false;
                if (this.iframe) this.navigate(current);
                this.loadUrl();
            },
            loadUrl: function(fragment) {
                fragment = this.fragment = this.getFragment(fragment);
                return _.any(this.handlers, function(handler) {
                    if (handler.route.test(fragment)) {
                        handler.callback(fragment);
                        return true;
                    }
                });
            },
            navigate: function(fragment, options) {
                if (!History.started) return false;
                if (!options || options === true) options = {
                    trigger: !!options
                };
                var url = this.root + (fragment = this.getFragment(fragment || ""));
                fragment = fragment.replace(pathStripper, "");
                if (this.fragment === fragment) return;
                this.fragment = fragment;
                if (fragment === "" && url !== "/") url = url.slice(0, -1);
                if (this._hasPushState) {
                    this.history[options.replace ? "replaceState" : "pushState"]({}, document.title, url);
                } else if (this._wantsHashChange) {
                    this._updateHash(this.location, fragment, options.replace);
                    if (this.iframe && fragment !== this.getFragment(this.getHash(this.iframe))) {
                        if (!options.replace) this.iframe.document.open().close();
                        this._updateHash(this.iframe.location, fragment, options.replace);
                    }
                } else {
                    return this.location.assign(url);
                }
                if (options.trigger) return this.loadUrl(fragment);
            },
            _updateHash: function(location, fragment, replace) {
                if (replace) {
                    var href = location.href.replace(/(javascript:|#).*$/, "");
                    location.replace(href + "#" + fragment);
                } else {
                    location.hash = "#" + fragment;
                }
            }
        });
        Backbone.history = new History();
        var extend = function(protoProps, staticProps) {
            var parent = this;
            var child;
            if (protoProps && _.has(protoProps, "constructor")) {
                child = protoProps.constructor;
            } else {
                child = function() {
                    return parent.apply(this, arguments);
                };
            }
            _.extend(child, parent, staticProps);
            var Surrogate = function() {
                this.constructor = child;
            };
            Surrogate.prototype = parent.prototype;
            child.prototype = new Surrogate();
            if (protoProps) _.extend(child.prototype, protoProps);
            child.__super__ = parent.prototype;
            return child;
        };
        Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
        var urlError = function() {
            throw new Error('A "url" property or function must be specified');
        };
        var wrapError = function(model, options) {
            var error = options.error;
            options.error = function(resp) {
                if (error) error(model, resp, options);
                model.trigger("error", model, resp, options);
            };
        };
        return Backbone;
    });
    (function(factory) {
        if (typeof define === "function" && define.amd) define("backbone.stickit", [ "underscore", "backbone" ], factory); else if (typeof exports === "object") factory(require("underscore"), require("backbone")); else factory(_, Backbone);
    })(function(_, Backbone) {
        Backbone.Stickit = {
            _handlers: [],
            addHandler: function(handlers) {
                handlers = _.map(_.flatten([ handlers ]), function(handler) {
                    return _.extend({
                        updateModel: true,
                        updateView: true,
                        updateMethod: "text"
                    }, handler);
                });
                this._handlers = this._handlers.concat(handlers);
            }
        };
        _.extend(Backbone.View.prototype, {
            _modelBindings: null,
            unstickit: function(model) {
                var models = [];
                _.each(this._modelBindings, function(binding, i) {
                    if (model && binding.model !== model) return false;
                    binding.model.off(binding.event, binding.fn);
                    models.push(binding.model);
                    delete this._modelBindings[i];
                }, this);
                _.invoke(_.uniq(models), "trigger", "stickit:unstuck", this.cid);
                this._modelBindings = _.compact(this._modelBindings);
                this.$el.off(".stickit" + (model ? "." + model.cid : ""));
            },
            stickit: function(optionalModel, optionalBindingsConfig) {
                var model = optionalModel || this.model, namespace = ".stickit." + model.cid, bindings = optionalBindingsConfig || _.result(this, "bindings") || {};
                this._modelBindings || (this._modelBindings = []);
                this.unstickit(model);
                _.each(bindings, function(v, selector) {
                    var $el, options, modelAttr, config, binding = bindings[selector] || {}, bindId = _.uniqueId();
                    $el = selector === ":el" ? this.$el : this.$(selector);
                    if (!$el.length) return;
                    if (_.isString(binding)) binding = {
                        observe: binding
                    };
                    if (_.isFunction(binding.observe)) binding.observe = binding.observe.call(this);
                    config = getConfiguration($el, binding);
                    modelAttr = config.observe;
                    config.bindId = bindId;
                    config.view = this;
                    options = _.extend({
                        stickitChange: config
                    }, config.setOptions);
                    initializeAttributes(this, $el, config, model, modelAttr);
                    initializeVisible(this, $el, config, model, modelAttr);
                    if (modelAttr) {
                        _.each(config.events, function(type) {
                            var event = type + namespace;
                            var method = function(event) {
                                var val = config.getVal.call(this, $el, event, config, _.rest(arguments));
                                if (evaluateBoolean(this, config.updateModel, val, event, config)) setAttr(model, modelAttr, val, options, this, config);
                            };
                            method = _.bind(method, this);
                            if (selector === ":el") this.$el.on(event, method); else this.$el.on(event, selector, method);
                        }, this);
                        _.each(_.flatten([ modelAttr ]), function(attr) {
                            observeModelEvent(model, this, "change:" + attr, function(model, val, options) {
                                var changeId = options && options.stickitChange && options.stickitChange.bindId || null;
                                if (changeId !== bindId) updateViewBindEl(this, $el, config, getAttr(model, modelAttr, config, this), model);
                            });
                        }, this);
                        updateViewBindEl(this, $el, config, getAttr(model, modelAttr, config, this), model, true);
                    }
                    model.once("stickit:unstuck", function(cid) {
                        if (cid === this.cid) applyViewFn(this, config.destroy, $el, model, config);
                    }, this);
                    applyViewFn(this, config.initialize, $el, model, config);
                }, this);
                var remove = this.remove;
                this.remove = function() {
                    var ret = this;
                    this.unstickit();
                    if (remove) ret = remove.apply(this, _.rest(arguments));
                    return ret;
                };
            }
        });
        var evaluatePath = function(obj, path) {
            var parts = (path || "").split(".");
            var result = _.reduce(parts, function(memo, i) {
                return memo[i];
            }, obj);
            return result == null ? obj : result;
        };
        var applyViewFn = function(view, fn) {
            if (fn) return (_.isString(fn) ? evaluatePath(view, fn) : fn).apply(view, _.rest(arguments, 2));
        };
        var getSelectedOption = function($select) {
            return $select.find("option").not(function() {
                return !this.selected;
            });
        };
        var evaluateBoolean = function(view, reference) {
            if (_.isBoolean(reference)) return reference; else if (_.isFunction(reference) || _.isString(reference)) return applyViewFn.apply(this, arguments);
            return false;
        };
        var observeModelEvent = function(model, view, event, fn) {
            model.on(event, fn, view);
            view._modelBindings.push({
                model: model,
                event: event,
                fn: fn
            });
        };
        var setAttr = function(model, attr, val, options, context, config) {
            var value = {};
            if (config.onSet) val = applyViewFn(context, config.onSet, val, config);
            if (config.set) applyViewFn(context, config.set, attr, val, options, config); else {
                value[attr] = val;
                if (_.isArray(attr) && _.isArray(val)) {
                    value = _.reduce(attr, function(memo, attribute, index) {
                        memo[attribute] = _.has(val, index) ? val[index] : null;
                        return memo;
                    }, {});
                }
                model.set(value, options);
            }
        };
        var getAttr = function(model, attr, config, context) {
            var val, retrieveVal = function(field) {
                return model[config.escape ? "escape" : "get"](field);
            }, sanitizeVal = function(val) {
                return val == null ? "" : val;
            };
            val = _.isArray(attr) ? _.map(attr, retrieveVal) : retrieveVal(attr);
            if (config.onGet) val = applyViewFn(context, config.onGet, val, config);
            return _.isArray(val) ? _.map(val, sanitizeVal) : sanitizeVal(val);
        };
        var getConfiguration = Backbone.Stickit.getConfiguration = function($el, binding) {
            var handlers = [ {
                updateModel: false,
                updateMethod: "text",
                update: function($el, val, m, opts) {
                    if ($el[opts.updateMethod]) $el[opts.updateMethod](val);
                },
                getVal: function($el, e, opts) {
                    return $el[opts.updateMethod]();
                }
            } ];
            handlers = handlers.concat(_.filter(Backbone.Stickit._handlers, function(handler) {
                return $el.is(handler.selector);
            }));
            handlers.push(binding);
            var config = _.extend.apply(_, handlers);
            if (config.visible && !_.has(config, "updateView")) config.updateView = false; else if (!_.has(config, "updateView")) config.updateView = true;
            delete config.selector;
            return config;
        };
        var initializeAttributes = function(view, $el, config, model, modelAttr) {
            var props = [ "autofocus", "autoplay", "async", "checked", "controls", "defer", "disabled", "hidden", "indeterminate", "loop", "multiple", "open", "readonly", "required", "scoped", "selected" ];
            _.each(config.attributes || [], function(attrConfig) {
                var lastClass = "", observed, updateAttr;
                attrConfig = _.clone(attrConfig);
                observed = attrConfig.observe || (attrConfig.observe = modelAttr), updateAttr = function() {
                    var updateType = _.indexOf(props, attrConfig.name, true) > -1 ? "prop" : "attr", val = getAttr(model, observed, attrConfig, view);
                    if (attrConfig.name === "class") {
                        $el.removeClass(lastClass).addClass(val);
                        lastClass = val;
                    } else $el[updateType](attrConfig.name, val);
                };
                _.each(_.flatten([ observed ]), function(attr) {
                    observeModelEvent(model, view, "change:" + attr, updateAttr);
                });
                updateAttr();
            });
        };
        var initializeVisible = function(view, $el, config, model, modelAttr) {
            if (config.visible == null) return;
            var visibleCb = function() {
                var visible = config.visible, visibleFn = config.visibleFn, val = getAttr(model, modelAttr, config, view), isVisible = !!val;
                if (_.isFunction(visible) || _.isString(visible)) isVisible = !!applyViewFn(view, visible, val, config);
                if (visibleFn) applyViewFn(view, visibleFn, $el, isVisible, config); else {
                    $el.toggle(isVisible);
                }
            };
            _.each(_.flatten([ modelAttr ]), function(attr) {
                observeModelEvent(model, view, "change:" + attr, visibleCb);
            });
            visibleCb();
        };
        var updateViewBindEl = function(view, $el, config, val, model, isInitializing) {
            if (!evaluateBoolean(view, config.updateView, val, config)) return;
            applyViewFn(view, config.update, $el, val, model, config);
            if (!isInitializing) applyViewFn(view, config.afterUpdate, $el, val, config);
        };
        Backbone.Stickit.addHandler([ {
            selector: '[contenteditable="true"]',
            updateMethod: "html",
            events: [ "input", "change" ]
        }, {
            selector: "input",
            events: [ "propertychange", "input", "change" ],
            update: function($el, val) {
                $el.val(val);
            },
            getVal: function($el) {
                return $el.val();
            }
        }, {
            selector: "textarea",
            events: [ "propertychange", "input", "change" ],
            update: function($el, val) {
                $el.val(val);
            },
            getVal: function($el) {
                return $el.val();
            }
        }, {
            selector: 'input[type="radio"]',
            events: [ "change" ],
            update: function($el, val) {
                $el.filter('[value="' + val + '"]').prop("checked", true);
            },
            getVal: function($el) {
                return $el.filter(":checked").val();
            }
        }, {
            selector: 'input[type="checkbox"]',
            events: [ "change" ],
            update: function($el, val, model, options) {
                if ($el.length > 1) {
                    val || (val = []);
                    $el.each(function(i, el) {
                        var checkbox = Backbone.$(el);
                        var checked = _.indexOf(val, checkbox.val()) > -1;
                        checkbox.prop("checked", checked);
                    });
                } else {
                    var checked = _.isBoolean(val) ? val : val === $el.val();
                    $el.prop("checked", checked);
                }
            },
            getVal: function($el) {
                var val;
                if ($el.length > 1) {
                    val = _.reduce($el, function(memo, el) {
                        var checkbox = Backbone.$(el);
                        if (checkbox.prop("checked")) memo.push(checkbox.val());
                        return memo;
                    }, []);
                } else {
                    val = $el.prop("checked");
                    var boxval = $el.val();
                    if (boxval !== "on" && boxval != null) {
                        val = val ? $el.val() : null;
                    }
                }
                return val;
            }
        }, {
            selector: "select",
            events: [ "change" ],
            update: function($el, val, model, options) {
                var optList, selectConfig = options.selectOptions, list = selectConfig && selectConfig.collection || undefined, isMultiple = $el.prop("multiple");
                if (!selectConfig) {
                    selectConfig = {};
                    var getList = function($el) {
                        return $el.map(function() {
                            return {
                                value: this.value,
                                label: this.text
                            };
                        }).get();
                    };
                    if ($el.find("optgroup").length) {
                        list = {
                            opt_labels: []
                        };
                        if ($el.find("> option").length) {
                            list.opt_labels.push(undefined);
                            _.each($el.find("> option"), function(el) {
                                list[undefined] = getList(Backbone.$(el));
                            });
                        }
                        _.each($el.find("optgroup"), function(el) {
                            var label = Backbone.$(el).attr("label");
                            list.opt_labels.push(label);
                            list[label] = getList(Backbone.$(el).find("option"));
                        });
                    } else {
                        list = getList($el.find("option"));
                    }
                }
                selectConfig.valuePath = selectConfig.valuePath || "value";
                selectConfig.labelPath = selectConfig.labelPath || "label";
                var addSelectOptions = function(optList, $el, fieldVal) {
                    _.each(optList, function(obj) {
                        var option = Backbone.$("<option/>"), optionVal = obj;
                        var fillOption = function(text, val) {
                            option.text(text);
                            optionVal = val;
                            option.data("stickit_bind_val", optionVal);
                            if (!_.isArray(optionVal) && !_.isObject(optionVal)) option.val(optionVal);
                        };
                        if (obj === "__default__") fillOption(selectConfig.defaultOption.label, selectConfig.defaultOption.value); else fillOption(evaluatePath(obj, selectConfig.labelPath), evaluatePath(obj, selectConfig.valuePath));
                        if (!isMultiple && optionVal != null && fieldVal != null && optionVal === fieldVal || _.isObject(fieldVal) && _.isEqual(optionVal, fieldVal)) option.prop("selected", true); else if (isMultiple && _.isArray(fieldVal)) {
                            _.each(fieldVal, function(val) {
                                if (_.isObject(val)) val = evaluatePath(val, selectConfig.valuePath);
                                if (val === optionVal || _.isObject(val) && _.isEqual(optionVal, val)) option.prop("selected", true);
                            });
                        }
                        $el.append(option);
                    });
                };
                $el.html("");
                var evaluate = function(view, list) {
                    var context = window;
                    if (list.indexOf("this.") === 0) context = view;
                    list = list.replace(/^[a-z]*\.(.+)$/, "$1");
                    return evaluatePath(context, list);
                };
                if (_.isString(list)) optList = evaluate(this, list); else if (_.isFunction(list)) optList = applyViewFn(this, list, $el, options); else optList = list;
                if (optList instanceof Backbone.Collection) optList = optList.toJSON();
                if (selectConfig.defaultOption) {
                    addSelectOptions([ "__default__" ], $el);
                }
                if (_.isArray(optList)) {
                    addSelectOptions(optList, $el, val);
                } else if (optList.opt_labels) {
                    _.each(optList.opt_labels, function(label) {
                        var $group = Backbone.$("<optgroup/>").attr("label", label);
                        addSelectOptions(optList[label], $group, val);
                        $el.append($group);
                    });
                } else {
                    var opts = [], opt;
                    for (var i in optList) {
                        opt = {};
                        opt[selectConfig.valuePath] = i;
                        opt[selectConfig.labelPath] = optList[i];
                        opts.push(opt);
                    }
                    addSelectOptions(_.sortBy(opts, selectConfig.comparator || selectConfig.labelPath), $el, val);
                }
            },
            getVal: function($el) {
                var val;
                if ($el.prop("multiple")) {
                    val = Backbone.$(getSelectedOption($el).map(function() {
                        return Backbone.$(this).data("stickit_bind_val");
                    })).get();
                } else {
                    val = getSelectedOption($el).data("stickit_bind_val");
                }
                return val;
            }
        } ]);
    });
    (function(root, factory) {
        if (typeof exports === "object" && typeof require === "function") {
            module.exports = factory(require("underscore"), require("backbone"));
        } else if (typeof define === "function" && define.amd) {
            define("backbone.localStorage", [ "underscore", "backbone" ], function(_, Backbone) {
                return factory(_ || root._, Backbone || root.Backbone);
            });
        } else {
            factory(_, Backbone);
        }
    })(this, function(_, Backbone) {
        function S4() {
            return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);
        }
        function guid() {
            return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
        }
        Backbone.LocalStorage = window.Store = function(name) {
            if (!this.localStorage) {
                throw "Backbone.localStorage: Environment does not support localStorage.";
            }
            this.name = name;
            var store = this.localStorage().getItem(this.name);
            this.records = store && store.split(",") || [];
        };
        _.extend(Backbone.LocalStorage.prototype, {
            save: function() {
                this.localStorage().setItem(this.name, this.records.join(","));
            },
            create: function(model) {
                if (!model.id) {
                    model.id = guid();
                    model.set(model.idAttribute, model.id);
                }
                this.localStorage().setItem(this.name + "-" + model.id, JSON.stringify(model));
                this.records.push(model.id.toString());
                this.save();
                return this.find(model);
            },
            update: function(model) {
                this.localStorage().setItem(this.name + "-" + model.id, JSON.stringify(model));
                if (!_.include(this.records, model.id.toString())) this.records.push(model.id.toString());
                this.save();
                return this.find(model);
            },
            find: function(model) {
                return this.jsonData(this.localStorage().getItem(this.name + "-" + model.id));
            },
            findAll: function() {
                return (_.chain || _)(this.records).map(function(id) {
                    return this.jsonData(this.localStorage().getItem(this.name + "-" + id));
                }, this).compact().value();
            },
            destroy: function(model) {
                if (model.isNew()) return false;
                this.localStorage().removeItem(this.name + "-" + model.id);
                this.records = _.reject(this.records, function(id) {
                    return id === model.id.toString();
                });
                this.save();
                return model;
            },
            localStorage: function() {
                return localStorage;
            },
            jsonData: function(data) {
                return data && JSON.parse(data);
            },
            _clear: function() {
                var local = this.localStorage(), itemRe = new RegExp("^" + this.name + "-");
                local.removeItem(this.name);
                (_.chain || _)(local).keys().filter(function(k) {
                    return itemRe.test(k);
                }).each(function(k) {
                    local.removeItem(k);
                });
                this.records.length = 0;
            },
            _storageSize: function() {
                return this.localStorage().length;
            }
        });
        Backbone.LocalStorage.sync = window.Store.sync = Backbone.localSync = function(method, model, options) {
            var store = model.localStorage || model.collection.localStorage;
            var resp, errorMessage, syncDfd = Backbone.$.Deferred && Backbone.$.Deferred();
            try {
                switch (method) {
                  case "read":
                    resp = model.id != undefined ? store.find(model) : store.findAll();
                    break;

                  case "create":
                    resp = store.create(model);
                    break;

                  case "update":
                    resp = store.update(model);
                    break;

                  case "delete":
                    resp = store.destroy(model);
                    break;
                }
            } catch (error) {
                if (error.code === 22 && store._storageSize() === 0) errorMessage = "Private browsing is unsupported"; else errorMessage = error.message;
            }
            if (resp) {
                if (options && options.success) {
                    if (Backbone.VERSION === "0.9.10") {
                        options.success(model, resp, options);
                    } else {
                        options.success(resp);
                    }
                }
                if (syncDfd) {
                    syncDfd.resolve(resp);
                }
            } else {
                errorMessage = errorMessage ? errorMessage : "Record Not Found";
                if (options && options.error) if (Backbone.VERSION === "0.9.10") {
                    options.error(model, errorMessage, options);
                } else {
                    options.error(errorMessage);
                }
                if (syncDfd) syncDfd.reject(errorMessage);
            }
            if (options && options.complete) options.complete(resp);
            return syncDfd && syncDfd.promise();
        };
        Backbone.ajaxSync = Backbone.sync;
        Backbone.getSyncMethod = function(model) {
            if (model.localStorage || model.collection && model.collection.localStorage) {
                return Backbone.localSync;
            }
            return Backbone.ajaxSync;
        };
        Backbone.sync = function(method, model, options) {
            return Backbone.getSyncMethod(model).apply(this, [ method, model, options ]);
        };
        return Backbone.LocalStorage;
    });
    (function(root, factory) {
        if (typeof exports === "object") {
            var underscore = require("underscore");
            var backbone = require("backbone");
            module.exports = factory(underscore, backbone);
        } else if (typeof define === "function" && define.amd) {
            define("backbone.wreqr", [ "underscore", "backbone" ], factory);
        }
    })(this, function(_, Backbone) {
        "use strict";
        Backbone.Wreqr = function(Backbone, Marionette, _) {
            "use strict";
            var Wreqr = {};
            Wreqr.Handlers = function(Backbone, _) {
                "use strict";
                var Handlers = function(options) {
                    this.options = options;
                    this._wreqrHandlers = {};
                    if (_.isFunction(this.initialize)) {
                        this.initialize(options);
                    }
                };
                Handlers.extend = Backbone.Model.extend;
                _.extend(Handlers.prototype, Backbone.Events, {
                    setHandlers: function(handlers) {
                        _.each(handlers, function(handler, name) {
                            var context = null;
                            if (_.isObject(handler) && !_.isFunction(handler)) {
                                context = handler.context;
                                handler = handler.callback;
                            }
                            this.setHandler(name, handler, context);
                        }, this);
                    },
                    setHandler: function(name, handler, context) {
                        var config = {
                            callback: handler,
                            context: context
                        };
                        this._wreqrHandlers[name] = config;
                        this.trigger("handler:add", name, handler, context);
                    },
                    hasHandler: function(name) {
                        return !!this._wreqrHandlers[name];
                    },
                    getHandler: function(name) {
                        var config = this._wreqrHandlers[name];
                        if (!config) {
                            throw new Error("Handler not found for '" + name + "'");
                        }
                        return function() {
                            var args = Array.prototype.slice.apply(arguments);
                            return config.callback.apply(config.context, args);
                        };
                    },
                    removeHandler: function(name) {
                        delete this._wreqrHandlers[name];
                    },
                    removeAllHandlers: function() {
                        this._wreqrHandlers = {};
                    }
                });
                return Handlers;
            }(Backbone, _);
            Wreqr.CommandStorage = function() {
                "use strict";
                var CommandStorage = function(options) {
                    this.options = options;
                    this._commands = {};
                    if (_.isFunction(this.initialize)) {
                        this.initialize(options);
                    }
                };
                _.extend(CommandStorage.prototype, Backbone.Events, {
                    getCommands: function(commandName) {
                        var commands = this._commands[commandName];
                        if (!commands) {
                            commands = {
                                command: commandName,
                                instances: []
                            };
                            this._commands[commandName] = commands;
                        }
                        return commands;
                    },
                    addCommand: function(commandName, args) {
                        var command = this.getCommands(commandName);
                        command.instances.push(args);
                    },
                    clearCommands: function(commandName) {
                        var command = this.getCommands(commandName);
                        command.instances = [];
                    }
                });
                return CommandStorage;
            }();
            Wreqr.Commands = function(Wreqr) {
                "use strict";
                return Wreqr.Handlers.extend({
                    storageType: Wreqr.CommandStorage,
                    constructor: function(options) {
                        this.options = options || {};
                        this._initializeStorage(this.options);
                        this.on("handler:add", this._executeCommands, this);
                        var args = Array.prototype.slice.call(arguments);
                        Wreqr.Handlers.prototype.constructor.apply(this, args);
                    },
                    execute: function(name, args) {
                        name = arguments[0];
                        args = Array.prototype.slice.call(arguments, 1);
                        if (this.hasHandler(name)) {
                            this.getHandler(name).apply(this, args);
                        } else {
                            this.storage.addCommand(name, args);
                        }
                    },
                    _executeCommands: function(name, handler, context) {
                        var command = this.storage.getCommands(name);
                        _.each(command.instances, function(args) {
                            handler.apply(context, args);
                        });
                        this.storage.clearCommands(name);
                    },
                    _initializeStorage: function(options) {
                        var storage;
                        var StorageType = options.storageType || this.storageType;
                        if (_.isFunction(StorageType)) {
                            storage = new StorageType();
                        } else {
                            storage = StorageType;
                        }
                        this.storage = storage;
                    }
                });
            }(Wreqr);
            Wreqr.RequestResponse = function(Wreqr) {
                "use strict";
                return Wreqr.Handlers.extend({
                    request: function() {
                        var name = arguments[0];
                        var args = Array.prototype.slice.call(arguments, 1);
                        return this.getHandler(name).apply(this, args);
                    }
                });
            }(Wreqr);
            Wreqr.EventAggregator = function(Backbone, _) {
                "use strict";
                var EA = function() {};
                EA.extend = Backbone.Model.extend;
                _.extend(EA.prototype, Backbone.Events);
                return EA;
            }(Backbone, _);
            return Wreqr;
        }(Backbone, Backbone.Marionette, _);
        return Backbone.Wreqr;
    });
    (function(root, factory) {
        if (typeof exports === "object") {
            var underscore = require("underscore");
            var backbone = require("backbone");
            module.exports = factory(underscore, backbone);
        } else if (typeof define === "function" && define.amd) {
            define("backbone.babysitter", [ "underscore", "backbone" ], factory);
        }
    })(this, function(_, Backbone) {
        "option strict";
        Backbone.ChildViewContainer = function(Backbone, _) {
            var Container = function(views) {
                this._views = {};
                this._indexByModel = {};
                this._indexByCustom = {};
                this._updateLength();
                _.each(views, this.add, this);
            };
            _.extend(Container.prototype, {
                add: function(view, customIndex) {
                    var viewCid = view.cid;
                    this._views[viewCid] = view;
                    if (view.model) {
                        this._indexByModel[view.model.cid] = viewCid;
                    }
                    if (customIndex) {
                        this._indexByCustom[customIndex] = viewCid;
                    }
                    this._updateLength();
                    return this;
                },
                findByModel: function(model) {
                    return this.findByModelCid(model.cid);
                },
                findByModelCid: function(modelCid) {
                    var viewCid = this._indexByModel[modelCid];
                    return this.findByCid(viewCid);
                },
                findByCustom: function(index) {
                    var viewCid = this._indexByCustom[index];
                    return this.findByCid(viewCid);
                },
                findByIndex: function(index) {
                    return _.values(this._views)[index];
                },
                findByCid: function(cid) {
                    return this._views[cid];
                },
                remove: function(view) {
                    var viewCid = view.cid;
                    if (view.model) {
                        delete this._indexByModel[view.model.cid];
                    }
                    _.any(this._indexByCustom, function(cid, key) {
                        if (cid === viewCid) {
                            delete this._indexByCustom[key];
                            return true;
                        }
                    }, this);
                    delete this._views[viewCid];
                    this._updateLength();
                    return this;
                },
                call: function(method) {
                    this.apply(method, _.tail(arguments));
                },
                apply: function(method, args) {
                    _.each(this._views, function(view) {
                        if (_.isFunction(view[method])) {
                            view[method].apply(view, args || []);
                        }
                    });
                },
                _updateLength: function() {
                    this.length = _.size(this._views);
                }
            });
            var methods = [ "forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck" ];
            _.each(methods, function(method) {
                Container.prototype[method] = function() {
                    var views = _.values(this._views);
                    var args = [ views ].concat(_.toArray(arguments));
                    return _[method].apply(_, args);
                };
            });
            return Container;
        }(Backbone, _);
        return Backbone.ChildViewContainer;
    });
    (function(root, factory) {
        if (typeof exports === "object") {
            var underscore = require("underscore");
            var backbone = require("backbone");
            var wreqr = require("backbone.wreqr");
            var babysitter = require("backbone.babysitter");
            module.exports = factory(underscore, backbone, wreqr, babysitter);
        } else if (typeof define === "function" && define.amd) {
            define("marionette", [ "underscore", "backbone", "backbone.wreqr", "backbone.babysitter" ], factory);
        }
    })(this, function(_, Backbone) {
        var Marionette = function(global, Backbone, _) {
            "use strict";
            var Marionette = {};
            Backbone.Marionette = Marionette;
            Marionette.$ = Backbone.$;
            var slice = Array.prototype.slice;
            function throwError(message, name) {
                var error = new Error(message);
                error.name = name || "Error";
                throw error;
            }
            Marionette.extend = Backbone.Model.extend;
            Marionette.getOption = function(target, optionName) {
                if (!target || !optionName) {
                    return;
                }
                var value;
                if (target.options && optionName in target.options && target.options[optionName] !== undefined) {
                    value = target.options[optionName];
                } else {
                    value = target[optionName];
                }
                return value;
            };
            Marionette.normalizeMethods = function(hash) {
                var normalizedHash = {}, method;
                _.each(hash, function(fn, name) {
                    method = fn;
                    if (!_.isFunction(method)) {
                        method = this[method];
                    }
                    if (!method) {
                        return;
                    }
                    normalizedHash[name] = method;
                }, this);
                return normalizedHash;
            };
            Marionette.triggerMethod = function() {
                var splitter = /(^|:)(\w)/gi;
                function getEventName(match, prefix, eventName) {
                    return eventName.toUpperCase();
                }
                var triggerMethod = function(event) {
                    var methodName = "on" + event.replace(splitter, getEventName);
                    var method = this[methodName];
                    if (_.isFunction(this.trigger)) {
                        this.trigger.apply(this, arguments);
                    }
                    if (_.isFunction(method)) {
                        return method.apply(this, _.tail(arguments));
                    }
                };
                return triggerMethod;
            }();
            Marionette.MonitorDOMRefresh = function(documentElement) {
                function handleShow(view) {
                    view._isShown = true;
                    triggerDOMRefresh(view);
                }
                function handleRender(view) {
                    view._isRendered = true;
                    triggerDOMRefresh(view);
                }
                function triggerDOMRefresh(view) {
                    if (view._isShown && view._isRendered && isInDOM(view)) {
                        if (_.isFunction(view.triggerMethod)) {
                            view.triggerMethod("dom:refresh");
                        }
                    }
                }
                function isInDOM(view) {
                    return documentElement.contains(view.el);
                }
                return function(view) {
                    view.listenTo(view, "show", function() {
                        handleShow(view);
                    });
                    view.listenTo(view, "render", function() {
                        handleRender(view);
                    });
                };
            }(document.documentElement);
            (function(Marionette) {
                "use strict";
                function bindFromStrings(target, entity, evt, methods) {
                    var methodNames = methods.split(/\s+/);
                    _.each(methodNames, function(methodName) {
                        var method = target[methodName];
                        if (!method) {
                            throwError("Method '" + methodName + "' was configured as an event handler, but does not exist.");
                        }
                        target.listenTo(entity, evt, method);
                    });
                }
                function bindToFunction(target, entity, evt, method) {
                    target.listenTo(entity, evt, method);
                }
                function unbindFromStrings(target, entity, evt, methods) {
                    var methodNames = methods.split(/\s+/);
                    _.each(methodNames, function(methodName) {
                        var method = target[methodName];
                        target.stopListening(entity, evt, method);
                    });
                }
                function unbindToFunction(target, entity, evt, method) {
                    target.stopListening(entity, evt, method);
                }
                function iterateEvents(target, entity, bindings, functionCallback, stringCallback) {
                    if (!entity || !bindings) {
                        return;
                    }
                    if (_.isFunction(bindings)) {
                        bindings = bindings.call(target);
                    }
                    _.each(bindings, function(methods, evt) {
                        if (_.isFunction(methods)) {
                            functionCallback(target, entity, evt, methods);
                        } else {
                            stringCallback(target, entity, evt, methods);
                        }
                    });
                }
                Marionette.bindEntityEvents = function(target, entity, bindings) {
                    iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);
                };
                Marionette.unbindEntityEvents = function(target, entity, bindings) {
                    iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);
                };
            })(Marionette);
            Marionette.Callbacks = function() {
                this._deferred = Marionette.$.Deferred();
                this._callbacks = [];
            };
            _.extend(Marionette.Callbacks.prototype, {
                add: function(callback, contextOverride) {
                    this._callbacks.push({
                        cb: callback,
                        ctx: contextOverride
                    });
                    this._deferred.done(function(context, options) {
                        if (contextOverride) {
                            context = contextOverride;
                        }
                        callback.call(context, options);
                    });
                },
                run: function(options, context) {
                    this._deferred.resolve(context, options);
                },
                reset: function() {
                    var callbacks = this._callbacks;
                    this._deferred = Marionette.$.Deferred();
                    this._callbacks = [];
                    _.each(callbacks, function(cb) {
                        this.add(cb.cb, cb.ctx);
                    }, this);
                }
            });
            Marionette.Controller = function(options) {
                this.triggerMethod = Marionette.triggerMethod;
                this.options = options || {};
                if (_.isFunction(this.initialize)) {
                    this.initialize(this.options);
                }
            };
            Marionette.Controller.extend = Marionette.extend;
            _.extend(Marionette.Controller.prototype, Backbone.Events, {
                close: function() {
                    this.stopListening();
                    this.triggerMethod("close");
                    this.unbind();
                }
            });
            Marionette.Region = function(options) {
                this.options = options || {};
                this.el = Marionette.getOption(this, "el");
                if (!this.el) {
                    throwError("An 'el' must be specified for a region.", "NoElError");
                }
                if (this.initialize) {
                    var args = Array.prototype.slice.apply(arguments);
                    this.initialize.apply(this, args);
                }
            };
            _.extend(Marionette.Region, {
                buildRegion: function(regionConfig, defaultRegionType) {
                    var regionIsString = _.isString(regionConfig);
                    var regionSelectorIsString = _.isString(regionConfig.selector);
                    var regionTypeIsUndefined = _.isUndefined(regionConfig.regionType);
                    var regionIsType = _.isFunction(regionConfig);
                    if (!regionIsType && !regionIsString && !regionSelectorIsString) {
                        throwError("Region must be specified as a Region type, a selector string or an object with selector property");
                    }
                    var selector, RegionType;
                    if (regionIsString) {
                        selector = regionConfig;
                    }
                    if (regionConfig.selector) {
                        selector = regionConfig.selector;
                        delete regionConfig.selector;
                    }
                    if (regionIsType) {
                        RegionType = regionConfig;
                    }
                    if (!regionIsType && regionTypeIsUndefined) {
                        RegionType = defaultRegionType;
                    }
                    if (regionConfig.regionType) {
                        RegionType = regionConfig.regionType;
                        delete regionConfig.regionType;
                    }
                    if (regionIsString || regionIsType) {
                        regionConfig = {};
                    }
                    regionConfig.el = selector;
                    var region = new RegionType(regionConfig);
                    if (regionConfig.parentEl) {
                        region.getEl = function(selector) {
                            var parentEl = regionConfig.parentEl;
                            if (_.isFunction(parentEl)) {
                                parentEl = parentEl();
                            }
                            return parentEl.find(selector);
                        };
                    }
                    return region;
                }
            });
            _.extend(Marionette.Region.prototype, Backbone.Events, {
                show: function(view) {
                    this.ensureEl();
                    var isViewClosed = view.isClosed || _.isUndefined(view.$el);
                    var isDifferentView = view !== this.currentView;
                    if (isDifferentView) {
                        this.close();
                    }
                    view.render();
                    if (isDifferentView || isViewClosed) {
                        this.open(view);
                    }
                    this.currentView = view;
                    Marionette.triggerMethod.call(this, "show", view);
                    Marionette.triggerMethod.call(view, "show");
                },
                ensureEl: function() {
                    if (!this.$el || this.$el.length === 0) {
                        this.$el = this.getEl(this.el);
                    }
                },
                getEl: function(selector) {
                    return Marionette.$(selector);
                },
                open: function(view) {
                    this.$el.empty().append(view.el);
                },
                close: function() {
                    var view = this.currentView;
                    if (!view || view.isClosed) {
                        return;
                    }
                    if (view.close) {
                        view.close();
                    } else if (view.remove) {
                        view.remove();
                    }
                    Marionette.triggerMethod.call(this, "close", view);
                    delete this.currentView;
                },
                attachView: function(view) {
                    this.currentView = view;
                },
                reset: function() {
                    this.close();
                    delete this.$el;
                }
            });
            Marionette.Region.extend = Marionette.extend;
            Marionette.RegionManager = function(Marionette) {
                var RegionManager = Marionette.Controller.extend({
                    constructor: function(options) {
                        this._regions = {};
                        Marionette.Controller.prototype.constructor.call(this, options);
                    },
                    addRegions: function(regionDefinitions, defaults) {
                        var regions = {};
                        _.each(regionDefinitions, function(definition, name) {
                            if (_.isString(definition)) {
                                definition = {
                                    selector: definition
                                };
                            }
                            if (definition.selector) {
                                definition = _.defaults({}, definition, defaults);
                            }
                            var region = this.addRegion(name, definition);
                            regions[name] = region;
                        }, this);
                        return regions;
                    },
                    addRegion: function(name, definition) {
                        var region;
                        var isObject = _.isObject(definition);
                        var isString = _.isString(definition);
                        var hasSelector = !!definition.selector;
                        if (isString || isObject && hasSelector) {
                            region = Marionette.Region.buildRegion(definition, Marionette.Region);
                        } else if (_.isFunction(definition)) {
                            region = Marionette.Region.buildRegion(definition, Marionette.Region);
                        } else {
                            region = definition;
                        }
                        this._store(name, region);
                        this.triggerMethod("region:add", name, region);
                        return region;
                    },
                    get: function(name) {
                        return this._regions[name];
                    },
                    removeRegion: function(name) {
                        var region = this._regions[name];
                        this._remove(name, region);
                    },
                    removeRegions: function() {
                        _.each(this._regions, function(region, name) {
                            this._remove(name, region);
                        }, this);
                    },
                    closeRegions: function() {
                        _.each(this._regions, function(region, name) {
                            region.close();
                        }, this);
                    },
                    close: function() {
                        this.removeRegions();
                        Marionette.Controller.prototype.close.apply(this, arguments);
                    },
                    _store: function(name, region) {
                        this._regions[name] = region;
                        this._setLength();
                    },
                    _remove: function(name, region) {
                        region.close();
                        delete this._regions[name];
                        this._setLength();
                        this.triggerMethod("region:remove", name, region);
                    },
                    _setLength: function() {
                        this.length = _.size(this._regions);
                    }
                });
                var methods = [ "forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck" ];
                _.each(methods, function(method) {
                    RegionManager.prototype[method] = function() {
                        var regions = _.values(this._regions);
                        var args = [ regions ].concat(_.toArray(arguments));
                        return _[method].apply(_, args);
                    };
                });
                return RegionManager;
            }(Marionette);
            Marionette.TemplateCache = function(templateId) {
                this.templateId = templateId;
            };
            _.extend(Marionette.TemplateCache, {
                templateCaches: {},
                get: function(templateId) {
                    var cachedTemplate = this.templateCaches[templateId];
                    if (!cachedTemplate) {
                        cachedTemplate = new Marionette.TemplateCache(templateId);
                        this.templateCaches[templateId] = cachedTemplate;
                    }
                    return cachedTemplate.load();
                },
                clear: function() {
                    var i;
                    var args = slice.call(arguments);
                    var length = args.length;
                    if (length > 0) {
                        for (i = 0; i < length; i++) {
                            delete this.templateCaches[args[i]];
                        }
                    } else {
                        this.templateCaches = {};
                    }
                }
            });
            _.extend(Marionette.TemplateCache.prototype, {
                load: function() {
                    if (this.compiledTemplate) {
                        return this.compiledTemplate;
                    }
                    var template = this.loadTemplate(this.templateId);
                    this.compiledTemplate = this.compileTemplate(template);
                    return this.compiledTemplate;
                },
                loadTemplate: function(templateId) {
                    var template = Marionette.$(templateId).html();
                    if (!template || template.length === 0) {
                        throwError("Could not find template: '" + templateId + "'", "NoTemplateError");
                    }
                    return template;
                },
                compileTemplate: function(rawTemplate) {
                    return _.template(rawTemplate);
                }
            });
            Marionette.Renderer = {
                render: function(template, data) {
                    if (!template) {
                        throwError("Cannot render the template since it's false, null or undefined.", "TemplateNotFoundError");
                    }
                    var templateFunc;
                    if (typeof template === "function") {
                        templateFunc = template;
                    } else {
                        templateFunc = Marionette.TemplateCache.get(template);
                    }
                    return templateFunc(data);
                }
            };
            Marionette.View = Backbone.View.extend({
                constructor: function(options) {
                    _.bindAll(this, "render");
                    this.options = _.extend({}, _.result(this, "options"), _.isFunction(options) ? options.call(this) : options);
                    this.events = this.normalizeUIKeys(_.result(this, "events"));
                    Backbone.View.prototype.constructor.apply(this, arguments);
                    Marionette.MonitorDOMRefresh(this);
                    this.listenTo(this, "show", this.onShowCalled);
                },
                triggerMethod: Marionette.triggerMethod,
                normalizeMethods: Marionette.normalizeMethods,
                getTemplate: function() {
                    return Marionette.getOption(this, "template");
                },
                mixinTemplateHelpers: function(target) {
                    target = target || {};
                    var templateHelpers = Marionette.getOption(this, "templateHelpers");
                    if (_.isFunction(templateHelpers)) {
                        templateHelpers = templateHelpers.call(this);
                    }
                    return _.extend(target, templateHelpers);
                },
                normalizeUIKeys: function(hash) {
                    var _this = this;
                    if (typeof hash === "undefined") {
                        return;
                    }
                    _.each(_.keys(hash), function(v) {
                        var pattern = /@ui.[a-zA-Z_$0-9]*/g;
                        if (v.match(pattern)) {
                            hash[v.replace(pattern, function(r) {
                                return _.result(_this, "ui")[r.slice(4)];
                            })] = hash[v];
                            delete hash[v];
                        }
                    });
                    return hash;
                },
                configureTriggers: function() {
                    if (!this.triggers) {
                        return;
                    }
                    var triggerEvents = {};
                    var triggers = this.normalizeUIKeys(_.result(this, "triggers"));
                    _.each(triggers, function(value, key) {
                        var hasOptions = _.isObject(value);
                        var eventName = hasOptions ? value.event : value;
                        triggerEvents[key] = function(e) {
                            if (e) {
                                var prevent = e.preventDefault;
                                var stop = e.stopPropagation;
                                var shouldPrevent = hasOptions ? value.preventDefault : prevent;
                                var shouldStop = hasOptions ? value.stopPropagation : stop;
                                if (shouldPrevent && prevent) {
                                    prevent.apply(e);
                                }
                                if (shouldStop && stop) {
                                    stop.apply(e);
                                }
                            }
                            var args = {
                                view: this,
                                model: this.model,
                                collection: this.collection
                            };
                            this.triggerMethod(eventName, args);
                        };
                    }, this);
                    return triggerEvents;
                },
                delegateEvents: function(events) {
                    this._delegateDOMEvents(events);
                    Marionette.bindEntityEvents(this, this.model, Marionette.getOption(this, "modelEvents"));
                    Marionette.bindEntityEvents(this, this.collection, Marionette.getOption(this, "collectionEvents"));
                },
                _delegateDOMEvents: function(events) {
                    events = events || this.events;
                    if (_.isFunction(events)) {
                        events = events.call(this);
                    }
                    var combinedEvents = {};
                    var triggers = this.configureTriggers();
                    _.extend(combinedEvents, events, triggers);
                    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);
                },
                undelegateEvents: function() {
                    var args = Array.prototype.slice.call(arguments);
                    Backbone.View.prototype.undelegateEvents.apply(this, args);
                    Marionette.unbindEntityEvents(this, this.model, Marionette.getOption(this, "modelEvents"));
                    Marionette.unbindEntityEvents(this, this.collection, Marionette.getOption(this, "collectionEvents"));
                },
                onShowCalled: function() {},
                close: function() {
                    if (this.isClosed) {
                        return;
                    }
                    var shouldClose = this.triggerMethod("before:close");
                    if (shouldClose === false) {
                        return;
                    }
                    this.isClosed = true;
                    this.triggerMethod("close");
                    this.unbindUIElements();
                    this.remove();
                },
                bindUIElements: function() {
                    if (!this.ui) {
                        return;
                    }
                    if (!this._uiBindings) {
                        this._uiBindings = this.ui;
                    }
                    var bindings = _.result(this, "_uiBindings");
                    this.ui = {};
                    _.each(_.keys(bindings), function(key) {
                        var selector = bindings[key];
                        this.ui[key] = this.$(selector);
                    }, this);
                },
                unbindUIElements: function() {
                    if (!this.ui || !this._uiBindings) {
                        return;
                    }
                    _.each(this.ui, function($el, name) {
                        delete this.ui[name];
                    }, this);
                    this.ui = this._uiBindings;
                    delete this._uiBindings;
                }
            });
            Marionette.ItemView = Marionette.View.extend({
                constructor: function() {
                    Marionette.View.prototype.constructor.apply(this, arguments);
                },
                serializeData: function() {
                    var data = {};
                    if (this.model) {
                        data = this.model.toJSON();
                    } else if (this.collection) {
                        data = {
                            items: this.collection.toJSON()
                        };
                    }
                    return data;
                },
                render: function() {
                    this.isClosed = false;
                    this.triggerMethod("before:render", this);
                    this.triggerMethod("item:before:render", this);
                    var data = this.serializeData();
                    data = this.mixinTemplateHelpers(data);
                    var template = this.getTemplate();
                    var html = Marionette.Renderer.render(template, data);
                    this.$el.html(html);
                    this.bindUIElements();
                    this.triggerMethod("render", this);
                    this.triggerMethod("item:rendered", this);
                    return this;
                },
                close: function() {
                    if (this.isClosed) {
                        return;
                    }
                    this.triggerMethod("item:before:close");
                    Marionette.View.prototype.close.apply(this, arguments);
                    this.triggerMethod("item:closed");
                }
            });
            Marionette.CollectionView = Marionette.View.extend({
                itemViewEventPrefix: "itemview",
                constructor: function(options) {
                    this._initChildViewStorage();
                    Marionette.View.prototype.constructor.apply(this, arguments);
                    this._initialEvents();
                    this.initRenderBuffer();
                },
                initRenderBuffer: function() {
                    this.elBuffer = document.createDocumentFragment();
                    this._bufferedChildren = [];
                },
                startBuffering: function() {
                    this.initRenderBuffer();
                    this.isBuffering = true;
                },
                endBuffering: function() {
                    this.isBuffering = false;
                    this.appendBuffer(this, this.elBuffer);
                    this._triggerShowBufferedChildren();
                    this.initRenderBuffer();
                },
                _triggerShowBufferedChildren: function() {
                    if (this._isShown) {
                        _.each(this._bufferedChildren, function(child) {
                            Marionette.triggerMethod.call(child, "show");
                        });
                        this._bufferedChildren = [];
                    }
                },
                _initialEvents: function() {
                    if (this.collection) {
                        this.listenTo(this.collection, "add", this.addChildView);
                        this.listenTo(this.collection, "remove", this.removeItemView);
                        this.listenTo(this.collection, "reset", this.render);
                    }
                },
                addChildView: function(item, collection, options) {
                    this.closeEmptyView();
                    var ItemView = this.getItemView(item);
                    var index = this.collection.indexOf(item);
                    this.addItemView(item, ItemView, index);
                },
                onShowCalled: function() {
                    this.children.each(function(child) {
                        Marionette.triggerMethod.call(child, "show");
                    });
                },
                triggerBeforeRender: function() {
                    this.triggerMethod("before:render", this);
                    this.triggerMethod("collection:before:render", this);
                },
                triggerRendered: function() {
                    this.triggerMethod("render", this);
                    this.triggerMethod("collection:rendered", this);
                },
                render: function() {
                    this.isClosed = false;
                    this.triggerBeforeRender();
                    this._renderChildren();
                    this.triggerRendered();
                    return this;
                },
                _renderChildren: function() {
                    this.startBuffering();
                    this.closeEmptyView();
                    this.closeChildren();
                    if (!this.isEmpty(this.collection)) {
                        this.showCollection();
                    } else {
                        this.showEmptyView();
                    }
                    this.endBuffering();
                },
                showCollection: function() {
                    var ItemView;
                    this.collection.each(function(item, index) {
                        ItemView = this.getItemView(item);
                        this.addItemView(item, ItemView, index);
                    }, this);
                },
                showEmptyView: function() {
                    var EmptyView = this.getEmptyView();
                    if (EmptyView && !this._showingEmptyView) {
                        this._showingEmptyView = true;
                        var model = new Backbone.Model();
                        this.addItemView(model, EmptyView, 0);
                    }
                },
                closeEmptyView: function() {
                    if (this._showingEmptyView) {
                        this.closeChildren();
                        delete this._showingEmptyView;
                    }
                },
                getEmptyView: function() {
                    return Marionette.getOption(this, "emptyView");
                },
                getItemView: function(item) {
                    var itemView = Marionette.getOption(this, "itemView");
                    if (!itemView) {
                        throwError("An `itemView` must be specified", "NoItemViewError");
                    }
                    return itemView;
                },
                addItemView: function(item, ItemView, index) {
                    var itemViewOptions = Marionette.getOption(this, "itemViewOptions");
                    if (_.isFunction(itemViewOptions)) {
                        itemViewOptions = itemViewOptions.call(this, item, index);
                    }
                    var view = this.buildItemView(item, ItemView, itemViewOptions);
                    this.addChildViewEventForwarding(view);
                    this.triggerMethod("before:item:added", view);
                    this.children.add(view);
                    this.renderItemView(view, index);
                    if (this._isShown && !this.isBuffering) {
                        Marionette.triggerMethod.call(view, "show");
                    }
                    this.triggerMethod("after:item:added", view);
                    return view;
                },
                addChildViewEventForwarding: function(view) {
                    var prefix = Marionette.getOption(this, "itemViewEventPrefix");
                    this.listenTo(view, "all", function() {
                        var args = slice.call(arguments);
                        var rootEvent = args[0];
                        var itemEvents = this.normalizeMethods(this.getItemEvents());
                        args[0] = prefix + ":" + rootEvent;
                        args.splice(1, 0, view);
                        if (typeof itemEvents !== "undefined" && _.isFunction(itemEvents[rootEvent])) {
                            itemEvents[rootEvent].apply(this, args);
                        }
                        Marionette.triggerMethod.apply(this, args);
                    }, this);
                },
                getItemEvents: function() {
                    if (_.isFunction(this.itemEvents)) {
                        return this.itemEvents.call(this);
                    }
                    return this.itemEvents;
                },
                renderItemView: function(view, index) {
                    view.render();
                    this.appendHtml(this, view, index);
                },
                buildItemView: function(item, ItemViewType, itemViewOptions) {
                    var options = _.extend({
                        model: item
                    }, itemViewOptions);
                    return new ItemViewType(options);
                },
                removeItemView: function(item) {
                    var view = this.children.findByModel(item);
                    this.removeChildView(view);
                    this.checkEmpty();
                },
                removeChildView: function(view) {
                    if (view) {
                        this.stopListening(view);
                        if (view.close) {
                            view.close();
                        } else if (view.remove) {
                            view.remove();
                        }
                        this.children.remove(view);
                    }
                    this.triggerMethod("item:removed", view);
                },
                isEmpty: function(collection) {
                    return !this.collection || this.collection.length === 0;
                },
                checkEmpty: function() {
                    if (this.isEmpty(this.collection)) {
                        this.showEmptyView();
                    }
                },
                appendBuffer: function(collectionView, buffer) {
                    collectionView.$el.append(buffer);
                },
                appendHtml: function(collectionView, itemView, index) {
                    if (collectionView.isBuffering) {
                        collectionView.elBuffer.appendChild(itemView.el);
                        collectionView._bufferedChildren.push(itemView);
                    } else {
                        collectionView.$el.append(itemView.el);
                    }
                },
                _initChildViewStorage: function() {
                    this.children = new Backbone.ChildViewContainer();
                },
                close: function() {
                    if (this.isClosed) {
                        return;
                    }
                    this.triggerMethod("collection:before:close");
                    this.closeChildren();
                    this.triggerMethod("collection:closed");
                    Marionette.View.prototype.close.apply(this, arguments);
                },
                closeChildren: function() {
                    this.children.each(function(child) {
                        this.removeChildView(child);
                    }, this);
                    this.checkEmpty();
                }
            });
            Marionette.CompositeView = Marionette.CollectionView.extend({
                constructor: function() {
                    Marionette.CollectionView.prototype.constructor.apply(this, arguments);
                },
                _initialEvents: function() {
                    this.once("render", function() {
                        if (this.collection) {
                            this.listenTo(this.collection, "add", this.addChildView);
                            this.listenTo(this.collection, "remove", this.removeItemView);
                            this.listenTo(this.collection, "reset", this._renderChildren);
                        }
                    });
                },
                getItemView: function(item) {
                    var itemView = Marionette.getOption(this, "itemView") || this.constructor;
                    if (!itemView) {
                        throwError("An `itemView` must be specified", "NoItemViewError");
                    }
                    return itemView;
                },
                serializeData: function() {
                    var data = {};
                    if (this.model) {
                        data = this.model.toJSON();
                    }
                    return data;
                },
                render: function() {
                    this.isRendered = true;
                    this.isClosed = false;
                    this.resetItemViewContainer();
                    this.triggerBeforeRender();
                    var html = this.renderModel();
                    this.$el.html(html);
                    this.bindUIElements();
                    this.triggerMethod("composite:model:rendered");
                    this._renderChildren();
                    this.triggerMethod("composite:rendered");
                    this.triggerRendered();
                    return this;
                },
                _renderChildren: function() {
                    if (this.isRendered) {
                        this.triggerMethod("composite:collection:before:render");
                        Marionette.CollectionView.prototype._renderChildren.call(this);
                        this.triggerMethod("composite:collection:rendered");
                    }
                },
                renderModel: function() {
                    var data = {};
                    data = this.serializeData();
                    data = this.mixinTemplateHelpers(data);
                    var template = this.getTemplate();
                    return Marionette.Renderer.render(template, data);
                },
                appendBuffer: function(compositeView, buffer) {
                    var $container = this.getItemViewContainer(compositeView);
                    $container.append(buffer);
                },
                appendHtml: function(compositeView, itemView, index) {
                    if (compositeView.isBuffering) {
                        compositeView.elBuffer.appendChild(itemView.el);
                        compositeView._bufferedChildren.push(itemView);
                    } else {
                        var $container = this.getItemViewContainer(compositeView);
                        $container.append(itemView.el);
                    }
                },
                getItemViewContainer: function(containerView) {
                    if ("$itemViewContainer" in containerView) {
                        return containerView.$itemViewContainer;
                    }
                    var container;
                    var itemViewContainer = Marionette.getOption(containerView, "itemViewContainer");
                    if (itemViewContainer) {
                        var selector = _.isFunction(itemViewContainer) ? itemViewContainer.call(this) : itemViewContainer;
                        container = containerView.$(selector);
                        if (container.length <= 0) {
                            throwError("The specified `itemViewContainer` was not found: " + containerView.itemViewContainer, "ItemViewContainerMissingError");
                        }
                    } else {
                        container = containerView.$el;
                    }
                    containerView.$itemViewContainer = container;
                    return container;
                },
                resetItemViewContainer: function() {
                    if (this.$itemViewContainer) {
                        delete this.$itemViewContainer;
                    }
                }
            });
            Marionette.Layout = Marionette.ItemView.extend({
                regionType: Marionette.Region,
                constructor: function(options) {
                    options = options || {};
                    this._firstRender = true;
                    this._initializeRegions(options);
                    Marionette.ItemView.prototype.constructor.call(this, options);
                },
                render: function() {
                    if (this.isClosed) {
                        this._initializeRegions();
                    }
                    if (this._firstRender) {
                        this._firstRender = false;
                    } else if (!this.isClosed) {
                        this._reInitializeRegions();
                    }
                    return Marionette.ItemView.prototype.render.apply(this, arguments);
                },
                close: function() {
                    if (this.isClosed) {
                        return;
                    }
                    this.regionManager.close();
                    Marionette.ItemView.prototype.close.apply(this, arguments);
                },
                addRegion: function(name, definition) {
                    var regions = {};
                    regions[name] = definition;
                    return this._buildRegions(regions)[name];
                },
                addRegions: function(regions) {
                    this.regions = _.extend({}, this.regions, regions);
                    return this._buildRegions(regions);
                },
                removeRegion: function(name) {
                    delete this.regions[name];
                    return this.regionManager.removeRegion(name);
                },
                _buildRegions: function(regions) {
                    var that = this;
                    var defaults = {
                        regionType: Marionette.getOption(this, "regionType"),
                        parentEl: function() {
                            return that.$el;
                        }
                    };
                    return this.regionManager.addRegions(regions, defaults);
                },
                _initializeRegions: function(options) {
                    var regions;
                    this._initRegionManager();
                    if (_.isFunction(this.regions)) {
                        regions = this.regions(options);
                    } else {
                        regions = this.regions || {};
                    }
                    this.addRegions(regions);
                },
                _reInitializeRegions: function() {
                    this.regionManager.closeRegions();
                    this.regionManager.each(function(region) {
                        region.reset();
                    });
                },
                _initRegionManager: function() {
                    this.regionManager = new Marionette.RegionManager();
                    this.listenTo(this.regionManager, "region:add", function(name, region) {
                        this[name] = region;
                        this.trigger("region:add", name, region);
                    });
                    this.listenTo(this.regionManager, "region:remove", function(name, region) {
                        delete this[name];
                        this.trigger("region:remove", name, region);
                    });
                }
            });
            Marionette.AppRouter = Backbone.Router.extend({
                constructor: function(options) {
                    Backbone.Router.prototype.constructor.apply(this, arguments);
                    this.options = options || {};
                    var appRoutes = Marionette.getOption(this, "appRoutes");
                    var controller = this._getController();
                    this.processAppRoutes(controller, appRoutes);
                },
                appRoute: function(route, methodName) {
                    var controller = this._getController();
                    this._addAppRoute(controller, route, methodName);
                },
                processAppRoutes: function(controller, appRoutes) {
                    if (!appRoutes) {
                        return;
                    }
                    var routeNames = _.keys(appRoutes).reverse();
                    _.each(routeNames, function(route) {
                        this._addAppRoute(controller, route, appRoutes[route]);
                    }, this);
                },
                _getController: function() {
                    return Marionette.getOption(this, "controller");
                },
                _addAppRoute: function(controller, route, methodName) {
                    var method = controller[methodName];
                    if (!method) {
                        throwError("Method '" + methodName + "' was not found on the controller");
                    }
                    this.route(route, methodName, _.bind(method, controller));
                }
            });
            Marionette.Application = function(options) {
                this._initRegionManager();
                this._initCallbacks = new Marionette.Callbacks();
                this.vent = new Backbone.Wreqr.EventAggregator();
                this.commands = new Backbone.Wreqr.Commands();
                this.reqres = new Backbone.Wreqr.RequestResponse();
                this.submodules = {};
                _.extend(this, options);
                this.triggerMethod = Marionette.triggerMethod;
            };
            _.extend(Marionette.Application.prototype, Backbone.Events, {
                execute: function() {
                    this.commands.execute.apply(this.commands, arguments);
                },
                request: function() {
                    return this.reqres.request.apply(this.reqres, arguments);
                },
                addInitializer: function(initializer) {
                    this._initCallbacks.add(initializer);
                },
                start: function(options) {
                    this.triggerMethod("initialize:before", options);
                    this._initCallbacks.run(options, this);
                    this.triggerMethod("initialize:after", options);
                    this.triggerMethod("start", options);
                },
                addRegions: function(regions) {
                    return this._regionManager.addRegions(regions);
                },
                closeRegions: function() {
                    this._regionManager.closeRegions();
                },
                removeRegion: function(region) {
                    this._regionManager.removeRegion(region);
                },
                getRegion: function(region) {
                    return this._regionManager.get(region);
                },
                module: function(moduleNames, moduleDefinition) {
                    var ModuleClass = Marionette.Module.getClass(moduleDefinition);
                    var args = slice.call(arguments);
                    args.unshift(this);
                    return ModuleClass.create.apply(ModuleClass, args);
                },
                _initRegionManager: function() {
                    this._regionManager = new Marionette.RegionManager();
                    this.listenTo(this._regionManager, "region:add", function(name, region) {
                        this[name] = region;
                    });
                    this.listenTo(this._regionManager, "region:remove", function(name, region) {
                        delete this[name];
                    });
                }
            });
            Marionette.Application.extend = Marionette.extend;
            Marionette.Module = function(moduleName, app, options) {
                this.moduleName = moduleName;
                this.options = _.extend({}, this.options, options);
                this.initialize = options.initialize || this.initialize;
                this.submodules = {};
                this._setupInitializersAndFinalizers();
                this.app = app;
                this.startWithParent = true;
                this.triggerMethod = Marionette.triggerMethod;
                if (_.isFunction(this.initialize)) {
                    this.initialize(this.options, moduleName, app);
                }
            };
            Marionette.Module.extend = Marionette.extend;
            _.extend(Marionette.Module.prototype, Backbone.Events, {
                initialize: function() {},
                addInitializer: function(callback) {
                    this._initializerCallbacks.add(callback);
                },
                addFinalizer: function(callback) {
                    this._finalizerCallbacks.add(callback);
                },
                start: function(options) {
                    if (this._isInitialized) {
                        return;
                    }
                    _.each(this.submodules, function(mod) {
                        if (mod.startWithParent) {
                            mod.start(options);
                        }
                    });
                    this.triggerMethod("before:start", options);
                    this._initializerCallbacks.run(options, this);
                    this._isInitialized = true;
                    this.triggerMethod("start", options);
                },
                stop: function() {
                    if (!this._isInitialized) {
                        return;
                    }
                    this._isInitialized = false;
                    Marionette.triggerMethod.call(this, "before:stop");
                    _.each(this.submodules, function(mod) {
                        mod.stop();
                    });
                    this._finalizerCallbacks.run(undefined, this);
                    this._initializerCallbacks.reset();
                    this._finalizerCallbacks.reset();
                    Marionette.triggerMethod.call(this, "stop");
                },
                addDefinition: function(moduleDefinition, customArgs) {
                    this._runModuleDefinition(moduleDefinition, customArgs);
                },
                _runModuleDefinition: function(definition, customArgs) {
                    if (!definition) {
                        return;
                    }
                    var args = _.flatten([ this, this.app, Backbone, Marionette, Marionette.$, _, customArgs ]);
                    definition.apply(this, args);
                },
                _setupInitializersAndFinalizers: function() {
                    this._initializerCallbacks = new Marionette.Callbacks();
                    this._finalizerCallbacks = new Marionette.Callbacks();
                }
            });
            _.extend(Marionette.Module, {
                create: function(app, moduleNames, moduleDefinition) {
                    var module = app;
                    var customArgs = slice.call(arguments);
                    customArgs.splice(0, 3);
                    moduleNames = moduleNames.split(".");
                    var length = moduleNames.length;
                    var moduleDefinitions = [];
                    moduleDefinitions[length - 1] = moduleDefinition;
                    _.each(moduleNames, function(moduleName, i) {
                        var parentModule = module;
                        module = this._getModule(parentModule, moduleName, app, moduleDefinition);
                        this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);
                    }, this);
                    return module;
                },
                _getModule: function(parentModule, moduleName, app, def, args) {
                    var options = _.extend({}, def);
                    var ModuleClass = this.getClass(def);
                    var module = parentModule[moduleName];
                    if (!module) {
                        module = new ModuleClass(moduleName, app, options);
                        parentModule[moduleName] = module;
                        parentModule.submodules[moduleName] = module;
                    }
                    return module;
                },
                getClass: function(moduleDefinition) {
                    var ModuleClass = Marionette.Module;
                    if (!moduleDefinition) {
                        return ModuleClass;
                    }
                    if (moduleDefinition.prototype instanceof ModuleClass) {
                        return moduleDefinition;
                    }
                    return moduleDefinition.moduleClass || ModuleClass;
                },
                _addModuleDefinition: function(parentModule, module, def, args) {
                    var fn;
                    var startWithParent;
                    if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {
                        fn = def;
                        startWithParent = true;
                    } else if (_.isObject(def)) {
                        fn = def.define;
                        startWithParent = !_.isUndefined(def.startWithParent) ? def.startWithParent : true;
                    } else {
                        startWithParent = true;
                    }
                    if (fn) {
                        module.addDefinition(fn, args);
                    }
                    module.startWithParent = module.startWithParent && startWithParent;
                    if (module.startWithParent && !module.startWithParentIsConfigured) {
                        module.startWithParentIsConfigured = true;
                        parentModule.addInitializer(function(options) {
                            if (module.startWithParent) {
                                module.start(options);
                            }
                        });
                    }
                }
            });
            return Marionette;
        }(this, Backbone, _);
        return Backbone.Marionette;
    });
    (function($, undefined) {
        var dataSpace = "ui-effects-";
        $.effects = {
            effect: {}
        };
        (function(jQuery, undefined) {
            var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, stringParsers = [ {
                re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                parse: function(execResult) {
                    return [ execResult[1], execResult[2], execResult[3], execResult[4] ];
                }
            }, {
                re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                parse: function(execResult) {
                    return [ execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4] ];
                }
            }, {
                re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
                parse: function(execResult) {
                    return [ parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16) ];
                }
            }, {
                re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
                parse: function(execResult) {
                    return [ parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16) ];
                }
            }, {
                re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                space: "hsla",
                parse: function(execResult) {
                    return [ execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4] ];
                }
            } ], color = jQuery.Color = function(color, green, blue, alpha) {
                return new jQuery.Color.fn.parse(color, green, blue, alpha);
            }, spaces = {
                rgba: {
                    props: {
                        red: {
                            idx: 0,
                            type: "byte"
                        },
                        green: {
                            idx: 1,
                            type: "byte"
                        },
                        blue: {
                            idx: 2,
                            type: "byte"
                        }
                    }
                },
                hsla: {
                    props: {
                        hue: {
                            idx: 0,
                            type: "degrees"
                        },
                        saturation: {
                            idx: 1,
                            type: "percent"
                        },
                        lightness: {
                            idx: 2,
                            type: "percent"
                        }
                    }
                }
            }, propTypes = {
                "byte": {
                    floor: true,
                    max: 255
                },
                percent: {
                    max: 1
                },
                degrees: {
                    mod: 360,
                    floor: true
                }
            }, support = color.support = {}, supportElem = jQuery("<p>")[0], colors, each = jQuery.each;
            supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
            support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1;
            each(spaces, function(spaceName, space) {
                space.cache = "_" + spaceName;
                space.props.alpha = {
                    idx: 3,
                    type: "percent",
                    def: 1
                };
            });
            function clamp(value, prop, allowEmpty) {
                var type = propTypes[prop.type] || {};
                if (value == null) {
                    return allowEmpty || !prop.def ? null : prop.def;
                }
                value = type.floor ? ~~value : parseFloat(value);
                if (isNaN(value)) {
                    return prop.def;
                }
                if (type.mod) {
                    return (value + type.mod) % type.mod;
                }
                return 0 > value ? 0 : type.max < value ? type.max : value;
            }
            function stringParse(string) {
                var inst = color(), rgba = inst._rgba = [];
                string = string.toLowerCase();
                each(stringParsers, function(i, parser) {
                    var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || "rgba";
                    if (values) {
                        parsed = inst[spaceName](values);
                        inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
                        rgba = inst._rgba = parsed._rgba;
                        return false;
                    }
                });
                if (rgba.length) {
                    if (rgba.join() === "0,0,0,0") {
                        jQuery.extend(rgba, colors.transparent);
                    }
                    return inst;
                }
                return colors[string];
            }
            color.fn = jQuery.extend(color.prototype, {
                parse: function(red, green, blue, alpha) {
                    if (red === undefined) {
                        this._rgba = [ null, null, null, null ];
                        return this;
                    }
                    if (red.jquery || red.nodeType) {
                        red = jQuery(red).css(green);
                        green = undefined;
                    }
                    var inst = this, type = jQuery.type(red), rgba = this._rgba = [];
                    if (green !== undefined) {
                        red = [ red, green, blue, alpha ];
                        type = "array";
                    }
                    if (type === "string") {
                        return this.parse(stringParse(red) || colors._default);
                    }
                    if (type === "array") {
                        each(spaces.rgba.props, function(key, prop) {
                            rgba[prop.idx] = clamp(red[prop.idx], prop);
                        });
                        return this;
                    }
                    if (type === "object") {
                        if (red instanceof color) {
                            each(spaces, function(spaceName, space) {
                                if (red[space.cache]) {
                                    inst[space.cache] = red[space.cache].slice();
                                }
                            });
                        } else {
                            each(spaces, function(spaceName, space) {
                                var cache = space.cache;
                                each(space.props, function(key, prop) {
                                    if (!inst[cache] && space.to) {
                                        if (key === "alpha" || red[key] == null) {
                                            return;
                                        }
                                        inst[cache] = space.to(inst._rgba);
                                    }
                                    inst[cache][prop.idx] = clamp(red[key], prop, true);
                                });
                                if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {
                                    inst[cache][3] = 1;
                                    if (space.from) {
                                        inst._rgba = space.from(inst[cache]);
                                    }
                                }
                            });
                        }
                        return this;
                    }
                },
                is: function(compare) {
                    var is = color(compare), same = true, inst = this;
                    each(spaces, function(_, space) {
                        var localCache, isCache = is[space.cache];
                        if (isCache) {
                            localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
                            each(space.props, function(_, prop) {
                                if (isCache[prop.idx] != null) {
                                    same = isCache[prop.idx] === localCache[prop.idx];
                                    return same;
                                }
                            });
                        }
                        return same;
                    });
                    return same;
                },
                _space: function() {
                    var used = [], inst = this;
                    each(spaces, function(spaceName, space) {
                        if (inst[space.cache]) {
                            used.push(spaceName);
                        }
                    });
                    return used.pop();
                },
                transition: function(other, distance) {
                    var end = color(other), spaceName = end._space(), space = spaces[spaceName], startColor = this.alpha() === 0 ? color("transparent") : this, start = startColor[space.cache] || space.to(startColor._rgba), result = start.slice();
                    end = end[space.cache];
                    each(space.props, function(key, prop) {
                        var index = prop.idx, startValue = start[index], endValue = end[index], type = propTypes[prop.type] || {};
                        if (endValue === null) {
                            return;
                        }
                        if (startValue === null) {
                            result[index] = endValue;
                        } else {
                            if (type.mod) {
                                if (endValue - startValue > type.mod / 2) {
                                    startValue += type.mod;
                                } else if (startValue - endValue > type.mod / 2) {
                                    startValue -= type.mod;
                                }
                            }
                            result[index] = clamp((endValue - startValue) * distance + startValue, prop);
                        }
                    });
                    return this[spaceName](result);
                },
                blend: function(opaque) {
                    if (this._rgba[3] === 1) {
                        return this;
                    }
                    var rgb = this._rgba.slice(), a = rgb.pop(), blend = color(opaque)._rgba;
                    return color(jQuery.map(rgb, function(v, i) {
                        return (1 - a) * blend[i] + a * v;
                    }));
                },
                toRgbaString: function() {
                    var prefix = "rgba(", rgba = jQuery.map(this._rgba, function(v, i) {
                        return v == null ? i > 2 ? 1 : 0 : v;
                    });
                    if (rgba[3] === 1) {
                        rgba.pop();
                        prefix = "rgb(";
                    }
                    return prefix + rgba.join() + ")";
                },
                toHslaString: function() {
                    var prefix = "hsla(", hsla = jQuery.map(this.hsla(), function(v, i) {
                        if (v == null) {
                            v = i > 2 ? 1 : 0;
                        }
                        if (i && i < 3) {
                            v = Math.round(v * 100) + "%";
                        }
                        return v;
                    });
                    if (hsla[3] === 1) {
                        hsla.pop();
                        prefix = "hsl(";
                    }
                    return prefix + hsla.join() + ")";
                },
                toHexString: function(includeAlpha) {
                    var rgba = this._rgba.slice(), alpha = rgba.pop();
                    if (includeAlpha) {
                        rgba.push(~~(alpha * 255));
                    }
                    return "#" + jQuery.map(rgba, function(v) {
                        v = (v || 0).toString(16);
                        return v.length === 1 ? "0" + v : v;
                    }).join("");
                },
                toString: function() {
                    return this._rgba[3] === 0 ? "transparent" : this.toRgbaString();
                }
            });
            color.fn.parse.prototype = color.fn;
            function hue2rgb(p, q, h) {
                h = (h + 1) % 1;
                if (h * 6 < 1) {
                    return p + (q - p) * h * 6;
                }
                if (h * 2 < 1) {
                    return q;
                }
                if (h * 3 < 2) {
                    return p + (q - p) * (2 / 3 - h) * 6;
                }
                return p;
            }
            spaces.hsla.to = function(rgba) {
                if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {
                    return [ null, null, null, rgba[3] ];
                }
                var r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max = Math.max(r, g, b), min = Math.min(r, g, b), diff = max - min, add = max + min, l = add * .5, h, s;
                if (min === max) {
                    h = 0;
                } else if (r === max) {
                    h = 60 * (g - b) / diff + 360;
                } else if (g === max) {
                    h = 60 * (b - r) / diff + 120;
                } else {
                    h = 60 * (r - g) / diff + 240;
                }
                if (diff === 0) {
                    s = 0;
                } else if (l <= .5) {
                    s = diff / add;
                } else {
                    s = diff / (2 - add);
                }
                return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
            };
            spaces.hsla.from = function(hsla) {
                if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {
                    return [ null, null, null, hsla[3] ];
                }
                var h = hsla[0] / 360, s = hsla[1], l = hsla[2], a = hsla[3], q = l <= .5 ? l * (1 + s) : l + s - l * s, p = 2 * l - q;
                return [ Math.round(hue2rgb(p, q, h + 1 / 3) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - 1 / 3) * 255), a ];
            };
            each(spaces, function(spaceName, space) {
                var props = space.props, cache = space.cache, to = space.to, from = space.from;
                color.fn[spaceName] = function(value) {
                    if (to && !this[cache]) {
                        this[cache] = to(this._rgba);
                    }
                    if (value === undefined) {
                        return this[cache].slice();
                    }
                    var ret, type = jQuery.type(value), arr = type === "array" || type === "object" ? value : arguments, local = this[cache].slice();
                    each(props, function(key, prop) {
                        var val = arr[type === "object" ? key : prop.idx];
                        if (val == null) {
                            val = local[prop.idx];
                        }
                        local[prop.idx] = clamp(val, prop);
                    });
                    if (from) {
                        ret = color(from(local));
                        ret[cache] = local;
                        return ret;
                    } else {
                        return color(local);
                    }
                };
                each(props, function(key, prop) {
                    if (color.fn[key]) {
                        return;
                    }
                    color.fn[key] = function(value) {
                        var vtype = jQuery.type(value), fn = key === "alpha" ? this._hsla ? "hsla" : "rgba" : spaceName, local = this[fn](), cur = local[prop.idx], match;
                        if (vtype === "undefined") {
                            return cur;
                        }
                        if (vtype === "function") {
                            value = value.call(this, cur);
                            vtype = jQuery.type(value);
                        }
                        if (value == null && prop.empty) {
                            return this;
                        }
                        if (vtype === "string") {
                            match = rplusequals.exec(value);
                            if (match) {
                                value = cur + parseFloat(match[2]) * (match[1] === "+" ? 1 : -1);
                            }
                        }
                        local[prop.idx] = value;
                        return this[fn](local);
                    };
                });
            });
            color.hook = function(hook) {
                var hooks = hook.split(" ");
                each(hooks, function(i, hook) {
                    jQuery.cssHooks[hook] = {
                        set: function(elem, value) {
                            var parsed, curElem, backgroundColor = "";
                            if (value !== "transparent" && (jQuery.type(value) !== "string" || (parsed = stringParse(value)))) {
                                value = color(parsed || value);
                                if (!support.rgba && value._rgba[3] !== 1) {
                                    curElem = hook === "backgroundColor" ? elem.parentNode : elem;
                                    while ((backgroundColor === "" || backgroundColor === "transparent") && curElem && curElem.style) {
                                        try {
                                            backgroundColor = jQuery.css(curElem, "backgroundColor");
                                            curElem = curElem.parentNode;
                                        } catch (e) {}
                                    }
                                    value = value.blend(backgroundColor && backgroundColor !== "transparent" ? backgroundColor : "_default");
                                }
                                value = value.toRgbaString();
                            }
                            try {
                                elem.style[hook] = value;
                            } catch (e) {}
                        }
                    };
                    jQuery.fx.step[hook] = function(fx) {
                        if (!fx.colorInit) {
                            fx.start = color(fx.elem, hook);
                            fx.end = color(fx.end);
                            fx.colorInit = true;
                        }
                        jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));
                    };
                });
            };
            color.hook(stepHooks);
            jQuery.cssHooks.borderColor = {
                expand: function(value) {
                    var expanded = {};
                    each([ "Top", "Right", "Bottom", "Left" ], function(i, part) {
                        expanded["border" + part + "Color"] = value;
                    });
                    return expanded;
                }
            };
            colors = jQuery.Color.names = {
                aqua: "#00ffff",
                black: "#000000",
                blue: "#0000ff",
                fuchsia: "#ff00ff",
                gray: "#808080",
                green: "#008000",
                lime: "#00ff00",
                maroon: "#800000",
                navy: "#000080",
                olive: "#808000",
                purple: "#800080",
                red: "#ff0000",
                silver: "#c0c0c0",
                teal: "#008080",
                white: "#ffffff",
                yellow: "#ffff00",
                transparent: [ null, null, null, 0 ],
                _default: "#ffffff"
            };
        })(jQuery);
        (function() {
            var classAnimationActions = [ "add", "remove", "toggle" ], shorthandStyles = {
                border: 1,
                borderBottom: 1,
                borderColor: 1,
                borderLeft: 1,
                borderRight: 1,
                borderTop: 1,
                borderWidth: 1,
                margin: 1,
                padding: 1
            };
            $.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function(_, prop) {
                $.fx.step[prop] = function(fx) {
                    if (fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {
                        jQuery.style(fx.elem, prop, fx.end);
                        fx.setAttr = true;
                    }
                };
            });
            function getElementStyles(elem) {
                var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle, styles = {};
                if (style && style.length && style[0] && style[style[0]]) {
                    len = style.length;
                    while (len--) {
                        key = style[len];
                        if (typeof style[key] === "string") {
                            styles[$.camelCase(key)] = style[key];
                        }
                    }
                } else {
                    for (key in style) {
                        if (typeof style[key] === "string") {
                            styles[key] = style[key];
                        }
                    }
                }
                return styles;
            }
            function styleDifference(oldStyle, newStyle) {
                var diff = {}, name, value;
                for (name in newStyle) {
                    value = newStyle[name];
                    if (oldStyle[name] !== value) {
                        if (!shorthandStyles[name]) {
                            if ($.fx.step[name] || !isNaN(parseFloat(value))) {
                                diff[name] = value;
                            }
                        }
                    }
                }
                return diff;
            }
            if (!$.fn.addBack) {
                $.fn.addBack = function(selector) {
                    return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
                };
            }
            $.effects.animateClass = function(value, duration, easing, callback) {
                var o = $.speed(duration, easing, callback);
                return this.queue(function() {
                    var animated = $(this), baseClass = animated.attr("class") || "", applyClassChange, allAnimations = o.children ? animated.find("*").addBack() : animated;
                    allAnimations = allAnimations.map(function() {
                        var el = $(this);
                        return {
                            el: el,
                            start: getElementStyles(this)
                        };
                    });
                    applyClassChange = function() {
                        $.each(classAnimationActions, function(i, action) {
                            if (value[action]) {
                                animated[action + "Class"](value[action]);
                            }
                        });
                    };
                    applyClassChange();
                    allAnimations = allAnimations.map(function() {
                        this.end = getElementStyles(this.el[0]);
                        this.diff = styleDifference(this.start, this.end);
                        return this;
                    });
                    animated.attr("class", baseClass);
                    allAnimations = allAnimations.map(function() {
                        var styleInfo = this, dfd = $.Deferred(), opts = $.extend({}, o, {
                            queue: false,
                            complete: function() {
                                dfd.resolve(styleInfo);
                            }
                        });
                        this.el.animate(this.diff, opts);
                        return dfd.promise();
                    });
                    $.when.apply($, allAnimations.get()).done(function() {
                        applyClassChange();
                        $.each(arguments, function() {
                            var el = this.el;
                            $.each(this.diff, function(key) {
                                el.css(key, "");
                            });
                        });
                        o.complete.call(animated[0]);
                    });
                });
            };
            $.fn.extend({
                addClass: function(orig) {
                    return function(classNames, speed, easing, callback) {
                        return speed ? $.effects.animateClass.call(this, {
                            add: classNames
                        }, speed, easing, callback) : orig.apply(this, arguments);
                    };
                }($.fn.addClass),
                removeClass: function(orig) {
                    return function(classNames, speed, easing, callback) {
                        return arguments.length > 1 ? $.effects.animateClass.call(this, {
                            remove: classNames
                        }, speed, easing, callback) : orig.apply(this, arguments);
                    };
                }($.fn.removeClass),
                toggleClass: function(orig) {
                    return function(classNames, force, speed, easing, callback) {
                        if (typeof force === "boolean" || force === undefined) {
                            if (!speed) {
                                return orig.apply(this, arguments);
                            } else {
                                return $.effects.animateClass.call(this, force ? {
                                    add: classNames
                                } : {
                                    remove: classNames
                                }, speed, easing, callback);
                            }
                        } else {
                            return $.effects.animateClass.call(this, {
                                toggle: classNames
                            }, force, speed, easing);
                        }
                    };
                }($.fn.toggleClass),
                switchClass: function(remove, add, speed, easing, callback) {
                    return $.effects.animateClass.call(this, {
                        add: add,
                        remove: remove
                    }, speed, easing, callback);
                }
            });
        })();
        (function() {
            $.extend($.effects, {
                version: "@VERSION",
                save: function(element, set) {
                    for (var i = 0; i < set.length; i++) {
                        if (set[i] !== null) {
                            element.data(dataSpace + set[i], element[0].style[set[i]]);
                        }
                    }
                },
                restore: function(element, set) {
                    var val, i;
                    for (i = 0; i < set.length; i++) {
                        if (set[i] !== null) {
                            val = element.data(dataSpace + set[i]);
                            if (val === undefined) {
                                val = "";
                            }
                            element.css(set[i], val);
                        }
                    }
                },
                setMode: function(el, mode) {
                    if (mode === "toggle") {
                        mode = el.is(":hidden") ? "show" : "hide";
                    }
                    return mode;
                },
                getBaseline: function(origin, original) {
                    var y, x;
                    switch (origin[0]) {
                      case "top":
                        y = 0;
                        break;

                      case "middle":
                        y = .5;
                        break;

                      case "bottom":
                        y = 1;
                        break;

                      default:
                        y = origin[0] / original.height;
                    }
                    switch (origin[1]) {
                      case "left":
                        x = 0;
                        break;

                      case "center":
                        x = .5;
                        break;

                      case "right":
                        x = 1;
                        break;

                      default:
                        x = origin[1] / original.width;
                    }
                    return {
                        x: x,
                        y: y
                    };
                },
                createWrapper: function(element) {
                    if (element.parent().is(".ui-effects-wrapper")) {
                        return element.parent();
                    }
                    var props = {
                        width: element.outerWidth(true),
                        height: element.outerHeight(true),
                        "float": element.css("float")
                    }, wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                        fontSize: "100%",
                        background: "transparent",
                        border: "none",
                        margin: 0,
                        padding: 0
                    }), size = {
                        width: element.width(),
                        height: element.height()
                    }, active = document.activeElement;
                    try {
                        active.id;
                    } catch (e) {
                        active = document.body;
                    }
                    element.wrap(wrapper);
                    if (element[0] === active || $.contains(element[0], active)) {
                        $(active).focus();
                    }
                    wrapper = element.parent();
                    if (element.css("position") === "static") {
                        wrapper.css({
                            position: "relative"
                        });
                        element.css({
                            position: "relative"
                        });
                    } else {
                        $.extend(props, {
                            position: element.css("position"),
                            zIndex: element.css("z-index")
                        });
                        $.each([ "top", "left", "bottom", "right" ], function(i, pos) {
                            props[pos] = element.css(pos);
                            if (isNaN(parseInt(props[pos], 10))) {
                                props[pos] = "auto";
                            }
                        });
                        element.css({
                            position: "relative",
                            top: 0,
                            left: 0,
                            right: "auto",
                            bottom: "auto"
                        });
                    }
                    element.css(size);
                    return wrapper.css(props).show();
                },
                removeWrapper: function(element) {
                    var active = document.activeElement;
                    if (element.parent().is(".ui-effects-wrapper")) {
                        element.parent().replaceWith(element);
                        if (element[0] === active || $.contains(element[0], active)) {
                            $(active).focus();
                        }
                    }
                    return element;
                },
                setTransition: function(element, list, factor, value) {
                    value = value || {};
                    $.each(list, function(i, x) {
                        var unit = element.cssUnit(x);
                        if (unit[0] > 0) {
                            value[x] = unit[0] * factor + unit[1];
                        }
                    });
                    return value;
                }
            });
            function _normalizeArguments(effect, options, speed, callback) {
                if ($.isPlainObject(effect)) {
                    options = effect;
                    effect = effect.effect;
                }
                effect = {
                    effect: effect
                };
                if (options == null) {
                    options = {};
                }
                if ($.isFunction(options)) {
                    callback = options;
                    speed = null;
                    options = {};
                }
                if (typeof options === "number" || $.fx.speeds[options]) {
                    callback = speed;
                    speed = options;
                    options = {};
                }
                if ($.isFunction(speed)) {
                    callback = speed;
                    speed = null;
                }
                if (options) {
                    $.extend(effect, options);
                }
                speed = speed || options.duration;
                effect.duration = $.fx.off ? 0 : typeof speed === "number" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;
                effect.complete = callback || options.complete;
                return effect;
            }
            function standardAnimationOption(option) {
                if (!option || typeof option === "number" || $.fx.speeds[option]) {
                    return true;
                }
                if (typeof option === "string" && !$.effects.effect[option]) {
                    return true;
                }
                if ($.isFunction(option)) {
                    return true;
                }
                if (typeof option === "object" && !option.effect) {
                    return true;
                }
                return false;
            }
            $.fn.extend({
                effect: function() {
                    var args = _normalizeArguments.apply(this, arguments), mode = args.mode, queue = args.queue, effectMethod = $.effects.effect[args.effect];
                    if ($.fx.off || !effectMethod) {
                        if (mode) {
                            return this[mode](args.duration, args.complete);
                        } else {
                            return this.each(function() {
                                if (args.complete) {
                                    args.complete.call(this);
                                }
                            });
                        }
                    }
                    function run(next) {
                        var elem = $(this), complete = args.complete, mode = args.mode;
                        function done() {
                            if ($.isFunction(complete)) {
                                complete.call(elem[0]);
                            }
                            if ($.isFunction(next)) {
                                next();
                            }
                        }
                        if (elem.is(":hidden") ? mode === "hide" : mode === "show") {
                            elem[mode]();
                            done();
                        } else {
                            effectMethod.call(elem[0], args, done);
                        }
                    }
                    return queue === false ? this.each(run) : this.queue(queue || "fx", run);
                },
                show: function(orig) {
                    return function(option) {
                        if (standardAnimationOption(option)) {
                            return orig.apply(this, arguments);
                        } else {
                            var args = _normalizeArguments.apply(this, arguments);
                            args.mode = "show";
                            return this.effect.call(this, args);
                        }
                    };
                }($.fn.show),
                hide: function(orig) {
                    return function(option) {
                        if (standardAnimationOption(option)) {
                            return orig.apply(this, arguments);
                        } else {
                            var args = _normalizeArguments.apply(this, arguments);
                            args.mode = "hide";
                            return this.effect.call(this, args);
                        }
                    };
                }($.fn.hide),
                toggle: function(orig) {
                    return function(option) {
                        if (standardAnimationOption(option) || typeof option === "boolean") {
                            return orig.apply(this, arguments);
                        } else {
                            var args = _normalizeArguments.apply(this, arguments);
                            args.mode = "toggle";
                            return this.effect.call(this, args);
                        }
                    };
                }($.fn.toggle),
                cssUnit: function(key) {
                    var style = this.css(key), val = [];
                    $.each([ "em", "px", "%", "pt" ], function(i, unit) {
                        if (style.indexOf(unit) > 0) {
                            val = [ parseFloat(style), unit ];
                        }
                    });
                    return val;
                }
            });
        })();
        (function() {
            var baseEasings = {};
            $.each([ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function(i, name) {
                baseEasings[name] = function(p) {
                    return Math.pow(p, i + 2);
                };
            });
            $.extend(baseEasings, {
                Sine: function(p) {
                    return 1 - Math.cos(p * Math.PI / 2);
                },
                Circ: function(p) {
                    return 1 - Math.sqrt(1 - p * p);
                },
                Elastic: function(p) {
                    return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);
                },
                Back: function(p) {
                    return p * p * (3 * p - 2);
                },
                Bounce: function(p) {
                    var pow2, bounce = 4;
                    while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}
                    return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);
                }
            });
            $.each(baseEasings, function(name, easeIn) {
                $.easing["easeIn" + name] = easeIn;
                $.easing["easeOut" + name] = function(p) {
                    return 1 - easeIn(1 - p);
                };
                $.easing["easeInOut" + name] = function(p) {
                    return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;
                };
            });
        })();
    })(jQuery);
    define("jquery.ui.effect", [ "jquery" ], function() {});
    (function($, undefined) {
        $.effects.effect.bounce = function(o, done) {
            var el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "effect"), hide = mode === "hide", show = mode === "show", direction = o.direction || "up", distance = o.distance, times = o.times || 5, anims = times * 2 + (show || hide ? 1 : 0), speed = o.duration / anims, easing = o.easing, ref = direction === "up" || direction === "down" ? "top" : "left", motion = direction === "up" || direction === "left", i, upAnim, downAnim, queue = el.queue(), queuelen = queue.length;
            if (show || hide) {
                props.push("opacity");
            }
            $.effects.save(el, props);
            el.show();
            $.effects.createWrapper(el);
            if (!distance) {
                distance = el[ref === "top" ? "outerHeight" : "outerWidth"]() / 3;
            }
            if (show) {
                downAnim = {
                    opacity: 1
                };
                downAnim[ref] = 0;
                el.css("opacity", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing);
            }
            if (hide) {
                distance = distance / Math.pow(2, times - 1);
            }
            downAnim = {};
            downAnim[ref] = 0;
            for (i = 0; i < times; i++) {
                upAnim = {};
                upAnim[ref] = (motion ? "-=" : "+=") + distance;
                el.animate(upAnim, speed, easing).animate(downAnim, speed, easing);
                distance = hide ? distance * 2 : distance / 2;
            }
            if (hide) {
                upAnim = {
                    opacity: 0
                };
                upAnim[ref] = (motion ? "-=" : "+=") + distance;
                el.animate(upAnim, speed, easing);
            }
            el.queue(function() {
                if (hide) {
                    el.hide();
                }
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            });
            if (queuelen > 1) {
                queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1)));
            }
            el.dequeue();
        };
    })(jQuery);
    define("jquery.ui.effect-bounce", [ "jquery.ui.effect" ], function() {});
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("models/profile", [], function() {
            "use strict";
            var Profile, _ref;
            return Profile = function(_super) {
                __extends(Profile, _super);
                function Profile() {
                    _ref = Profile.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                Profile.prototype.initialize = function() {
                    this.localStorage = new Backbone.LocalStorage("profiles");
                    return this.on("change", function() {
                        return this.save();
                    });
                };
                Profile.prototype.defaults = {
                    id: 1,
                    address: "",
                    phone: "",
                    name: ""
                };
                Profile.prototype.isAllFieldsFilled = function() {
                    if (this.get("address") && this.get("phone")) {
                        return true;
                    }
                };
                return Profile;
            }(Backbone.Model);
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("models/vendor", [], function() {
            var Vendor, _ref;
            return Vendor = function(_super) {
                __extends(Vendor, _super);
                function Vendor() {
                    _ref = Vendor.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                Vendor.prototype.defaults = {
                    key: "!PREDEFINED_KEY",
                    mobile_title: "Доставка<br>пончиков",
                    mobile_logo_url: "images/logo.png",
                    mobile_subject: 'Доставка пончиков "От Геннадия"',
                    mobile_description: "Мы доставляем быстро, минимальная стоимость заказа от 500 руб.",
                    mobile_footer: "Выберите блюдо на заказ.",
                    mobile_delivery: "Доставка бесплатно от 500 руб."
                };
                return Vendor;
            }(Backbone.Model);
        });
    }).call(this);
    (function() {
        define("templates/modal_windows/quantity_selector", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $c, $e, $o;
                    $e = function(text, escape) {
                        return ("" + text).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&#39;").replace(/\//g, "&#47;").replace(/"/g, "&quot;");
                    };
                    $c = function(text) {
                        switch (text) {
                          case null:
                          case void 0:
                            return "";

                          case true:
                          case false:
                            return "" + text;

                          default:
                            return text;
                        }
                    };
                    $o = [];
                    $o.push("<div class='modal-wrapper'>\n  <div class='dark-background'></div>\n  <div class='modal-window'>\n    <div class='column full'>\n      <div class='quantity-title'>Введите количество</div>\n      <table class='quantity-table'>\n        <tr>\n          <td>\n            <p class='price'>\n              <span class='price-font'>" + $c(this.money(this.product.get("price"))) + "</span>\n              р.\n            </p>\n          </td>\n          <td>\n            <p class='multiplier'>x\n              <span class='multiplier-font quantity'>" + $e($c(this.quantity)) + "</span>\n              =\n            </p>\n          </td>\n          <td>\n            <p class='price result'>" + $c(this.money(this.total_cost)) + "</p>\n          </td>\n        </tr>\n      </table>\n      <div class='quantity-selector'>\n        <a id='plus-sign' href='#'>+</a>\n        <span class='quantity'>" + this.quantity + "</span>\n        шт\n        <a id='minus-sign' href='#'>-</a>\n      </div>\n      <a class='button' href='#'>\n        <span>ГОТОВО</span>\n      </a>\n    </div>\n  </div>\n</div>");
                    return $o.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        define("helpers/application_helpers", [], function() {
            return {
                ficon: function(name, attrs) {
                    return "<i class='fontello-icon-" + name + "'></i>";
                },
                badge: function(text, type) {
                    return '<span class="badge badge-' + (type ? type : "default") + '">' + text + "</span>";
                },
                truncate: function(string, size) {
                    var new_string, words_array;
                    if (size == null) {
                        size = 100;
                    }
                    if (string.length < size) {
                        return string;
                    }
                    words_array = $.trim(string).substring(0, size).split(" ");
                    new_string = words_array.join(" ") + "&hellip;";
                    return new_string;
                },
                url: function(url_name) {
                    return App.urls[url_name] || "Неизвестный url_name " + url_name;
                },
                money: function(value) {
                    return "<span class='price-font'>" + value.cents / 100 + "</span> р.";
                },
                moneyWithoutCurrency: function(value) {
                    return "" + value.cents / 100;
                }
            };
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("views/modal_windows/quantity_selector", [ "templates/modal_windows/quantity_selector", "helpers/application_helpers" ], function(template, Helpers) {
            var QuantitySelector, _ref;
            return QuantitySelector = function(_super) {
                __extends(QuantitySelector, _super);
                function QuantitySelector() {
                    _ref = QuantitySelector.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                QuantitySelector.prototype.template = template;
                QuantitySelector.prototype.templateHelpers = function() {
                    return Helpers;
                };
                QuantitySelector.prototype.ui = {
                    plusButton: "#plus-sign",
                    minusButton: "#minus-sign",
                    confirmButton: ".button",
                    quantity: ".quantity",
                    result: ".result",
                    outside: ".dark-background"
                };
                QuantitySelector.prototype.triggers = {
                    "click @ui.outside": "close"
                };
                QuantitySelector.prototype.events = {
                    "click @ui.minusButton": "decreaseQuantity",
                    "click @ui.plusButton": "increaseQuantity",
                    "click @ui.confirmButton": "confirmChanges"
                };
                QuantitySelector.prototype.serializeData = function() {
                    return _.extend(this.model.toJSON(), {
                        product: this.model.product
                    });
                };
                QuantitySelector.prototype.decreaseQuantity = function(e) {
                    e.preventDefault();
                    if (!(this.model.get("quantity") < 1)) {
                        this.model.set("quantity", this.model.get("quantity") - 1);
                        return this._updateView();
                    }
                };
                QuantitySelector.prototype.increaseQuantity = function(e) {
                    e.preventDefault();
                    this.model.set("quantity", this.model.get("quantity") + 1);
                    return this._updateView();
                };
                QuantitySelector.prototype.confirmChanges = function(e) {
                    e.preventDefault();
                    return this.close();
                };
                QuantitySelector.prototype.onClose = function() {
                    if (this.model.get("quantity") === 0) {
                        return this.model.destroy();
                    }
                };
                QuantitySelector.prototype._updateView = function() {
                    $(this.ui.quantity).html(this.model.get("quantity"));
                    return $(this.ui.result).html(Helpers.money(this.model.get("total_cost")));
                };
                return QuantitySelector;
            }(Marionette.ItemView);
        });
    }).call(this);
    (function() {
        var __bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("controllers/cart", [ "views/modal_windows/quantity_selector" ], function(QuantitySelectorView) {
            var CartController, _ref;
            return CartController = function(_super) {
                __extends(CartController, _super);
                function CartController() {
                    this.productClick = __bind(this.productClick, this);
                    _ref = CartController.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                CartController.prototype.initialize = function(options) {
                    var _this = this;
                    this.vent = options.vent, this.modal = options.modal, this.cart = options.cart;
                    this.vent.on("product:click", this.productClick);
                    return this.vent.on("cart:clean order:created", function() {
                        return _this.cleanCart();
                    });
                };
                CartController.prototype.productClick = function(product) {
                    var item;
                    item = this.cart.items.itemOfProduct(product);
                    if (item) {
                        return this.modal.show(new QuantitySelectorView({
                            model: item
                        }));
                    } else {
                        return this.cart.addProduct(product);
                    }
                };
                CartController.prototype.deleteItem = function(item) {
                    return this.vent.trigger("cart:item:deleted");
                };
                CartController.prototype.cleanCart = function() {
                    var model, _results;
                    _results = [];
                    while (model = this.cart.items.first()) {
                        _results.push(model.destroy());
                    }
                    return _results;
                };
                return CartController;
            }(Marionette.Controller);
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("models/cart_item", [], function() {
            "use strict";
            var CartItem, _ref;
            return CartItem = function(_super) {
                __extends(CartItem, _super);
                function CartItem() {
                    _ref = CartItem.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                CartItem.prototype.defaults = {
                    quantity: 1
                };
                CartItem.prototype.initialize = function(attrs, options) {
                    var _ref1;
                    this.product = (_ref1 = this.collection) != null ? _ref1.app.products.get(this.get("product_id")) : void 0;
                    if (this.product != null) {
                        this.set({
                            product_title: this.product.get("title"),
                            product_price: this.product.get("price")
                        });
                        this.on("change:quantity", this.updateTotalCost);
                        return this.updateTotalCost();
                    } else {
                        return this.destroy();
                    }
                };
                CartItem.prototype.updateTotalCost = function() {
                    var cents;
                    cents = this.product.get("price").cents * this.get("quantity");
                    return this.set({
                        total_cost: {
                            cents: cents,
                            currency: this.product.get("price").currency
                        },
                        total_cost_cents: cents
                    });
                };
                return CartItem;
            }(Backbone.Model);
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("collections/cart_items", [ "models/cart_item" ], function(CartItem) {
            var CartItems, _ref;
            return CartItems = function(_super) {
                __extends(CartItems, _super);
                function CartItems() {
                    _ref = CartItems.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                CartItems.prototype.url = "cart";
                CartItems.prototype.model = CartItem;
                CartItems.prototype.initialize = function(models, options) {
                    this.localStorage = new Backbone.LocalStorage("cart_items");
                    return this.app = options.app;
                };
                CartItems.prototype.getTotalCost = function() {
                    var addup;
                    addup = function(memo, item) {
                        var _ref1;
                        return (((_ref1 = item.get("total_cost")) != null ? _ref1.cents : void 0) || 0) + memo;
                    };
                    return {
                        cents: this.reduce(addup, 0),
                        currency: "RUB"
                    };
                };
                CartItems.prototype.getTotalCount = function() {
                    var addup;
                    addup = function(memo, item) {
                        return item.get("quantity") + memo;
                    };
                    return this.reduce(addup, 0);
                };
                CartItems.prototype.isProductInCart = function(product) {
                    return !!this.cartItem(product);
                };
                CartItems.prototype.itemOfProduct = function(product) {
                    return this.findWhere({
                        product_id: product.id
                    });
                };
                return CartItems;
            }(Backbone.Collection);
        });
    }).call(this);
    (function() {
        define("templates/check/check", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $c, $o;
                    $c = function(text) {
                        switch (text) {
                          case null:
                          case void 0:
                            return "";

                          case true:
                          case false:
                            return "" + text;

                          default:
                            return text;
                        }
                    };
                    $o = [];
                    $o.push("<div id='check-top-external'>\n  <div class='center' id='check-top-internal'>\n    <div class='check-top-battlement'>\n      <div class='check-top-battlement-center'></div>\n    </div>\n    <div class='check-content'>\n      <div class='scrollable-check'>\n        <div class='check-header'>\n          <a href='#'>\n            <img src='images/back-button.png'>\n          </a>\n          <h2>Ваш чек</h2>\n        </div>\n        <div class='cart-items'></div>\n      </div>\n      <div class='unscrollable-check'>\n        <div class='clearfix row'>\n          <p class='all-product-sum'>Итог:\n            <span class='all-sum-right'>" + $c(this.money(this.total_cost)) + "</span>\n          </p>\n        </div>\n        <form name='message\", method=>\"post'>\n          <section>\n            <label for='phone'>Телефон:</label>\n            <input id='phone' type='tel' name='phone' placeholder='+7(999)999-99-99'>\n            <label for='addrss'>Ваш адрес:</label>\n            <input id='name' type='text' name='address'>\n          </section>\n        </form>\n        <p class='form-comment'>\n          обязательно введите свой телефон для связи\n        </p>\n      </div>\n    </div>\n  </div>\n</div>");
                    return $o.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        define("templates/check/check_cart_item", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $c, $e, $o;
                    $e = function(text, escape) {
                        return ("" + text).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&#39;").replace(/\//g, "&#47;").replace(/"/g, "&quot;");
                    };
                    $c = function(text) {
                        switch (text) {
                          case null:
                          case void 0:
                            return "";

                          case true:
                          case false:
                            return "" + text;

                          default:
                            return text;
                        }
                    };
                    $o = [];
                    $o.push("<p>" + $e($c("Число. " + this.product_title)) + "</p>\n<table>\n  <tbody>\n    <tr>\n      <td class='product-amount'>");
                    $o.push("        " + $c(this.moneyWithoutCurrency(this.product_price)));
                    $o.push("        x");
                    $o.push("        " + $e($c(this.quantity)));
                    $o.push("      </td>\n      <td class='separator'>\n        <div></div>\n      </td>\n      <!-- / TODO Мультивалютность -->\n      <td class='product-price'>" + $e($c("" + this.moneyWithoutCurrency(this.total_cost) + " р.")) + "</td>\n    </tr>\n  </tbody>\n</table>");
                    return $o.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("views/check/check_cart_item", [ "templates/check/check_cart_item", "helpers/application_helpers" ], function(checkCartItemViewTemplate, Helpers) {
            var CheckCartItemView, _ref;
            return CheckCartItemView = function(_super) {
                __extends(CheckCartItemView, _super);
                function CheckCartItemView() {
                    _ref = CheckCartItemView.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                CheckCartItemView.prototype.template = checkCartItemViewTemplate;
                CheckCartItemView.prototype.templateHelpers = function() {
                    return Helpers;
                };
                return CheckCartItemView;
            }(Marionette.ItemView);
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("views/check/check", [ "templates/check/check", "views/check/check_cart_item", "helpers/application_helpers" ], function(template, CheckCartItemView, Helpers) {
            var Check, _ref;
            return Check = function(_super) {
                __extends(Check, _super);
                function Check() {
                    _ref = Check.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                Check.prototype.template = template;
                Check.prototype.templateHelpers = function() {
                    return Helpers;
                };
                Check.prototype.itemView = CheckCartItemView;
                Check.prototype.itemViewContainer = ".cart-items";
                Check.prototype.initialize = function(options) {
                    this.cart = options.cart, this.profile = options.profile;
                    this.collection = this.cart.items;
                    return this.model = this.profile;
                };
                Check.prototype.bindings = {
                    "#address": {
                        observe: "address"
                    },
                    "#phone": {
                        observe: "phone"
                    }
                };
                Check.prototype.ui = {
                    form: "form",
                    backButton: ".check-header a"
                };
                Check.prototype.triggers = {
                    "click @ui.backButton": {
                        event: "cancel:button:clicked",
                        preventDefault: true
                    }
                };
                Check.prototype.serializeData = function() {
                    return _.extend(this.cart.toJSON(), {
                        items: this.cart.items.toJSON(),
                        profile: this.profile
                    });
                };
                Check.prototype._setScrollableAreaHeight = function() {
                    var bottomInfo, container, itemsList, scrollableHeight;
                    container = $(".check-content");
                    bottomInfo = $(".unscrollable-check");
                    itemsList = $(".scrollable-check");
                    scrollableHeight = container.height() - bottomInfo.height();
                    return itemsList.css("height", scrollableHeight);
                };
                Check.prototype.onShow = function() {
                    return this._setScrollableAreaHeight();
                };
                Check.prototype.onRender = function() {
                    return this.stickit();
                };
                return Check;
            }(Marionette.CompositeView);
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("controllers/check", [ "views/check/check" ], function(CheckView) {
            var CheckController, _ref;
            return CheckController = function(_super) {
                __extends(CheckController, _super);
                function CheckController() {
                    _ref = CheckController.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                CheckController.prototype.initialize = function(options) {
                    var _this = this;
                    this.profile = options.profile, this.cart = options.cart, this.app = options.app;
                    this.checkView = new CheckView({
                        profile: this.profile,
                        cart: this.cart
                    });
                    this.app.reqres.setHandler("form:data", function() {
                        return _this.checkView.$el.find("form").serializeObject();
                    });
                    this.app.vent.on("checkout:clicked check:clicked", function() {
                        _this.showCheck();
                        return _this.app.vent.trigger("check:appeared");
                    });
                    this.app.vent.on("order:created", function() {
                        _this.hideCheck();
                        return _this.app.vent.trigger("check:disappeared");
                    });
                    this.checkView.on("check:form:empty:field", function() {
                        return _this.app.vent.trigger("check:form:invalid");
                    });
                    this.checkView.on("check:form:filled", function() {
                        return _this.app.vent.trigger("check:form:valid");
                    });
                    return this.checkView.on("cancel:button:clicked", function() {
                        _this.app.vent.trigger("check:disappeared");
                        return _this.hideCheck();
                    });
                };
                CheckController.prototype.showCheck = function() {
                    return this.app.checkRegion.show(this.checkView);
                };
                CheckController.prototype.hideCheck = function() {
                    return this.app.checkRegion.close();
                };
                return CheckController;
            }(Marionette.Controller);
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("models/product", [ "app" ], function() {
            "use strict";
            var Product, _ref;
            return Product = function(_super) {
                __extends(Product, _super);
                function Product() {
                    _ref = Product.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                Product.prototype.urlRoot = "products";
                return Product;
            }(Backbone.Model);
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("collections/products", [ "models/product" ], function(Model) {
            var Products, _ref;
            return Products = function(_super) {
                __extends(Products, _super);
                function Products() {
                    _ref = Products.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                Products.prototype.url = "products";
                Products.prototype.model = Model;
                return Products;
            }(Backbone.Collection);
        });
    }).call(this);
    (function() {
        define("templates/header/header_check", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $o;
                    $o = [];
                    $o.push("<img src='images/header-check.png'>\n<p>ваш заказ на \n  <br>\n  <span id='amount'></span>\n</p>");
                    return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        var __bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("views/header/header_check", [ "templates/header/header_check", "helpers/application_helpers" ], function(template, Helpers) {
            var HeaderCheckView, _ref;
            return HeaderCheckView = function(_super) {
                __extends(HeaderCheckView, _super);
                function HeaderCheckView() {
                    this.bounce = __bind(this.bounce, this);
                    this.itemRemoved = __bind(this.itemRemoved, this);
                    this.clicked = __bind(this.clicked, this);
                    _ref = HeaderCheckView.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                HeaderCheckView.prototype.template = template;
                HeaderCheckView.prototype.templateHelpers = function() {
                    return Helpers;
                };
                HeaderCheckView.prototype.initialize = function(options) {
                    this.app = options.app, this.cart = options.cart;
                    this.model = this.cart;
                    return this.collection = this.cart.items;
                };
                HeaderCheckView.prototype.bindings = {
                    "#amount": {
                        observe: "total_cost",
                        updateMethod: "html",
                        onGet: function(value) {
                            return Helpers.money(value);
                        }
                    }
                };
                HeaderCheckView.prototype.events = {
                    click: "clicked"
                };
                HeaderCheckView.prototype.collectionEvents = {
                    add: "itemAdded",
                    remove: "itemRemoved"
                };
                HeaderCheckView.prototype.clicked = function() {
                    return this.app.vent.trigger("check:clicked");
                };
                HeaderCheckView.prototype.itemAdded = function(val) {
                    if (this.model.getNumberOfItems() === 1) {
                        this.$el.show();
                    }
                    return this.bounce();
                };
                HeaderCheckView.prototype.itemRemoved = function() {
                    if (this.model.isEmpty()) {
                        return this.$el.hide();
                    }
                };
                HeaderCheckView.prototype.bounce = function() {
                    return this.$("img").effect("bounce", {
                        times: 2
                    }, 150);
                };
                HeaderCheckView.prototype.onRender = function() {
                    return this.stickit();
                };
                return HeaderCheckView;
            }(Marionette.ItemView);
        });
    }).call(this);
    (function() {
        define("templates/header/header", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $o;
                    $o = [];
                    $o.push("<div class='clearfix row'>\n  <div class='column half' id='logo'>\n    <img src='images/logo.png'>\n    <p>Доставка <br> пончиков</p>\n  </div>\n  <div class='column half' id='check'></div>\n</div>");
                    return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("views/header/header", [ "views/header/header_check", "templates/header/header", "helpers/application_helpers" ], function(HeaderCheckView, template, Helpers) {
            var HeaderView, _ref;
            return HeaderView = function(_super) {
                __extends(HeaderView, _super);
                function HeaderView() {
                    _ref = HeaderView.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                HeaderView.prototype.className = "header";
                HeaderView.prototype.template = template;
                HeaderView.prototype.regions = {
                    checkRegion: "#check"
                };
                HeaderView.prototype.initialize = function(options) {
                    this.app = options.app, this.cart = options.cart;
                    return this.checkView = new HeaderCheckView({
                        app: this.app,
                        cart: this.cart
                    });
                };
                HeaderView.prototype.onShow = function() {
                    return this.checkRegion.show(this.checkView);
                };
                return HeaderView;
            }(Marionette.Layout);
        });
    }).call(this);
    (function() {
        define("templates/products/product", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $c, $e, $o;
                    $e = function(text, escape) {
                        return ("" + text).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&#39;").replace(/\//g, "&#47;").replace(/"/g, "&quot;");
                    };
                    $c = function(text) {
                        switch (text) {
                          case null:
                          case void 0:
                            return "";

                          case true:
                          case false:
                            return "" + text;

                          default:
                            return text;
                        }
                    };
                    $o = [];
                    $o.push("<div class='clearfix row'>\n  <div class='column two-thirds'>\n    <img src='" + $e($c(this.image.mobile_url)) + "'>\n    <p>" + $e($c(this.title)) + "</p>\n    <p class='price'>" + $c(this.money(this.price)) + "</p>\n  </div>\n  <div class='column one-thirds product-quantity'></div>\n</div>");
                    return $o.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        define("templates/products/button", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $o;
                    $o = [];
                    $o.push("<a class='button' href='#777'>\n  <img src='images/to-bucket.png'>\n    <span>В ЗАКАЗ</span>\n</a>");
                    return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        define("templates/products/button_added", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $o;
                    $o = [];
                    $o.push("<a class='button in-order' href='#777'>\n  <img src='images/to-bucket-orange.png'>\n    <span>В ЗАКАЗE " + this.quantity + " шт</span>\n</a>");
                    return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        var __bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("views/products/product", [ "templates/products/product", "templates/products/button", "templates/products/button_added", "helpers/application_helpers" ], function(productTemplate, buttonTemplate, buttonAddedTemplate, Helpers) {
            var ProductView, _ref;
            return ProductView = function(_super) {
                __extends(ProductView, _super);
                function ProductView() {
                    this.showButton = __bind(this.showButton, this);
                    this.cartChanged = __bind(this.cartChanged, this);
                    _ref = ProductView.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                ProductView.prototype.templateHelpers = function() {
                    return Helpers;
                };
                ProductView.prototype.template = productTemplate;
                ProductView.prototype.className = "product-block";
                ProductView.prototype.ui = {
                    button: ".product-quantity"
                };
                ProductView.prototype.events = {
                    click: "clicked"
                };
                ProductView.prototype.initialize = function(options) {
                    this.app = options.app, this.cartItems = options.cartItems;
                    this.listenTo(this.cartItems, "add", this.cartChanged);
                    return this.listenTo(this.cartItems, "remove", this.cartChanged);
                };
                ProductView.prototype.clicked = function(e) {
                    e.preventDefault();
                    return this.app.vent.trigger("product:click", this.model);
                };
                ProductView.prototype.cartChanged = function(item) {
                    if (item.get("product_id") === this.model.id) {
                        return this.showButton();
                    }
                };
                ProductView.prototype.showButton = function() {
                    var item;
                    if (item = this.app.cart.items.itemOfProduct(this.model)) {
                        return this.ui.button.html(buttonAddedTemplate({
                            quantity: item.get("quantity")
                        }));
                    } else {
                        return this.ui.button.html(buttonTemplate());
                    }
                };
                ProductView.prototype.onRender = function() {
                    return this.showButton();
                };
                return ProductView;
            }(Marionette.ItemView);
        });
    }).call(this);
    (function() {
        var __bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("views/products/products", [ "views/products/product" ], function(ProductView) {
            var ProductsView, _ref;
            return ProductsView = function(_super) {
                __extends(ProductsView, _super);
                function ProductsView() {
                    this.itemViewOptions = __bind(this.itemViewOptions, this);
                    _ref = ProductsView.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                ProductsView.prototype.itemView = ProductView;
                ProductsView.prototype.initialize = function(options) {
                    return this.app = options.app, options;
                };
                ProductsView.prototype.itemViewOptions = function() {
                    return {
                        app: this.app,
                        cartItems: this.app.cart.items
                    };
                };
                return ProductsView;
            }(Marionette.CollectionView);
        });
    }).call(this);
    (function() {
        define("templates/footer/footer", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $o;
                    $o = [];
                    $o.push("<div class='clearfix row' id='check-bottom'></div>\n<div class='clearfix row' id='workspace'>\n  <div class='column delivery-discount full'>\n    <p>Выберите блюдо на заказ.</p>\n    <p class='free-delivery'>Доставка бесплатно от 500 руб.</p>\n  </div>\n</div>");
                    return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        define("templates/footer/_checkout", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $o;
                    $o = [];
                    $o.push("<div class='column footer-content full'>\n  <a class='button checkout' href='#777'>ОФОРМИТЬ ЗАКАЗ</a>\n</div>");
                    return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        define("templates/footer/_delivery", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $c, $e, $o;
                    $e = function(text, escape) {
                        return ("" + text).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&#39;").replace(/\//g, "&#47;").replace(/"/g, "&quot;");
                    };
                    $c = function(text) {
                        switch (text) {
                          case null:
                          case void 0:
                            return "";

                          case true:
                          case false:
                            return "" + text;

                          default:
                            return text;
                        }
                    };
                    $o = [];
                    $o.push("<div class='" + [ "column", "full", "footer-content", "" + $e($c(this.isAllFieldsFilled() === true ? "delivery" : "delivery-inactive")) ].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>\n  <a class='button' href='#777'>ДОСТАВИТЬ ЗАКАЗ</a>\n</div>");
                    return $o.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        define("templates/footer/_check_bottom", [], function() {
            return function(context) {
                var render;
                render = function() {
                    var $o;
                    $o = [];
                    $o.push("<div class='column full'>\n  <div id='check-bottom-hidden'>\n    <div class='check-short-battlement'>\n      <div class='check-short-battlement-center'></div>\n    </div>\n    <div class='check-short-left'></div>\n    <div class='check-short-right'></div>\n    <div class='check-short-center'></div>\n  </div>\n</div>");
                    return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "");
                };
                return render.call(context);
            };
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("views/footer/footer", [ "templates/footer/footer", "templates/footer/_checkout", "templates/footer/_delivery", "templates/footer/_check_bottom" ], function(template, checkoutButtonTemplate, deliveryButtonTemplate, checkBottomTemplate) {
            var Footer, _ref;
            return Footer = function(_super) {
                __extends(Footer, _super);
                function Footer() {
                    _ref = Footer.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                Footer.prototype.template = template;
                Footer.prototype.initialize = function(options) {
                    var _this = this;
                    this.profile = options.profile, this.app = options.app, this.cart = options.cart;
                    this.listenTo(this.profile, "change:name change:phone", this.manageButtons);
                    this.collection = this.cart.items;
                    this.app.vent.on("check:appeared", function() {
                        _this.showDeliveryButton();
                        return _this.showCheckBottom();
                    });
                    this.app.vent.on("check:disappeared", function() {
                        return _this.showCheckoutButton();
                    });
                    return this.app.vent.on("order:created", function() {
                        return _this.hideButton();
                    });
                };
                Footer.prototype.events = {
                    "click a.checkout": "showCheck",
                    "click .delivery a": "addOrder",
                    "click .delivery-inactive a": "showErrors"
                };
                Footer.prototype.collectionEvents = {
                    add: "showCheckoutButton",
                    remove: "hideButton"
                };
                Footer.prototype.manageButtons = function(model, value) {
                    if (!!value) {
                        return this.showDeliveryButton();
                    } else {
                        return this.deactivateDeliveryButton();
                    }
                };
                Footer.prototype.showCheckoutButton = function() {
                    return this.$("#workspace").html(checkoutButtonTemplate);
                };
                Footer.prototype.showDeliveryButton = function() {
                    return this.$("#workspace").html(deliveryButtonTemplate(this.profile));
                };
                Footer.prototype.deactivateDeliveryButton = function() {
                    var button;
                    button = this.$("#workspace").find(".delivery");
                    return button.removeClass("delivery").addClass("delivery-inactive");
                };
                Footer.prototype.activateDeliveryButton = function() {
                    var button;
                    button = this.$("#workspace").find(".delivery-inactive");
                    return button.removeClass("delivery-inactive").addClass("delivery");
                };
                Footer.prototype.hideButton = function() {
                    if (this.cart.isEmpty()) {
                        this.$("#workspace").html(this.workspaceDOM);
                        return this.$("#check-bottom").children().remove();
                    }
                };
                Footer.prototype.showCheckBottom = function() {
                    return this.$("#check-bottom").html(checkBottomTemplate);
                };
                Footer.prototype.showCheck = function(e) {
                    e.preventDefault();
                    this.showDeliveryButton();
                    return this.trigger("checkout:clicked");
                };
                Footer.prototype.addOrder = function(e) {
                    e.preventDefault();
                    this.app.execute("order:create");
                    return this.hideButton();
                };
                Footer.prototype.showErrors = function(e) {
                    e.preventDefault();
                    return alert("Заполните все поля");
                };
                Footer.prototype.onRender = function() {
                    this.workspaceDOM = this.$("#workspace").children().clone();
                    if (!this.cart.isEmpty()) {
                        return this.showCheckoutButton();
                    }
                };
                Footer.prototype.onClose = function() {
                    return this.stopListening();
                };
                return Footer;
            }(Marionette.ItemView);
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("controllers/footer", [ "views/footer/footer" ], function(FooterView) {
            var FooterController, _ref;
            return FooterController = function(_super) {
                __extends(FooterController, _super);
                function FooterController() {
                    _ref = FooterController.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                FooterController.prototype.initialize = function(options) {
                    var _this = this;
                    this.cart = options.cart, this.app = options.app, this.profile = options.profile, 
                    this.vent = options.vent;
                    this.footerView = new FooterView({
                        app: this.app,
                        cart: this.cart,
                        profile: this.profile
                    });
                    this.showFooter();
                    return this.footerView.on("checkout:clicked", function() {
                        return _this.vent.trigger("checkout:clicked");
                    });
                };
                FooterController.prototype.showFooter = function() {
                    return this.app.footerRegion.show(this.footerView);
                };
                return FooterController;
            }(Marionette.Controller);
        });
    }).call(this);
    (function() {
        var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("models/order", [], function() {
            var Order, _ref;
            return Order = function(_super) {
                __extends(Order, _super);
                function Order() {
                    _ref = Order.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                Order.prototype.url = "http://api.aydamarket.ru/v1/orders.json";
                Order.prototype.sync = function(method, model, options) {
                    options.headers = {
                        "X-Vendor-Key": "467abe2e7d33e6455fe905e879fd36be"
                    };
                    return Backbone.sync(method, model, options);
                };
                return Order;
            }(Backbone.Model);
        });
    }).call(this);
    (function() {
        var __bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("controllers/order", [ "models/order" ], function(Order) {
            var OrderController, _ref;
            return OrderController = function(_super) {
                __extends(OrderController, _super);
                function OrderController() {
                    this.createOrder = __bind(this.createOrder, this);
                    _ref = OrderController.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                OrderController.prototype.initialize = function(options) {
                    var _this = this;
                    this.app = options.app, this.cart = options.cart, this.profile = options.profile;
                    return this.app.commands.setHandler("order:create", function() {
                        return _this.createOrder();
                    });
                };
                OrderController.prototype.createOrder = function() {
                    var order, orderOptions, _this = this;
                    orderOptions = this.cart.toJSON();
                    orderOptions.user = this.profile.toJSON();
                    orderOptions.items = this._getFormattedCartItems();
                    order = new Order(orderOptions);
                    return order.save(null, {
                        success: function(model, response) {
                            var text, _ref1;
                            if (((_ref1 = response.message) != null ? _ref1.text : void 0) != null) {
                                text = response.message.text;
                            } else {
                                text = "Ваш заказ №" + response.id;
                            }
                            alert(text);
                            return _this.app.vent.trigger("order:created", response);
                        }
                    });
                };
                OrderController.prototype._getFormattedCartItems = function() {
                    var item, _i, _len, _ref1, _results;
                    _ref1 = this.cart.items.toJSON();
                    _results = [];
                    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                        item = _ref1[_i];
                        _results.push(item = {
                            product_id: item.product_id,
                            count: item.quantity,
                            price: item.total_cost_cents
                        });
                    }
                    return _results;
                };
                return OrderController;
            }(Marionette.Controller);
        });
    }).call(this);
    (function() {
        var __bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };
        define("models/cart", [ "collections/cart_items" ], function(CartItems) {
            "use strict";
            var Cart, _ref;
            return Cart = function(_super) {
                __extends(Cart, _super);
                function Cart() {
                    this.updateAggregators = __bind(this.updateAggregators, this);
                    _ref = Cart.__super__.constructor.apply(this, arguments);
                    return _ref;
                }
                Cart.prototype.initialize = function(attrs, options) {
                    this.items = new CartItems({}, options);
                    this.listenTo(this.items, "add change remove", this.updateAggregators);
                    return this.updateAggregators();
                };
                Cart.prototype.fetch = function() {
                    return this.items.fetch();
                };
                Cart.prototype.updateAggregators = function() {
                    var total_cost;
                    total_cost = this.items.getTotalCost();
                    return this.set({
                        total_cost: total_cost,
                        total_count: this.items.getTotalCount(),
                        total_cost_cents: total_cost.cents
                    });
                };
                Cart.prototype.isEmpty = function() {
                    return this.items.length === 0;
                };
                Cart.prototype.getNumberOfItems = function() {
                    return this.items.length;
                };
                Cart.prototype.changeQuantity = function(product, quantity) {
                    var item;
                    item = this.items.itemOfProduct(product);
                    item.set("quantity", quantity);
                    return item.save();
                };
                Cart.prototype.addProduct = function(product) {
                    return this.items.create({
                        product_id: product.id
                    });
                };
                Cart.prototype.removeProduct = function(product) {
                    var item;
                    item = this.items.itemOfProduct(product);
                    if (item != null) {
                        return item.destroy();
                    }
                };
                return Cart;
            }(Backbone.Model);
        });
    }).call(this);
    (function() {
        define("controllers/modal", [], function() {
            var ModalController;
            return ModalController = function() {
                function ModalController(options) {
                    this.modalRegion = options.modalRegion;
                }
                ModalController.prototype.show = function(view) {
                    view.on("onClose", this.hide);
                    $("#app-container").addClass("modal-state");
                    return this.modalRegion.show(view);
                };
                ModalController.prototype.hide = function() {
                    $("#app-container").removeClass("modal-state");
                    return this.modalRegion.close();
                };
                return ModalController;
            }();
        });
    }).call(this);
    (function() {
        define("app", [ "models/profile", "models/vendor", "controllers/cart", "collections/cart_items", "controllers/check", "collections/products", "views/header/header", "views/products/products", "controllers/footer", "controllers/order", "models/cart", "controllers/modal" ], function(Profile, Vendor, CartController, CartItems, CheckController, ProductsCollection, HeaderView, ProductsView, FooterController, OrderController, Cart, ModalController) {
            var App;
            App = new Marionette.Application();
            App.version = "0.1.1";
            App.addRegions({
                headerRegion: "#header-region",
                mainRegion: "#main-region",
                footerRegion: "#footer-region",
                checkRegion: "#check-region",
                modalRegion: "#modal-region"
            });
            App.modal = new ModalController({
                modalRegion: App.modalRegion
            });
            App.addInitializer(function(options) {
                var headerView, productsListView;
                App.vendor = new Vendor(options.vendor);
                App.categories = new Backbone.Collection(options.categories);
                App.products = new ProductsCollection(options.products);
                App.profile = new Profile();
                App.profile.fetch();
                App.cart = new Cart({}, {
                    app: this
                });
                App.cart.fetch();
                new CartController({
                    vent: App.vent,
                    cart: App.cart,
                    modal: App.modal
                });
                new CheckController({
                    app: App,
                    profile: App.profile,
                    cart: App.cart
                });
                new OrderController({
                    app: App,
                    cart: App.cart,
                    profile: App.profile
                });
                productsListView = new ProductsView({
                    app: App,
                    collection: App.products
                });
                App.mainRegion.show(productsListView);
                headerView = new HeaderView({
                    app: App,
                    cart: App.cart
                });
                App.headerRegion.show(headerView);
                return new FooterController({
                    app: App,
                    cart: App.cart,
                    profile: App.profile,
                    vent: App.vent
                });
            });
            App.on("start", function() {
                return console.log("App starting....");
            });
            return App;
        });
    }).call(this);
    (function() {
        define("data/bundle", [], function() {
            return {
                vendor: {
                    key: "467abe2e7d33e6455fe905e879fd36be",
                    name: "Тестовый вендор",
                    phone: "79033891228",
                    city: "Чебоксары",
                    mobile_description: "Только у нас, <b>жирные пончики</b>. В течении часа.",
                    mobile_subject: "Супер пончики",
                    mobile_title: "Доставка<br>пончиков",
                    mobile_footer: "Выберите блюдо на заказ",
                    mobile_delivery: "Доставка бесплатно от 500 руб.",
                    mobile_logo: {
                        mobile_url: "http://aydamarket.ru/uploads/vendor/mobile_logo/2/mobile_Photo_on_02.11.13_at_11.37.jpg"
                    },
                    minimal_price: {
                        cents: 55e3,
                        currency: "RUB"
                    },
                    delivery_price: {
                        cents: 0,
                        currency: "RUB"
                    },
                    currency: "RUB"
                },
                categories: [ {
                    id: 1,
                    name: "Пончики"
                } ],
                products: [ {
                    id: 4,
                    category_id: 1,
                    title: "Пончик с начинкой двойной шоколад",
                    price: {
                        cents: 13e3,
                        currency: "RUB"
                    },
                    image: {
                        mobile_url: "data/images/0.jpg"
                    }
                }, {
                    id: 3,
                    category_id: 1,
                    title: "Пончик с творожной начинкой",
                    price: {
                        cents: 14e3,
                        currency: "RUB"
                    },
                    image: {
                        mobile_url: "data/images/1.jpg"
                    }
                }, {
                    id: 2,
                    category_id: 1,
                    title: "Пончик со сливочной начинкой",
                    price: {
                        cents: 15e3,
                        currency: "RUB"
                    },
                    image: {
                        mobile_url: "data/images/2.jpg"
                    }
                }, {
                    id: 1,
                    category_id: 1,
                    title: "Пончик с начинкой ваниль",
                    price: {
                        cents: 16e3,
                        currency: "RUB"
                    },
                    image: {
                        mobile_url: "data/images/3.jpg"
                    }
                }, {
                    id: 7,
                    category_id: 1,
                    title: "Пончик с начинкой яблоко-корица",
                    price: {
                        cents: 1e4,
                        currency: "RUB"
                    },
                    image: {
                        mobile_url: "data/images/4.jpg"
                    }
                }, {
                    id: 6,
                    category_id: 1,
                    title: "Пончик с банановой начинкой",
                    price: {
                        cents: 11e3,
                        currency: "RUB"
                    },
                    image: {
                        mobile_url: "data/images/5.jpg"
                    }
                }, {
                    id: 5,
                    category_id: 1,
                    title: " Пончик с начинкой лесные ягоды",
                    price: {
                        cents: 12e3,
                        currency: "RUB"
                    },
                    image: {
                        mobile_url: "data/images/6.jpg"
                    }
                } ]
            };
        });
    }).call(this);
    (function() {
        "use strict";
        var _this = this;
        require.config({
            shim: {
                underscore: {
                    exports: "_"
                },
                jquery: {
                    exports: "jQuery"
                },
                backbone: {
                    deps: [ "underscore", "jquery" ],
                    exports: "Backbone"
                },
                marionette: {
                    deps: [ "backbone", "backbone.wreqr", "backbone.babysitter" ],
                    exports: "Marionette"
                },
                bootstrap: {
                    deps: [ "jquery" ],
                    exports: "jquery"
                },
                "jquery.form-serialize": {
                    deps: [ "jquery" ]
                },
                "jquery.ui.effect": {
                    deps: [ "jquery" ]
                },
                "jquery.ui.effect-bounce": {
                    deps: [ "jquery.ui.effect" ]
                },
                app: {
                    deps: [ "marionette", "backbone.stickit", "backbone.localStorage", "jquery.ui.effect", "jquery.ui.effect-bounce" ]
                }
            },
            paths: {
                jquery: "../bower_components/jquery/jquery",
                underscore: "../bower_components/underscore/underscore",
                backbone: "../bower_components/backbone/backbone",
                marionette: "../bower_components/backbone.marionette/lib/core/backbone.marionette",
                "backbone.stickit": "../bower_components/backbone.stickit/backbone.stickit",
                "backbone.wreqr": "../bower_components/backbone.wreqr/lib/amd/backbone.wreqr",
                "backbone.babysitter": "../bower_components/backbone.babysitter/lib/amd/backbone.babysitter",
                "backbone.localStorage": "../bower_components/backbone.localStorage/backbone.localStorage",
                "form-serialize": "lib/form-serialize",
                "jquery.ui.effect": "../bower_components/jquery.ui/ui/jquery.ui.effect",
                "jquery.ui.effect-bounce": "../bower_components/jquery.ui/ui/jquery.ui.effect-bounce"
            }
        });
        if (!this.Marionette) {
            require([ "backbone", "backbone.stickit", "backbone.localStorage", "marionette", "jquery.ui.effect", "jquery.ui.effect-bounce" ], function(Backbone, Stickit, LocalStorage, Marionette) {
                return _this.Marionette = Marionette;
            });
        }
        require([ "app", "data/bundle" ], function(KormApp, bundle) {
            return KormApp.start(bundle);
        });
    }).call(this);
    define("main", function() {});
})();